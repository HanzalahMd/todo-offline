{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport randomToken from 'random-token';\nimport { IdleQueue } from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { promiseWait, pluginMissing, LOCAL_PREFIX, flatClone } from './util';\nimport { newRxError } from './rx-error';\nimport { createRxSchema } from './rx-schema';\nimport { isInstanceOf as isInstanceOfRxChangeEvent } from './rx-change-event';\nimport { overwritable } from './overwritable';\nimport { runPluginHooks, runAsyncPluginHooks } from './hooks';\nimport { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { PouchDB, isLevelDown } from './pouch-db';\nimport { create as createRxCollection } from './rx-collection';\nimport { RxChangeEvent } from './rx-change-event';\nimport { getRxStoragePouchDb } from './rx-storage-pouchdb';\nimport { getAllDocuments, deleteStorageInstance } from './rx-database-internal-store';\n/**\n * stores the combinations\n * of used database-names with their adapters\n * so we can throw when the same database is created more then once\n */\n\nvar USED_COMBINATIONS = {};\nvar DB_COUNT = 0;\nexport var RxDatabaseBase =\n/*#__PURE__*/\nfunction () {\n  function RxDatabaseBase(name, adapter, password, multiInstance) {\n    var eventReduce = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var pouchSettings = arguments.length > 6 ? arguments[6] : undefined;\n    this.internalStore = {};\n    this.idleQueue = new IdleQueue();\n    this.token = randomToken(10);\n    this._subs = [];\n    this.destroyed = false;\n    this.subject = new Subject();\n    this.observable$ = this.subject.asObservable().pipe(filter(function (cEvent) {\n      return isInstanceOfRxChangeEvent(cEvent);\n    }));\n    this.name = name;\n    this.adapter = adapter;\n    this.password = password;\n    this.multiInstance = multiInstance;\n    this.eventReduce = eventReduce;\n    this.options = options;\n    this.pouchSettings = pouchSettings;\n    this.storage = getRxStoragePouchDb(adapter, pouchSettings);\n    this.collections = {};\n    DB_COUNT++;\n  }\n\n  var _proto = RxDatabaseBase.prototype;\n  /**\n   * removes all internal collection-info\n   * only use this if you have to upgrade from a major rxdb-version\n   * do NEVER use this to change the schema of a collection\n   */\n\n  _proto.dangerousRemoveCollectionInfo = function dangerousRemoveCollectionInfo() {\n    var _this = this;\n\n    return getAllDocuments(this.internalStore).then(function (docsRes) {\n      return Promise.all(docsRes.map(function (row) {\n        return {\n          _id: row.key,\n          _rev: row.value.rev\n        };\n      }).map(function (doc) {\n        return _this.internalStore.remove(doc._id, doc._rev);\n      }));\n    });\n  }\n  /**\n   * spawns a new pouch-instance\n   */\n  ;\n\n  _proto._spawnPouchDB = function _spawnPouchDB(collectionName, schemaVersion) {\n    var pouchSettings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.storage.createStorageInstance(this.name, collectionName, schemaVersion, {\n      pouchSettings: pouchSettings\n    });\n  }\n  /**\n   * This is the main handle-point for all change events\n   * ChangeEvents created by this instance go:\n   * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n   * ChangeEvents created by other instances go:\n   * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n   */\n  ;\n\n  _proto.$emit = function $emit(changeEvent) {\n    if (!changeEvent) return; // emit into own stream\n\n    this.subject.next(changeEvent); // write to socket if event was created by this instance\n\n    if (changeEvent.databaseToken === this.token) {\n      writeToSocket(this, changeEvent);\n    }\n  }\n  /**\n   * removes the collection-doc from this._collectionsPouch\n   */\n  ;\n\n  _proto.removeCollectionDoc = function removeCollectionDoc(name, schema) {\n    var _this2 = this;\n\n    var docId = _collectionNamePrimary(name, schema);\n\n    return this.internalStore.get(docId).then(function (doc) {\n      return _this2.lockedRun(function () {\n        return _this2.internalStore.remove(doc);\n      });\n    });\n  }\n  /**\n   * creates multiple RxCollections at once\n   * to be much faster by saving db txs and doing stuff in bulk-operations\n   * This function is not called often, but mostly in the critical path at the initial page load\n   * So it must be as fast as possible\n   */\n  ;\n\n  _proto.addCollections =\n  /*#__PURE__*/\n  function () {\n    var _addCollections = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(collectionCreators) {\n      var _this3 = this;\n\n      var pouch, result, internalDocByCollectionName, schemaHashByName, collections, bulkPutDocs, ret;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              pouch = this.internalStore; // get local management docs in bulk request\n\n              _context.next = 3;\n              return pouch.allDocs({\n                include_docs: true,\n                keys: Object.keys(collectionCreators).map(function (name) {\n                  return _collectionNamePrimary(name, collectionCreators[name].schema);\n                })\n              });\n\n            case 3:\n              result = _context.sent;\n              internalDocByCollectionName = {};\n              result.rows.forEach(function (row) {\n                if (!row.error) {\n                  internalDocByCollectionName[row.key] = row.doc;\n                }\n              });\n              schemaHashByName = {};\n              _context.next = 9;\n              return Promise.all(Object.entries(collectionCreators).map(function (_ref) {\n                var name = _ref[0],\n                    args = _ref[1];\n\n                var internalDoc = internalDocByCollectionName[_collectionNamePrimary(name, collectionCreators[name].schema)];\n\n                var useArgs = flatClone(args);\n                useArgs.name = name;\n                var schema = createRxSchema(args.schema);\n                schemaHashByName[name] = schema.hash;\n                useArgs.schema = schema;\n                useArgs.database = _this3; // TODO check if already exists and schema hash has changed\n                // collection already exists\n\n                if (_this3.collections[name]) {\n                  throw newRxError('DB3', {\n                    name: name\n                  });\n                } // collection already exists but has different schema\n\n\n                if (internalDoc && internalDoc.schemaHash !== schemaHashByName[name]) {\n                  throw newRxError('DB6', {\n                    name: name,\n                    previousSchemaHash: internalDoc.schemaHash,\n                    schemaHash: schemaHashByName[name]\n                  });\n                } // run hooks\n\n\n                var hookData = flatClone(args);\n                hookData.database = _this3;\n                hookData.name = name;\n                runPluginHooks('preCreateRxCollection', hookData);\n                return createRxCollection(useArgs, !!internalDoc);\n              }));\n\n            case 9:\n              collections = _context.sent;\n              bulkPutDocs = [];\n              ret = {};\n              collections.forEach(function (collection) {\n                var name = collection.name;\n                ret[name] = collection;\n\n                if (collection.schema.crypt && !_this3.password) {\n                  throw newRxError('DB7', {\n                    name: name\n                  });\n                } // add to bulk-docs list\n\n\n                if (!internalDocByCollectionName[name]) {\n                  bulkPutDocs.push({\n                    _id: _collectionNamePrimary(name, collectionCreators[name].schema),\n                    schemaHash: schemaHashByName[name],\n                    schema: collection.schema.normalized,\n                    version: collection.schema.version\n                  });\n                } // set as getter to the database\n\n\n                _this3.collections[name] = collection;\n\n                if (!_this3[name]) {\n                  Object.defineProperty(_this3, name, {\n                    get: function get() {\n                      return _this3.collections[name];\n                    }\n                  });\n                }\n              }); // make a single call to the pouchdb instance\n\n              if (!(bulkPutDocs.length > 0)) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 16;\n              return pouch.bulkDocs({\n                docs: bulkPutDocs\n              });\n\n            case 16:\n              return _context.abrupt(\"return\", ret);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function addCollections(_x) {\n      return _addCollections.apply(this, arguments);\n    }\n\n    return addCollections;\n  }()\n  /**\n   * create or fetch a collection\n   * @deprecated use addCollections() instead, it is faster and better typed\n   */\n  ;\n\n  _proto.collection = function collection(args) {\n    var _this$addCollections;\n\n    if (typeof args === 'string') {\n      return Promise.resolve(this.collections[args]);\n    } // collection() is deprecated, call new bulk-creation method\n\n\n    return this.addCollections((_this$addCollections = {}, _this$addCollections[args.name] = args, _this$addCollections)).then(function (colObject) {\n      return colObject[args.name];\n    });\n  }\n  /**\n   * delete all data of the collection and its previous versions\n   */\n  ;\n\n  _proto.removeCollection = function removeCollection(collectionName) {\n    var _this4 = this;\n\n    if (this.collections[collectionName]) this.collections[collectionName].destroy(); // remove schemas from internal db\n\n    return _removeAllOfCollection(this, collectionName) // get all relevant pouchdb-instances\n    .then(function (knownVersions) {\n      return knownVersions.map(function (v) {\n        return _this4._spawnPouchDB(collectionName, v);\n      });\n    }) // remove documents\n    .then(function (pouches) {\n      return Promise.all(pouches.map(function (pouch) {\n        return _this4.lockedRun(function () {\n          return pouch.destroy();\n        });\n      }));\n    }).then(function () {});\n  }\n  /**\n   * runs the given function between idleQueue-locking\n   */\n  ;\n\n  _proto.lockedRun = function lockedRun(fn) {\n    return this.idleQueue.wrapCall(fn);\n  };\n\n  _proto.requestIdlePromise = function requestIdlePromise() {\n    return this.idleQueue.requestIdlePromise();\n  }\n  /**\n   * Export database to a JSON friendly format.\n   * @param _decrypted\n   * When true, all encrypted values will be decrypted.\n   */\n  ;\n\n  _proto.dump = function dump() {\n    var _decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var _collections = arguments.length > 1 ? arguments[1] : undefined;\n\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * Import the parsed JSON export into the collection.\n   * @param _exportedJSON The previously exported data from the `<db>.dump()` method.\n   * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n   * since data could be encrypted.\n   */\n  ;\n\n  _proto.importDump = function importDump(_exportedJSON) {\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * spawn server\n   */\n  ;\n\n  _proto.server = function server(_options) {\n    throw pluginMissing('server');\n  };\n\n  _proto.leaderElector = function leaderElector() {\n    throw pluginMissing('leader-election');\n  };\n\n  _proto.isLeader = function isLeader() {\n    throw pluginMissing('leader-election');\n  }\n  /**\n   * returns a promise which resolves when the instance becomes leader\n   */\n  ;\n\n  _proto.waitForLeadership = function waitForLeadership() {\n    throw pluginMissing('leader-election');\n  }\n  /**\n   * destroys the database-instance and all collections\n   */\n  ;\n\n  _proto.destroy = function destroy() {\n    var _this5 = this;\n\n    if (this.destroyed) return Promise.resolve(false);\n    runPluginHooks('preDestroyRxDatabase', this);\n    DB_COUNT--;\n    this.destroyed = true;\n\n    if (this.broadcastChannel) {\n      /**\n       * The broadcast-channel gets closed lazy\n       * to ensure that all pending change-events\n       * get emitted\n       */\n      setTimeout(function () {\n        return _this5.broadcastChannel.close();\n      }, 1000);\n    }\n\n    this._subs.map(function (sub) {\n      return sub.unsubscribe();\n    }); // destroy all collections\n\n\n    return Promise.all(Object.keys(this.collections).map(function (key) {\n      return _this5.collections[key];\n    }).map(function (col) {\n      return col.destroy();\n    })) // remove combination from USED_COMBINATIONS-map\n    .then(function () {\n      return _removeUsedCombination(_this5.name, _this5.adapter);\n    }).then(function () {\n      return true;\n    });\n  }\n  /**\n   * deletes the database and its stored data\n   */\n  ;\n\n  _proto.remove = function remove() {\n    var _this6 = this;\n\n    return this.destroy().then(function () {\n      return removeRxDatabase(_this6.name, _this6.adapter);\n    });\n  };\n\n  _createClass(RxDatabaseBase, [{\n    key: \"$\",\n    get: function get() {\n      return this.observable$;\n    }\n  }]);\n\n  return RxDatabaseBase;\n}();\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\n\nfunction _isNameAdapterUsed(name, adapter) {\n  if (!USED_COMBINATIONS[name]) return false;\n  var used = false;\n  USED_COMBINATIONS[name].forEach(function (ad) {\n    if (ad === adapter) used = true;\n  });\n\n  if (used) {\n    throw newRxError('DB8', {\n      name: name,\n      adapter: adapter,\n      link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n    });\n  }\n}\n\nfunction _removeUsedCombination(name, adapter) {\n  if (!USED_COMBINATIONS[name]) return;\n  var index = USED_COMBINATIONS[name].indexOf(adapter);\n  USED_COMBINATIONS[name].splice(index, 1);\n}\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\n\n\nexport function _ensureStorageTokenExists(rxDatabase) {\n  return rxDatabase.internalStore.get(LOCAL_PREFIX + 'storageToken')[\"catch\"](function () {\n    // no doc exists -> insert\n    return rxDatabase.internalStore.put({\n      _id: LOCAL_PREFIX + 'storageToken',\n      value: randomToken(10)\n    })[\"catch\"](function () {}).then(function () {\n      return promiseWait(0);\n    });\n  }).then(function () {\n    return rxDatabase.internalStore.get(LOCAL_PREFIX + 'storageToken');\n  }).then(function (storageTokenDoc2) {\n    return storageTokenDoc2.value;\n  });\n}\n/**\n * writes the changeEvent to the broadcastChannel\n */\n\nexport function writeToSocket(rxDatabase, changeEvent) {\n  if (rxDatabase.multiInstance && !changeEvent.isIntern() && rxDatabase.broadcastChannel) {\n    var sendOverChannel = {\n      cE: changeEvent.toJSON(),\n      storageToken: rxDatabase.storageToken\n    };\n    return rxDatabase.broadcastChannel.postMessage(sendOverChannel).then(function () {\n      return true;\n    });\n  } else return Promise.resolve(false);\n}\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\n\nexport function _collectionNamePrimary(name, schema) {\n  return name + '-' + schema.version;\n}\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\n\nexport function _removeAllOfCollection(rxDatabase, collectionName) {\n  return rxDatabase.lockedRun(function () {\n    return getAllDocuments(rxDatabase.internalStore);\n  }).then(function (data) {\n    var relevantDocs = data.map(function (row) {\n      return row.doc;\n    }).filter(function (doc) {\n      var name = doc._id.split('-')[0];\n\n      return name === collectionName;\n    });\n    return Promise.all(relevantDocs.map(function (doc) {\n      return rxDatabase.lockedRun(function () {\n        return rxDatabase.internalStore.remove(doc);\n      });\n    })).then(function () {\n      return relevantDocs.map(function (doc) {\n        return doc.version;\n      });\n    });\n  });\n}\n\nfunction _prepareBroadcastChannel(rxDatabase) {\n  // broadcastChannel\n  rxDatabase.broadcastChannel = new BroadcastChannel('RxDB:' + rxDatabase.name + ':' + 'socket');\n  rxDatabase.broadcastChannel$ = new Subject();\n\n  rxDatabase.broadcastChannel.onmessage = function (msg) {\n    if (msg.storageToken !== rxDatabase.storageToken) return; // not same storage-state\n\n    if (msg.cE.databaseToken === rxDatabase.token) return; // same db\n\n    var changeEvent = new RxChangeEvent(msg.cE.operation, msg.cE.documentId, msg.cE.documentData, msg.cE.databaseToken, msg.cE.collectionName, msg.cE.isLocal, msg.cE.startTime, msg.cE.endTime, msg.cE.previousData);\n    rxDatabase.broadcastChannel$.next(changeEvent);\n  }; // TODO only subscribe when something is listening to the event-chain\n\n\n  rxDatabase._subs.push(rxDatabase.broadcastChannel$.subscribe(function (cE) {\n    rxDatabase.$emit(cE);\n  }));\n}\n/**\n * do the async things for this database\n */\n\n\nfunction prepare(rxDatabase) {\n  return rxDatabase.storage.createInternalStorageInstance(rxDatabase.name).then(function (internalStore) {\n    rxDatabase.internalStore = internalStore;\n    return _ensureStorageTokenExists(rxDatabase);\n  }).then(function (storageToken) {\n    rxDatabase.storageToken = storageToken;\n\n    if (rxDatabase.multiInstance) {\n      _prepareBroadcastChannel(rxDatabase);\n    }\n  });\n}\n\nexport function createRxDatabase(_ref2) {\n  var name = _ref2.name,\n      adapter = _ref2.adapter,\n      password = _ref2.password,\n      _ref2$multiInstance = _ref2.multiInstance,\n      multiInstance = _ref2$multiInstance === void 0 ? true : _ref2$multiInstance,\n      _ref2$eventReduce = _ref2.eventReduce,\n      eventReduce = _ref2$eventReduce === void 0 ? false : _ref2$eventReduce,\n      _ref2$ignoreDuplicate = _ref2.ignoreDuplicate,\n      ignoreDuplicate = _ref2$ignoreDuplicate === void 0 ? false : _ref2$ignoreDuplicate,\n      _ref2$options = _ref2.options,\n      options = _ref2$options === void 0 ? {} : _ref2$options,\n      _ref2$pouchSettings = _ref2.pouchSettings,\n      pouchSettings = _ref2$pouchSettings === void 0 ? {} : _ref2$pouchSettings;\n  runPluginHooks('preCreateRxDatabase', {\n    name: name,\n    adapter: adapter,\n    password: password,\n    multiInstance: multiInstance,\n    eventReduce: eventReduce,\n    ignoreDuplicate: ignoreDuplicate,\n    options: options,\n    pouchSettings: pouchSettings\n  }); // check if pouchdb-adapter\n\n  if (typeof adapter === 'string') {\n    // TODO make a function hasAdapter()\n    if (!PouchDB.adapters || !PouchDB.adapters[adapter]) {\n      throw newRxError('DB9', {\n        adapter: adapter\n      });\n    }\n  } else {\n    isLevelDown(adapter);\n\n    if (!PouchDB.adapters || !PouchDB.adapters.leveldb) {\n      throw newRxError('DB10', {\n        adapter: adapter\n      });\n    }\n  }\n\n  if (password) {\n    overwritable.validatePassword(password);\n  } // check if combination already used\n\n\n  if (!ignoreDuplicate) {\n    _isNameAdapterUsed(name, adapter);\n  } // add to used_map\n\n\n  if (!USED_COMBINATIONS[name]) {\n    USED_COMBINATIONS[name] = [];\n  }\n\n  USED_COMBINATIONS[name].push(adapter);\n  var rxDatabase = new RxDatabaseBase(name, adapter, password, multiInstance, eventReduce, options, pouchSettings);\n  return prepare(rxDatabase).then(function () {\n    return runAsyncPluginHooks('createRxDatabase', rxDatabase);\n  }).then(function () {\n    return rxDatabase;\n  });\n}\n/**\n * removes the database and all its known data\n */\n\nexport function removeRxDatabase(databaseName, adapter) {\n  var storage = getRxStoragePouchDb(adapter);\n  return storage.createInternalStorageInstance(databaseName).then(function (internalStore) {\n    return getAllDocuments(internalStore).then(function (docs) {\n      // remove collections storages\n      return Promise.all(docs.map(function (colDoc) {\n        return colDoc.id;\n      }).map(function (id) {\n        var split = id.split('-');\n        var name = split[0];\n        var version = parseInt(split[1], 10);\n        var instance = storage.createStorageInstance(databaseName, name, version);\n        return instance.destroy();\n      }));\n    }) // remove internals\n    .then(function () {\n      return deleteStorageInstance(internalStore);\n    });\n  });\n}\n/**\n * check if the given adapter can be used\n */\n\nexport function checkAdapter(adapter) {\n  return overwritable.checkAdapter(adapter);\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxDatabaseBase;\n}\nexport function dbCount() {\n  return DB_COUNT;\n}\nexport default {\n  createRxDatabase: createRxDatabase,\n  removeRxDatabase: removeRxDatabase,\n  checkAdapter: checkAdapter,\n  isInstanceOf: isInstanceOf,\n  RxDatabaseBase: RxDatabaseBase,\n  dbCount: dbCount\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/rx-database.js"],"names":["_regeneratorRuntime","_asyncToGenerator","_createClass","randomToken","IdleQueue","BroadcastChannel","promiseWait","pluginMissing","LOCAL_PREFIX","flatClone","newRxError","createRxSchema","isInstanceOf","isInstanceOfRxChangeEvent","overwritable","runPluginHooks","runAsyncPluginHooks","Subject","filter","PouchDB","isLevelDown","create","createRxCollection","RxChangeEvent","getRxStoragePouchDb","getAllDocuments","deleteStorageInstance","USED_COMBINATIONS","DB_COUNT","RxDatabaseBase","name","adapter","password","multiInstance","eventReduce","arguments","length","undefined","options","pouchSettings","internalStore","idleQueue","token","_subs","destroyed","subject","observable$","asObservable","pipe","cEvent","storage","collections","_proto","prototype","dangerousRemoveCollectionInfo","_this","then","docsRes","Promise","all","map","row","_id","key","_rev","value","rev","doc","remove","_spawnPouchDB","collectionName","schemaVersion","createStorageInstance","$emit","changeEvent","next","databaseToken","writeToSocket","removeCollectionDoc","schema","_this2","docId","_collectionNamePrimary","get","lockedRun","addCollections","_addCollections","mark","_callee","collectionCreators","_this3","pouch","result","internalDocByCollectionName","schemaHashByName","bulkPutDocs","ret","wrap","_callee$","_context","prev","allDocs","include_docs","keys","Object","sent","rows","forEach","error","entries","_ref","args","internalDoc","useArgs","hash","database","schemaHash","previousSchemaHash","hookData","collection","crypt","push","normalized","version","defineProperty","bulkDocs","docs","abrupt","stop","_x","apply","_this$addCollections","resolve","colObject","removeCollection","_this4","destroy","_removeAllOfCollection","knownVersions","v","pouches","fn","wrapCall","requestIdlePromise","dump","_decrypted","_collections","importDump","_exportedJSON","server","_options","leaderElector","isLeader","waitForLeadership","_this5","broadcastChannel","setTimeout","close","sub","unsubscribe","col","_removeUsedCombination","_this6","removeRxDatabase","_isNameAdapterUsed","used","ad","link","index","indexOf","splice","_ensureStorageTokenExists","rxDatabase","put","storageTokenDoc2","isIntern","sendOverChannel","cE","toJSON","storageToken","postMessage","data","relevantDocs","split","_prepareBroadcastChannel","broadcastChannel$","onmessage","msg","operation","documentId","documentData","isLocal","startTime","endTime","previousData","subscribe","prepare","createInternalStorageInstance","createRxDatabase","_ref2","_ref2$multiInstance","_ref2$eventReduce","_ref2$ignoreDuplicate","ignoreDuplicate","_ref2$options","_ref2$pouchSettings","adapters","leveldb","validatePassword","databaseName","colDoc","id","parseInt","instance","checkAdapter","obj","dbCount"],"mappings":"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","sourcesContent":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport randomToken from 'random-token';\nimport { IdleQueue } from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { promiseWait, pluginMissing, LOCAL_PREFIX, flatClone } from './util';\nimport { newRxError } from './rx-error';\nimport { createRxSchema } from './rx-schema';\nimport { isInstanceOf as isInstanceOfRxChangeEvent } from './rx-change-event';\nimport { overwritable } from './overwritable';\nimport { runPluginHooks, runAsyncPluginHooks } from './hooks';\nimport { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { PouchDB, isLevelDown } from './pouch-db';\nimport { create as createRxCollection } from './rx-collection';\nimport { RxChangeEvent } from './rx-change-event';\nimport { getRxStoragePouchDb } from './rx-storage-pouchdb';\nimport { getAllDocuments, deleteStorageInstance } from './rx-database-internal-store';\n/**\n * stores the combinations\n * of used database-names with their adapters\n * so we can throw when the same database is created more then once\n */\n\nvar USED_COMBINATIONS = {};\nvar DB_COUNT = 0;\nexport var RxDatabaseBase = /*#__PURE__*/function () {\n  function RxDatabaseBase(name, adapter, password, multiInstance) {\n    var eventReduce = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var pouchSettings = arguments.length > 6 ? arguments[6] : undefined;\n    this.internalStore = {};\n    this.idleQueue = new IdleQueue();\n    this.token = randomToken(10);\n    this._subs = [];\n    this.destroyed = false;\n    this.subject = new Subject();\n    this.observable$ = this.subject.asObservable().pipe(filter(function (cEvent) {\n      return isInstanceOfRxChangeEvent(cEvent);\n    }));\n    this.name = name;\n    this.adapter = adapter;\n    this.password = password;\n    this.multiInstance = multiInstance;\n    this.eventReduce = eventReduce;\n    this.options = options;\n    this.pouchSettings = pouchSettings;\n    this.storage = getRxStoragePouchDb(adapter, pouchSettings);\n    this.collections = {};\n    DB_COUNT++;\n  }\n\n  var _proto = RxDatabaseBase.prototype;\n\n  /**\n   * removes all internal collection-info\n   * only use this if you have to upgrade from a major rxdb-version\n   * do NEVER use this to change the schema of a collection\n   */\n  _proto.dangerousRemoveCollectionInfo = function dangerousRemoveCollectionInfo() {\n    var _this = this;\n\n    return getAllDocuments(this.internalStore).then(function (docsRes) {\n      return Promise.all(docsRes.map(function (row) {\n        return {\n          _id: row.key,\n          _rev: row.value.rev\n        };\n      }).map(function (doc) {\n        return _this.internalStore.remove(doc._id, doc._rev);\n      }));\n    });\n  }\n  /**\n   * spawns a new pouch-instance\n   */\n  ;\n\n  _proto._spawnPouchDB = function _spawnPouchDB(collectionName, schemaVersion) {\n    var pouchSettings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.storage.createStorageInstance(this.name, collectionName, schemaVersion, {\n      pouchSettings: pouchSettings\n    });\n  }\n  /**\n   * This is the main handle-point for all change events\n   * ChangeEvents created by this instance go:\n   * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n   * ChangeEvents created by other instances go:\n   * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n   */\n  ;\n\n  _proto.$emit = function $emit(changeEvent) {\n    if (!changeEvent) return; // emit into own stream\n\n    this.subject.next(changeEvent); // write to socket if event was created by this instance\n\n    if (changeEvent.databaseToken === this.token) {\n      writeToSocket(this, changeEvent);\n    }\n  }\n  /**\n   * removes the collection-doc from this._collectionsPouch\n   */\n  ;\n\n  _proto.removeCollectionDoc = function removeCollectionDoc(name, schema) {\n    var _this2 = this;\n\n    var docId = _collectionNamePrimary(name, schema);\n\n    return this.internalStore.get(docId).then(function (doc) {\n      return _this2.lockedRun(function () {\n        return _this2.internalStore.remove(doc);\n      });\n    });\n  }\n  /**\n   * creates multiple RxCollections at once\n   * to be much faster by saving db txs and doing stuff in bulk-operations\n   * This function is not called often, but mostly in the critical path at the initial page load\n   * So it must be as fast as possible\n   */\n  ;\n\n  _proto.addCollections =\n  /*#__PURE__*/\n  function () {\n    var _addCollections = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(collectionCreators) {\n      var _this3 = this;\n\n      var pouch, result, internalDocByCollectionName, schemaHashByName, collections, bulkPutDocs, ret;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              pouch = this.internalStore; // get local management docs in bulk request\n\n              _context.next = 3;\n              return pouch.allDocs({\n                include_docs: true,\n                keys: Object.keys(collectionCreators).map(function (name) {\n                  return _collectionNamePrimary(name, collectionCreators[name].schema);\n                })\n              });\n\n            case 3:\n              result = _context.sent;\n              internalDocByCollectionName = {};\n              result.rows.forEach(function (row) {\n                if (!row.error) {\n                  internalDocByCollectionName[row.key] = row.doc;\n                }\n              });\n              schemaHashByName = {};\n              _context.next = 9;\n              return Promise.all(Object.entries(collectionCreators).map(function (_ref) {\n                var name = _ref[0],\n                    args = _ref[1];\n\n                var internalDoc = internalDocByCollectionName[_collectionNamePrimary(name, collectionCreators[name].schema)];\n\n                var useArgs = flatClone(args);\n                useArgs.name = name;\n                var schema = createRxSchema(args.schema);\n                schemaHashByName[name] = schema.hash;\n                useArgs.schema = schema;\n                useArgs.database = _this3; // TODO check if already exists and schema hash has changed\n                // collection already exists\n\n                if (_this3.collections[name]) {\n                  throw newRxError('DB3', {\n                    name: name\n                  });\n                } // collection already exists but has different schema\n\n\n                if (internalDoc && internalDoc.schemaHash !== schemaHashByName[name]) {\n                  throw newRxError('DB6', {\n                    name: name,\n                    previousSchemaHash: internalDoc.schemaHash,\n                    schemaHash: schemaHashByName[name]\n                  });\n                } // run hooks\n\n\n                var hookData = flatClone(args);\n                hookData.database = _this3;\n                hookData.name = name;\n                runPluginHooks('preCreateRxCollection', hookData);\n                return createRxCollection(useArgs, !!internalDoc);\n              }));\n\n            case 9:\n              collections = _context.sent;\n              bulkPutDocs = [];\n              ret = {};\n              collections.forEach(function (collection) {\n                var name = collection.name;\n                ret[name] = collection;\n\n                if (collection.schema.crypt && !_this3.password) {\n                  throw newRxError('DB7', {\n                    name: name\n                  });\n                } // add to bulk-docs list\n\n\n                if (!internalDocByCollectionName[name]) {\n                  bulkPutDocs.push({\n                    _id: _collectionNamePrimary(name, collectionCreators[name].schema),\n                    schemaHash: schemaHashByName[name],\n                    schema: collection.schema.normalized,\n                    version: collection.schema.version\n                  });\n                } // set as getter to the database\n\n\n                _this3.collections[name] = collection;\n\n                if (!_this3[name]) {\n                  Object.defineProperty(_this3, name, {\n                    get: function get() {\n                      return _this3.collections[name];\n                    }\n                  });\n                }\n              }); // make a single call to the pouchdb instance\n\n              if (!(bulkPutDocs.length > 0)) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 16;\n              return pouch.bulkDocs({\n                docs: bulkPutDocs\n              });\n\n            case 16:\n              return _context.abrupt(\"return\", ret);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function addCollections(_x) {\n      return _addCollections.apply(this, arguments);\n    }\n\n    return addCollections;\n  }()\n  /**\n   * create or fetch a collection\n   * @deprecated use addCollections() instead, it is faster and better typed\n   */\n  ;\n\n  _proto.collection = function collection(args) {\n    var _this$addCollections;\n\n    if (typeof args === 'string') {\n      return Promise.resolve(this.collections[args]);\n    } // collection() is deprecated, call new bulk-creation method\n\n\n    return this.addCollections((_this$addCollections = {}, _this$addCollections[args.name] = args, _this$addCollections)).then(function (colObject) {\n      return colObject[args.name];\n    });\n  }\n  /**\n   * delete all data of the collection and its previous versions\n   */\n  ;\n\n  _proto.removeCollection = function removeCollection(collectionName) {\n    var _this4 = this;\n\n    if (this.collections[collectionName]) this.collections[collectionName].destroy(); // remove schemas from internal db\n\n    return _removeAllOfCollection(this, collectionName) // get all relevant pouchdb-instances\n    .then(function (knownVersions) {\n      return knownVersions.map(function (v) {\n        return _this4._spawnPouchDB(collectionName, v);\n      });\n    }) // remove documents\n    .then(function (pouches) {\n      return Promise.all(pouches.map(function (pouch) {\n        return _this4.lockedRun(function () {\n          return pouch.destroy();\n        });\n      }));\n    }).then(function () {});\n  }\n  /**\n   * runs the given function between idleQueue-locking\n   */\n  ;\n\n  _proto.lockedRun = function lockedRun(fn) {\n    return this.idleQueue.wrapCall(fn);\n  };\n\n  _proto.requestIdlePromise = function requestIdlePromise() {\n    return this.idleQueue.requestIdlePromise();\n  }\n  /**\n   * Export database to a JSON friendly format.\n   * @param _decrypted\n   * When true, all encrypted values will be decrypted.\n   */\n  ;\n\n  _proto.dump = function dump() {\n    var _decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var _collections = arguments.length > 1 ? arguments[1] : undefined;\n\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * Import the parsed JSON export into the collection.\n   * @param _exportedJSON The previously exported data from the `<db>.dump()` method.\n   * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n   * since data could be encrypted.\n   */\n  ;\n\n  _proto.importDump = function importDump(_exportedJSON) {\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * spawn server\n   */\n  ;\n\n  _proto.server = function server(_options) {\n    throw pluginMissing('server');\n  };\n\n  _proto.leaderElector = function leaderElector() {\n    throw pluginMissing('leader-election');\n  };\n\n  _proto.isLeader = function isLeader() {\n    throw pluginMissing('leader-election');\n  }\n  /**\n   * returns a promise which resolves when the instance becomes leader\n   */\n  ;\n\n  _proto.waitForLeadership = function waitForLeadership() {\n    throw pluginMissing('leader-election');\n  }\n  /**\n   * destroys the database-instance and all collections\n   */\n  ;\n\n  _proto.destroy = function destroy() {\n    var _this5 = this;\n\n    if (this.destroyed) return Promise.resolve(false);\n    runPluginHooks('preDestroyRxDatabase', this);\n    DB_COUNT--;\n    this.destroyed = true;\n\n    if (this.broadcastChannel) {\n      /**\n       * The broadcast-channel gets closed lazy\n       * to ensure that all pending change-events\n       * get emitted\n       */\n      setTimeout(function () {\n        return _this5.broadcastChannel.close();\n      }, 1000);\n    }\n\n    this._subs.map(function (sub) {\n      return sub.unsubscribe();\n    }); // destroy all collections\n\n\n    return Promise.all(Object.keys(this.collections).map(function (key) {\n      return _this5.collections[key];\n    }).map(function (col) {\n      return col.destroy();\n    })) // remove combination from USED_COMBINATIONS-map\n    .then(function () {\n      return _removeUsedCombination(_this5.name, _this5.adapter);\n    }).then(function () {\n      return true;\n    });\n  }\n  /**\n   * deletes the database and its stored data\n   */\n  ;\n\n  _proto.remove = function remove() {\n    var _this6 = this;\n\n    return this.destroy().then(function () {\n      return removeRxDatabase(_this6.name, _this6.adapter);\n    });\n  };\n\n  _createClass(RxDatabaseBase, [{\n    key: \"$\",\n    get: function get() {\n      return this.observable$;\n    }\n  }]);\n\n  return RxDatabaseBase;\n}();\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\n\nfunction _isNameAdapterUsed(name, adapter) {\n  if (!USED_COMBINATIONS[name]) return false;\n  var used = false;\n  USED_COMBINATIONS[name].forEach(function (ad) {\n    if (ad === adapter) used = true;\n  });\n\n  if (used) {\n    throw newRxError('DB8', {\n      name: name,\n      adapter: adapter,\n      link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n    });\n  }\n}\n\nfunction _removeUsedCombination(name, adapter) {\n  if (!USED_COMBINATIONS[name]) return;\n  var index = USED_COMBINATIONS[name].indexOf(adapter);\n  USED_COMBINATIONS[name].splice(index, 1);\n}\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\n\n\nexport function _ensureStorageTokenExists(rxDatabase) {\n  return rxDatabase.internalStore.get(LOCAL_PREFIX + 'storageToken')[\"catch\"](function () {\n    // no doc exists -> insert\n    return rxDatabase.internalStore.put({\n      _id: LOCAL_PREFIX + 'storageToken',\n      value: randomToken(10)\n    })[\"catch\"](function () {}).then(function () {\n      return promiseWait(0);\n    });\n  }).then(function () {\n    return rxDatabase.internalStore.get(LOCAL_PREFIX + 'storageToken');\n  }).then(function (storageTokenDoc2) {\n    return storageTokenDoc2.value;\n  });\n}\n/**\n * writes the changeEvent to the broadcastChannel\n */\n\nexport function writeToSocket(rxDatabase, changeEvent) {\n  if (rxDatabase.multiInstance && !changeEvent.isIntern() && rxDatabase.broadcastChannel) {\n    var sendOverChannel = {\n      cE: changeEvent.toJSON(),\n      storageToken: rxDatabase.storageToken\n    };\n    return rxDatabase.broadcastChannel.postMessage(sendOverChannel).then(function () {\n      return true;\n    });\n  } else return Promise.resolve(false);\n}\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\n\nexport function _collectionNamePrimary(name, schema) {\n  return name + '-' + schema.version;\n}\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\n\nexport function _removeAllOfCollection(rxDatabase, collectionName) {\n  return rxDatabase.lockedRun(function () {\n    return getAllDocuments(rxDatabase.internalStore);\n  }).then(function (data) {\n    var relevantDocs = data.map(function (row) {\n      return row.doc;\n    }).filter(function (doc) {\n      var name = doc._id.split('-')[0];\n\n      return name === collectionName;\n    });\n    return Promise.all(relevantDocs.map(function (doc) {\n      return rxDatabase.lockedRun(function () {\n        return rxDatabase.internalStore.remove(doc);\n      });\n    })).then(function () {\n      return relevantDocs.map(function (doc) {\n        return doc.version;\n      });\n    });\n  });\n}\n\nfunction _prepareBroadcastChannel(rxDatabase) {\n  // broadcastChannel\n  rxDatabase.broadcastChannel = new BroadcastChannel('RxDB:' + rxDatabase.name + ':' + 'socket');\n  rxDatabase.broadcastChannel$ = new Subject();\n\n  rxDatabase.broadcastChannel.onmessage = function (msg) {\n    if (msg.storageToken !== rxDatabase.storageToken) return; // not same storage-state\n\n    if (msg.cE.databaseToken === rxDatabase.token) return; // same db\n\n    var changeEvent = new RxChangeEvent(msg.cE.operation, msg.cE.documentId, msg.cE.documentData, msg.cE.databaseToken, msg.cE.collectionName, msg.cE.isLocal, msg.cE.startTime, msg.cE.endTime, msg.cE.previousData);\n    rxDatabase.broadcastChannel$.next(changeEvent);\n  }; // TODO only subscribe when something is listening to the event-chain\n\n\n  rxDatabase._subs.push(rxDatabase.broadcastChannel$.subscribe(function (cE) {\n    rxDatabase.$emit(cE);\n  }));\n}\n/**\n * do the async things for this database\n */\n\n\nfunction prepare(rxDatabase) {\n  return rxDatabase.storage.createInternalStorageInstance(rxDatabase.name).then(function (internalStore) {\n    rxDatabase.internalStore = internalStore;\n    return _ensureStorageTokenExists(rxDatabase);\n  }).then(function (storageToken) {\n    rxDatabase.storageToken = storageToken;\n\n    if (rxDatabase.multiInstance) {\n      _prepareBroadcastChannel(rxDatabase);\n    }\n  });\n}\n\nexport function createRxDatabase(_ref2) {\n  var name = _ref2.name,\n      adapter = _ref2.adapter,\n      password = _ref2.password,\n      _ref2$multiInstance = _ref2.multiInstance,\n      multiInstance = _ref2$multiInstance === void 0 ? true : _ref2$multiInstance,\n      _ref2$eventReduce = _ref2.eventReduce,\n      eventReduce = _ref2$eventReduce === void 0 ? false : _ref2$eventReduce,\n      _ref2$ignoreDuplicate = _ref2.ignoreDuplicate,\n      ignoreDuplicate = _ref2$ignoreDuplicate === void 0 ? false : _ref2$ignoreDuplicate,\n      _ref2$options = _ref2.options,\n      options = _ref2$options === void 0 ? {} : _ref2$options,\n      _ref2$pouchSettings = _ref2.pouchSettings,\n      pouchSettings = _ref2$pouchSettings === void 0 ? {} : _ref2$pouchSettings;\n  runPluginHooks('preCreateRxDatabase', {\n    name: name,\n    adapter: adapter,\n    password: password,\n    multiInstance: multiInstance,\n    eventReduce: eventReduce,\n    ignoreDuplicate: ignoreDuplicate,\n    options: options,\n    pouchSettings: pouchSettings\n  }); // check if pouchdb-adapter\n\n  if (typeof adapter === 'string') {\n    // TODO make a function hasAdapter()\n    if (!PouchDB.adapters || !PouchDB.adapters[adapter]) {\n      throw newRxError('DB9', {\n        adapter: adapter\n      });\n    }\n  } else {\n    isLevelDown(adapter);\n\n    if (!PouchDB.adapters || !PouchDB.adapters.leveldb) {\n      throw newRxError('DB10', {\n        adapter: adapter\n      });\n    }\n  }\n\n  if (password) {\n    overwritable.validatePassword(password);\n  } // check if combination already used\n\n\n  if (!ignoreDuplicate) {\n    _isNameAdapterUsed(name, adapter);\n  } // add to used_map\n\n\n  if (!USED_COMBINATIONS[name]) {\n    USED_COMBINATIONS[name] = [];\n  }\n\n  USED_COMBINATIONS[name].push(adapter);\n  var rxDatabase = new RxDatabaseBase(name, adapter, password, multiInstance, eventReduce, options, pouchSettings);\n  return prepare(rxDatabase).then(function () {\n    return runAsyncPluginHooks('createRxDatabase', rxDatabase);\n  }).then(function () {\n    return rxDatabase;\n  });\n}\n/**\n * removes the database and all its known data\n */\n\nexport function removeRxDatabase(databaseName, adapter) {\n  var storage = getRxStoragePouchDb(adapter);\n  return storage.createInternalStorageInstance(databaseName).then(function (internalStore) {\n    return getAllDocuments(internalStore).then(function (docs) {\n      // remove collections storages\n      return Promise.all(docs.map(function (colDoc) {\n        return colDoc.id;\n      }).map(function (id) {\n        var split = id.split('-');\n        var name = split[0];\n        var version = parseInt(split[1], 10);\n        var instance = storage.createStorageInstance(databaseName, name, version);\n        return instance.destroy();\n      }));\n    }) // remove internals\n    .then(function () {\n      return deleteStorageInstance(internalStore);\n    });\n  });\n}\n/**\n * check if the given adapter can be used\n */\n\nexport function checkAdapter(adapter) {\n  return overwritable.checkAdapter(adapter);\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxDatabaseBase;\n}\nexport function dbCount() {\n  return DB_COUNT;\n}\nexport default {\n  createRxDatabase: createRxDatabase,\n  removeRxDatabase: removeRxDatabase,\n  checkAdapter: checkAdapter,\n  isInstanceOf: isInstanceOf,\n  RxDatabaseBase: RxDatabaseBase,\n  dbCount: dbCount\n};\n//# sourceMappingURL=rx-database.js.map"]},"metadata":{},"sourceType":"module"}