{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Branches } from './branches';\nimport { Parents } from './parents';\nimport { AbstractNode } from './abstract-node';\n\nvar InternalNode =\n/** @class */\nfunction (_super) {\n  __extends(InternalNode, _super);\n\n  function InternalNode(level, rootNode, parent) {\n    var _this = _super.call(this, level, rootNode, 'InternalNode') || this;\n\n    _this.branches = new Branches(_this);\n    _this.parents = new Parents(_this);\n\n    _this.parents.add(parent);\n\n    return _this;\n  }\n  /**\n   * by the reduction-rule of bdd,\n   * if both branches are equal,\n   * we can remove this node from the bdd\n   */\n\n\n  InternalNode.prototype.applyReductionRule = function () {\n    // console.log('applyReductionRule() ' + this.id);\n    var _this = this;\n\n    if (this.branches.hasEqualBranches()) {\n      this.ensureNotDeleted('applyReductionRule');\n      var keepBranch_1 = this.branches.getBranch('0'); // move own parents to keepBranch\n\n      var ownParents = this.parents.getAll();\n      ownParents.forEach(function (parent) {\n        // console.log('ownParent: ' + parent.id);\n        var branchKey = parent.branches.getKeyOfNode(_this);\n        parent.branches.setBranch(branchKey, keepBranch_1); // remove parents from own list\n        // this will auto-remove the connection to the other '1'-branch\n\n        _this.parents.remove(parent); // if parent has now two equal branches,\n        // we have to apply the reduction again\n        // to ensure we end in a valid state\n\n\n        if (parent.branches.areBranchesStrictEqual() && parent.isInternalNode()) {\n          parent.applyReductionRule();\n        }\n      });\n      return true;\n    }\n\n    return false;\n  };\n\n  return InternalNode;\n}(AbstractNode);\n\nexport { InternalNode };","map":{"version":3,"sources":["../../src/internal-node.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,OAAT,QAAwB,WAAxB;AAEA,SAAS,YAAT,QAA6B,iBAA7B;;AAGA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAI9B,WAAA,YAAA,CACI,KADJ,EAEI,QAFJ,EAGI,MAHJ,EAGuB;AAHvB,QAAA,KAAA,GAKI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,EAAa,QAAb,EAAuB,cAAvB,KAAsC,IAL1C;;AAHO,IAAA,KAAA,CAAA,QAAA,GAAqB,IAAI,QAAJ,CAAa,KAAb,CAArB;AACA,IAAA,KAAA,CAAA,OAAA,GAAU,IAAI,OAAJ,CAAY,KAAZ,CAAV;;AAQH,IAAA,KAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,MAAjB;;;AACH;AAID;;;;;;;AAKA,EAAA,YAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AAEI;AAFJ,QAAA,KAAA,GAAA,IAAA;;AAII,QAAI,KAAK,QAAL,CAAc,gBAAd,EAAJ,EAAsC;AAClC,WAAK,gBAAL,CAAsB,oBAAtB;AACA,UAAM,YAAU,GAAgB,KAAK,QAAL,CAAc,SAAd,CAAwB,GAAxB,CAAhC,CAFkC,CAIlC;;AACA,UAAM,UAAU,GAAG,KAAK,OAAL,CAAa,MAAb,EAAnB;AACA,MAAA,UAAU,CAAC,OAAX,CAAmB,UAAA,MAAA,EAAM;AACrB;AACA,YAAM,SAAS,GAAG,MAAM,CAAC,QAAP,CAAgB,YAAhB,CAA6B,KAA7B,CAAlB;AACA,QAAA,MAAM,CAAC,QAAP,CAAgB,SAAhB,CAA0B,SAA1B,EAAqC,YAArC,EAHqB,CAKrB;AACA;;AACA,QAAA,KAAI,CAAC,OAAL,CAAa,MAAb,CAAoB,MAApB,EAPqB,CASrB;AACA;AACA;;;AACA,YAAI,MAAM,CAAC,QAAP,CAAgB,sBAAhB,MAA4C,MAAM,CAAC,cAAP,EAAhD,EAAyE;AACpE,UAAA,MAAuB,CAAC,kBAAxB;AACJ;AACJ,OAfD;AAiBA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GA9BD;;AAgCJ,SAAA,YAAA;AAAC,CApDD,CAAkC,YAAlC,CAAA","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Branches } from './branches';\nimport { Parents } from './parents';\nimport { AbstractNode } from './abstract-node';\nvar InternalNode = /** @class */ (function (_super) {\n    __extends(InternalNode, _super);\n    function InternalNode(level, rootNode, parent) {\n        var _this = _super.call(this, level, rootNode, 'InternalNode') || this;\n        _this.branches = new Branches(_this);\n        _this.parents = new Parents(_this);\n        _this.parents.add(parent);\n        return _this;\n    }\n    /**\n     * by the reduction-rule of bdd,\n     * if both branches are equal,\n     * we can remove this node from the bdd\n     */\n    InternalNode.prototype.applyReductionRule = function () {\n        // console.log('applyReductionRule() ' + this.id);\n        var _this = this;\n        if (this.branches.hasEqualBranches()) {\n            this.ensureNotDeleted('applyReductionRule');\n            var keepBranch_1 = this.branches.getBranch('0');\n            // move own parents to keepBranch\n            var ownParents = this.parents.getAll();\n            ownParents.forEach(function (parent) {\n                // console.log('ownParent: ' + parent.id);\n                var branchKey = parent.branches.getKeyOfNode(_this);\n                parent.branches.setBranch(branchKey, keepBranch_1);\n                // remove parents from own list\n                // this will auto-remove the connection to the other '1'-branch\n                _this.parents.remove(parent);\n                // if parent has now two equal branches,\n                // we have to apply the reduction again\n                // to ensure we end in a valid state\n                if (parent.branches.areBranchesStrictEqual() && parent.isInternalNode()) {\n                    parent.applyReductionRule();\n                }\n            });\n            return true;\n        }\n        return false;\n    };\n    return InternalNode;\n}(AbstractNode));\nexport { InternalNode };\n//# sourceMappingURL=internal-node.js.map"]},"metadata":{},"sourceType":"module"}