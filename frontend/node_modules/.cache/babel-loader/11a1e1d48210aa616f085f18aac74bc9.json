{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport { filter } from 'rxjs/operators';\nimport { ucfirst, nextTick, flatClone, promiseSeries, pluginMissing } from './util';\nimport { validateCouchDBString } from './pouch-db';\nimport { _handleToPouch as _handleToPouch2, _handleFromPouch as _handleFromPouch2, fillObjectDataBeforeInsert } from './rx-collection-helper';\nimport { createRxQuery } from './rx-query';\nimport { isInstanceOf as isInstanceOfRxSchema, createRxSchema } from './rx-schema';\nimport { createChangeEvent } from './rx-change-event';\nimport { newRxError, newRxTypeError } from './rx-error';\nimport { mustMigrate, createDataMigrator } from './data-migrator';\nimport Crypter from './crypter';\nimport { createDocCache } from './doc-cache';\nimport { createQueryCache } from './query-cache';\nimport { createChangeEventBuffer } from './change-event-buffer';\nimport overwritable from './overwritable';\nimport { runPluginHooks } from './hooks';\nimport { createWithConstructor as createRxDocumentWithConstructor, isInstanceOf as isRxDocument } from './rx-document';\nimport { createRxDocument, getRxDocumentConstructor } from './rx-document-prototype-merge';\nvar HOOKS_WHEN = ['pre', 'post'];\nvar HOOKS_KEYS = ['insert', 'save', 'remove', 'create'];\nvar hooksApplied = false;\nexport var RxCollectionBase =\n/*#__PURE__*/\nfunction () {\n  function RxCollectionBase(database, name, schema) {\n    var pouchSettings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var migrationStrategies = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    var methods = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var attachments = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n    var options = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n    var statics = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n    this._isInMemory = false;\n    this.destroyed = false;\n    this._atomicUpsertQueues = new Map();\n    this.synced = false;\n    this.hooks = {};\n    this._subs = [];\n    this._repStates = [];\n    this.pouch = {};\n    this._docCache = createDocCache();\n    this._queryCache = createQueryCache();\n    this._dataMigrator = {};\n    this._crypter = {};\n    this._changeEventBuffer = {};\n    this.database = database;\n    this.name = name;\n    this.schema = schema;\n    this.pouchSettings = pouchSettings;\n    this.migrationStrategies = migrationStrategies;\n    this.methods = methods;\n    this.attachments = attachments;\n    this.options = options;\n    this.statics = statics;\n\n    _applyHookFunctions(this);\n  }\n  /**\n   * returns observable\n   */\n\n\n  var _proto = RxCollectionBase.prototype;\n\n  _proto.prepare = function prepare() {\n    var _this = this;\n\n    this.pouch = this.database._spawnPouchDB(this.name, this.schema.version, this.pouchSettings);\n\n    if (this.schema.doKeyCompression()) {\n      this._keyCompressor = overwritable.createKeyCompressor(this.schema);\n    } // we trigger the non-blocking things first and await them later so we can do stuff in the mean time\n\n\n    var spawnedPouchPromise = this.pouch.info(); // resolved when the pouchdb is useable\n\n    var createIndexesPromise = _prepareCreateIndexes(this, spawnedPouchPromise);\n\n    this._dataMigrator = createDataMigrator(this, this.migrationStrategies);\n    this._crypter = Crypter.create(this.database.password, this.schema);\n    this._observable$ = this.database.$.pipe(filter(function (event) {\n      return event.data.col === _this.name;\n    }));\n    this._changeEventBuffer = createChangeEventBuffer(this);\n\n    this._subs.push(this._observable$.pipe(filter(function (cE) {\n      return !cE.data.isLocal;\n    })).subscribe(function (cE) {\n      // when data changes, send it to RxDocument in docCache\n      var doc = _this._docCache.get(cE.data.doc);\n\n      if (doc) doc._handleChangeEvent(cE);\n    }));\n\n    return Promise.all([spawnedPouchPromise, createIndexesPromise]);\n  }\n  /**\n   * checks if a migration is needed\n   */\n  ;\n\n  _proto.migrationNeeded = function migrationNeeded() {\n    return mustMigrate(this._dataMigrator);\n  }\n  /**\n   * trigger migration manually\n   */\n  ;\n\n  _proto.migrate = function migrate() {\n    var batchSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._dataMigrator.migrate(batchSize);\n  }\n  /**\n   * does the same thing as .migrate() but returns promise\n   * @return resolves when finished\n   */\n  ;\n\n  _proto.migratePromise = function migratePromise() {\n    var batchSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._dataMigrator.migratePromise(batchSize);\n  }\n  /**\n   * wrappers for Pouch.put/get to handle keycompression etc\n   */\n  ;\n\n  _proto._handleToPouch = function _handleToPouch(docData) {\n    return _handleToPouch2(this, docData);\n  };\n\n  _proto._handleFromPouch = function _handleFromPouch(docData) {\n    var noDecrypt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return _handleFromPouch2(this, docData, noDecrypt);\n  }\n  /**\n   * every write on the pouchdb\n   * is tunneld throught this function\n   */\n  ;\n\n  _proto._pouchPut = function _pouchPut(obj) {\n    var _this2 = this;\n\n    var overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    obj = this._handleToPouch(obj);\n    return this.database.lockedRun(function () {\n      return _this2.pouch.put(obj);\n    })[\"catch\"](function (err) {\n      if (overwrite && err.status === 409) {\n        return _this2.database.lockedRun(function () {\n          return _this2.pouch.get(obj._id);\n        }).then(function (exist) {\n          obj._rev = exist._rev;\n          return _this2.database.lockedRun(function () {\n            return _this2.pouch.put(obj);\n          });\n        });\n      } else if (err.status === 409) {\n        throw newRxError('COL19', {\n          id: obj._id,\n          pouchDbError: err,\n          data: obj\n        });\n      } else throw err;\n    });\n  }\n  /**\n   * get document from pouchdb by its _id\n   */\n  ;\n\n  _proto._pouchGet = function _pouchGet(key) {\n    var _this3 = this;\n\n    return this.pouch.get(key).then(function (doc) {\n      return _this3._handleFromPouch(doc);\n    });\n  }\n  /**\n   * wrapps pouch-find\n   */\n  ;\n\n  _proto._pouchFind = function _pouchFind(rxQuery, limit) {\n    var _this4 = this;\n\n    var noDecrypt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var compressedQueryJSON = rxQuery.keyCompress();\n    if (limit) compressedQueryJSON['limit'] = limit;\n    return this.database.lockedRun(function () {\n      return _this4.pouch.find(compressedQueryJSON);\n    }).then(function (docsCompressed) {\n      var docs = docsCompressed.docs.map(function (doc) {\n        return _this4._handleFromPouch(doc, noDecrypt);\n      });\n      return docs;\n    });\n  };\n\n  _proto.$emit = function $emit(changeEvent) {\n    return this.database.$emit(changeEvent);\n  };\n\n  _proto.insert = function insert(json) {\n    var _this5 = this; // inserting a temporary-document\n\n\n    var tempDoc = null;\n\n    if (isRxDocument(json)) {\n      tempDoc = json;\n\n      if (!tempDoc._isTemporary) {\n        throw newRxError('COL1', {\n          data: json\n        });\n      }\n\n      json = tempDoc.toJSON();\n    }\n\n    var useJson = fillObjectDataBeforeInsert(this, json);\n    var newDoc = tempDoc;\n    return this._runHooks('pre', 'insert', useJson).then(function () {\n      _this5.schema.validate(useJson);\n\n      return _this5._pouchPut(useJson);\n    }).then(function (insertResult) {\n      useJson[_this5.schema.primaryPath] = insertResult.id;\n      useJson._rev = insertResult.rev;\n\n      if (tempDoc) {\n        tempDoc._dataSync$.next(useJson);\n      } else newDoc = createRxDocument(_this5, useJson);\n\n      return _this5._runHooks('post', 'insert', useJson, newDoc);\n    }).then(function () {\n      // event\n      var emitEvent = createChangeEvent('INSERT', _this5.database, _this5, newDoc, useJson);\n\n      _this5.$emit(emitEvent);\n\n      return newDoc;\n    });\n  };\n\n  _proto.bulkInsert = function bulkInsert(docsData) {\n    var _this6 = this;\n\n    var useDocs = docsData.map(function (docData) {\n      var useDocData = fillObjectDataBeforeInsert(_this6, docData);\n      return useDocData;\n    });\n    return Promise.all(useDocs.map(function (doc) {\n      return _this6._runHooks('pre', 'insert', doc).then(function () {\n        _this6.schema.validate(doc);\n\n        return doc;\n      });\n    })).then(function (docs) {\n      var insertDocs = docs.map(function (d) {\n        return _this6._handleToPouch(d);\n      });\n      var docsMap = new Map();\n      docs.forEach(function (d) {\n        docsMap.set(d[_this6.schema.primaryPath], d);\n      });\n      return _this6.database.lockedRun(function () {\n        return _this6.pouch.bulkDocs(insertDocs).then(function (results) {\n          var okResults = results.filter(function (r) {\n            return r.ok;\n          }); // create documents\n\n          var rxDocuments = okResults.map(function (r) {\n            var docData = docsMap.get(r.id);\n            docData._rev = r.rev;\n            var doc = createRxDocument(_this6, docData);\n            return doc;\n          }); // emit events\n\n          rxDocuments.forEach(function (doc) {\n            var emitEvent = createChangeEvent('INSERT', _this6.database, _this6, doc, docsMap.get(doc.primary));\n\n            _this6.$emit(emitEvent);\n          });\n          return {\n            success: rxDocuments,\n            error: results.filter(function (r) {\n              return !r.ok;\n            })\n          };\n        });\n      });\n    });\n  }\n  /**\n   * same as insert but overwrites existing document with same primary\n   */\n  ;\n\n  _proto.upsert = function upsert(json) {\n    var _this7 = this;\n\n    var useJson = flatClone(json);\n    var primary = useJson[this.schema.primaryPath];\n\n    if (!primary) {\n      throw newRxError('COL3', {\n        primaryPath: this.schema.primaryPath,\n        data: useJson\n      });\n    }\n\n    return this.findOne(primary).exec().then(function (existing) {\n      if (existing) {\n        useJson._rev = existing['_rev'];\n        return existing.atomicUpdate(function () {\n          return useJson;\n        }).then(function () {\n          return existing;\n        });\n      } else {\n        return _this7.insert(json);\n      }\n    });\n  }\n  /**\n   * upserts to a RxDocument, uses atomicUpdate if document already exists\n   */\n  ;\n\n  _proto.atomicUpsert = function atomicUpsert(json) {\n    var _this8 = this;\n\n    var primary = json[this.schema.primaryPath];\n\n    if (!primary) {\n      throw newRxError('COL4', {\n        data: json\n      });\n    } // ensure that it wont try 2 parallel runs\n\n\n    var queue;\n\n    if (!this._atomicUpsertQueues.has(primary)) {\n      queue = Promise.resolve();\n    } else {\n      queue = this._atomicUpsertQueues.get(primary);\n    }\n\n    queue = queue.then(function () {\n      return _atomicUpsertEnsureRxDocumentExists(_this8, primary, json);\n    }).then(function (wasInserted) {\n      if (!wasInserted.inserted) {\n        return _atomicUpsertUpdate(wasInserted.doc, json).then(function () {\n          return nextTick();\n        }) // tick here so the event can propagate\n        .then(function () {\n          return wasInserted.doc;\n        });\n      } else return wasInserted.doc;\n    });\n\n    this._atomicUpsertQueues.set(primary, queue);\n\n    return queue;\n  }\n  /**\n   * takes a mongoDB-query-object and returns the documents\n   */\n  ;\n\n  _proto.find = function find(queryObj) {\n    if (typeof queryObj === 'string') {\n      throw newRxError('COL5', {\n        queryObj: queryObj\n      });\n    }\n\n    var query = createRxQuery('find', queryObj, this);\n    return query;\n  };\n\n  _proto.findOne = function findOne(queryObj) {\n    var query;\n\n    if (typeof queryObj === 'string') {\n      query = createRxQuery('findOne', {\n        _id: queryObj\n      }, this);\n    } else query = createRxQuery('findOne', queryObj, this);\n\n    if (typeof queryObj === 'number' || Array.isArray(queryObj)) {\n      throw newRxTypeError('COL6', {\n        queryObj: queryObj\n      });\n    }\n\n    return query;\n  }\n  /**\n   * Export collection to a JSON friendly format.\n   * @param _decrypted\n   * When true, all encrypted values will be decrypted.\n   * When false or omitted and an interface or type is loaded in this collection,\n   * all base properties of the type are typed as `any` since data could be encrypted.\n   */\n  ;\n\n  _proto.dump = function dump() {\n    var _decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * Import the parsed JSON export into the collection.\n   * @param _exportedJSON The previously exported data from the `<collection>.dump()` method.\n   */\n  ;\n\n  _proto.importDump = function importDump(_exportedJSON) {\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * waits for external changes to the database\n   * and ensures they are emitted to the internal RxChangeEvent-Stream\n   * TODO this can be removed by listening to the pull-change-events of the RxReplicationState\n   */\n  ;\n\n  _proto.watchForChanges = function watchForChanges() {\n    throw pluginMissing('watch-for-changes');\n  }\n  /**\n   * sync with another database\n   */\n  ;\n\n  _proto.sync = function sync(_syncOptions) {\n    throw pluginMissing('replication');\n  }\n  /**\n   * sync with a GraphQL endpoint\n   */\n  ;\n\n  _proto.syncGraphQL = function syncGraphQL(options) {\n    throw pluginMissing('replication-graphql');\n  }\n  /**\n   * Create a replicated in-memory-collection\n   */\n  ;\n\n  _proto.inMemory = function inMemory() {\n    throw pluginMissing('in-memory');\n  }\n  /**\n   * HOOKS\n   */\n  ;\n\n  _proto.addHook = function addHook(when, key, fun) {\n    var parallel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    if (typeof fun !== 'function') {\n      throw newRxTypeError('COL7', {\n        key: key,\n        when: when\n      });\n    }\n\n    if (!HOOKS_WHEN.includes(when)) {\n      throw newRxTypeError('COL8', {\n        key: key,\n        when: when\n      });\n    }\n\n    if (!HOOKS_KEYS.includes(key)) {\n      throw newRxError('COL9', {\n        key: key\n      });\n    }\n\n    if (when === 'post' && key === 'create' && parallel === true) {\n      throw newRxError('COL10', {\n        when: when,\n        key: key,\n        parallel: parallel\n      });\n    } // bind this-scope to hook-function\n\n\n    var boundFun = fun.bind(this);\n    var runName = parallel ? 'parallel' : 'series';\n    this.hooks[key] = this.hooks[key] || {};\n    this.hooks[key][when] = this.hooks[key][when] || {\n      series: [],\n      parallel: []\n    };\n    this.hooks[key][when][runName].push(boundFun);\n  };\n\n  _proto.getHooks = function getHooks(when, key) {\n    try {\n      return this.hooks[key][when];\n    } catch (e) {\n      return {\n        series: [],\n        parallel: []\n      };\n    }\n  };\n\n  _proto._runHooks = function _runHooks(when, key, data, instance) {\n    var hooks = this.getHooks(when, key);\n    if (!hooks) return Promise.resolve(); // run parallel: false\n\n    var tasks = hooks.series.map(function (hook) {\n      return function () {\n        return hook(data, instance);\n      };\n    });\n    return promiseSeries(tasks) // run parallel: true\n    .then(function () {\n      return Promise.all(hooks.parallel.map(function (hook) {\n        return hook(data, instance);\n      }));\n    });\n  }\n  /**\n   * does the same as ._runHooks() but with non-async-functions\n   */\n  ;\n\n  _proto._runHooksSync = function _runHooksSync(when, key, data, instance) {\n    var hooks = this.getHooks(when, key);\n    if (!hooks) return;\n    hooks.series.forEach(function (hook) {\n      return hook(data, instance);\n    });\n  }\n  /**\n   * creates a temporaryDocument which can be saved later\n   */\n  ;\n\n  _proto.newDocument = function newDocument() {\n    var docData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    docData = this.schema.fillObjectWithDefaults(docData);\n    var doc = createRxDocumentWithConstructor(getRxDocumentConstructor(this), this, docData);\n    doc._isTemporary = true;\n\n    this._runHooksSync('post', 'create', docData, doc);\n\n    return doc;\n  };\n\n  _proto.destroy = function destroy() {\n    if (this.destroyed) return Promise.resolve(false);\n\n    if (this._onDestroyCall) {\n      this._onDestroyCall();\n    }\n\n    this._subs.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n\n    if (this._changeEventBuffer) {\n      this._changeEventBuffer.destroy();\n    }\n\n    this._queryCache.destroy();\n\n    this._repStates.forEach(function (sync) {\n      return sync.cancel();\n    });\n\n    delete this.database.collections[this.name];\n    this.destroyed = true;\n    return Promise.resolve(true);\n  }\n  /**\n   * remove all data\n   */\n  ;\n\n  _proto.remove = function remove() {\n    return this.database.removeCollection(this.name);\n  };\n\n  _createClass(RxCollectionBase, [{\n    key: \"$\",\n    get: function get() {\n      return this._observable$;\n    }\n  }, {\n    key: \"insert$\",\n    get: function get() {\n      return this.$.pipe(filter(function (cE) {\n        return cE.data.op === 'INSERT';\n      }));\n    }\n  }, {\n    key: \"update$\",\n    get: function get() {\n      return this.$.pipe(filter(function (cE) {\n        return cE.data.op === 'UPDATE';\n      }));\n    }\n  }, {\n    key: \"remove$\",\n    get: function get() {\n      return this.$.pipe(filter(function (cE) {\n        return cE.data.op === 'REMOVE';\n      }));\n    }\n  }, {\n    key: \"docChanges$\",\n    get: function get() {\n      if (!this.__docChanges$) {\n        this.__docChanges$ = this.$.pipe(filter(function (cEvent) {\n          return ['INSERT', 'UPDATE', 'REMOVE'].includes(cEvent.data.op);\n        }));\n      }\n\n      return this.__docChanges$;\n    }\n  }, {\n    key: \"onDestroy\",\n    get: function get() {\n      var _this9 = this;\n\n      if (!this._onDestroy) this._onDestroy = new Promise(function (res) {\n        return _this9._onDestroyCall = res;\n      });\n      return this._onDestroy;\n    }\n  }]);\n\n  return RxCollectionBase;\n}();\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\n\nfunction _applyHookFunctions(collection) {\n  if (hooksApplied) return; // already run\n\n  hooksApplied = true;\n  var colProto = Object.getPrototypeOf(collection);\n  HOOKS_KEYS.forEach(function (key) {\n    HOOKS_WHEN.map(function (when) {\n      var fnName = when + ucfirst(key);\n\n      colProto[fnName] = function (fun, parallel) {\n        return this.addHook(when, key, fun, parallel);\n      };\n    });\n  });\n}\n/**\n * returns all possible properties of a RxCollection-instance\n */\n\n\nvar _properties = null;\nexport function properties() {\n  if (!_properties) {\n    var pseudoInstance = new RxCollectionBase();\n    var ownProperties = Object.getOwnPropertyNames(pseudoInstance);\n    var prototypeProperties = Object.getOwnPropertyNames(Object.getPrototypeOf(pseudoInstance));\n    _properties = [].concat(ownProperties, prototypeProperties);\n  }\n\n  return _properties;\n}\n\nfunction _atomicUpsertUpdate(doc, json) {\n  return doc.atomicUpdate(function (innerDoc) {\n    json._rev = innerDoc._rev;\n    innerDoc._data = json;\n    return innerDoc._data;\n  }).then(function () {\n    return doc;\n  });\n}\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\n\n\nfunction _atomicUpsertEnsureRxDocumentExists(rxCollection, primary, json) {\n  return rxCollection.findOne(primary).exec().then(function (doc) {\n    if (!doc) {\n      return rxCollection.insert(json).then(function (newDoc) {\n        return {\n          doc: newDoc,\n          inserted: true\n        };\n      });\n    } else {\n      return {\n        doc: doc,\n        inserted: false\n      };\n    }\n  });\n}\n/**\n * creates the indexes in the pouchdb\n */\n\n\nfunction _prepareCreateIndexes(rxCollection, spawnedPouchPromise) {\n  return Promise.all(rxCollection.schema.indexes.map(function (indexAr) {\n    var compressedIdx = indexAr.map(function (key) {\n      if (!rxCollection.schema.doKeyCompression()) return key;else return rxCollection._keyCompressor.transformKey('', '', key.split('.'));\n    });\n    return spawnedPouchPromise.then(function () {\n      return rxCollection.pouch.createIndex({\n        index: {\n          fields: compressedIdx\n        }\n      });\n    });\n  }));\n}\n/**\n * creates and prepares a new collection\n */\n\n\nexport function create(_ref) {\n  var database = _ref.database,\n      name = _ref.name,\n      schema = _ref.schema,\n      _ref$pouchSettings = _ref.pouchSettings,\n      pouchSettings = _ref$pouchSettings === void 0 ? {} : _ref$pouchSettings,\n      _ref$migrationStrateg = _ref.migrationStrategies,\n      migrationStrategies = _ref$migrationStrateg === void 0 ? {} : _ref$migrationStrateg,\n      _ref$autoMigrate = _ref.autoMigrate,\n      autoMigrate = _ref$autoMigrate === void 0 ? true : _ref$autoMigrate,\n      _ref$statics = _ref.statics,\n      statics = _ref$statics === void 0 ? {} : _ref$statics,\n      _ref$methods = _ref.methods,\n      methods = _ref$methods === void 0 ? {} : _ref$methods,\n      _ref$attachments = _ref.attachments,\n      attachments = _ref$attachments === void 0 ? {} : _ref$attachments,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n  validateCouchDBString(name); // ensure it is a schema-object\n\n  if (!isInstanceOfRxSchema(schema)) schema = createRxSchema(schema);\n  Object.keys(methods).filter(function (funName) {\n    return schema.topLevelFields.includes(funName);\n  }).forEach(function (funName) {\n    throw newRxError('COL18', {\n      funName: funName\n    });\n  });\n  var collection = new RxCollectionBase(database, name, schema, pouchSettings, migrationStrategies, methods, attachments, options, statics);\n  return collection.prepare().then(function () {\n    // ORM add statics\n    Object.entries(statics).forEach(function (_ref2) {\n      var funName = _ref2[0],\n          fun = _ref2[1];\n      Object.defineProperty(collection, funName, {\n        get: function get() {\n          return fun.bind(collection);\n        }\n      });\n    });\n    var ret = Promise.resolve();\n    if (autoMigrate) ret = collection.migratePromise();\n    return ret;\n  }).then(function () {\n    runPluginHooks('createRxCollection', collection);\n    return collection;\n  });\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxCollectionBase;\n}\nexport default {\n  create: create,\n  properties: properties,\n  isInstanceOf: isInstanceOf,\n  RxCollectionBase: RxCollectionBase\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/rx-collection.js"],"names":["_createClass","filter","ucfirst","nextTick","flatClone","promiseSeries","pluginMissing","validateCouchDBString","_handleToPouch","_handleToPouch2","_handleFromPouch","_handleFromPouch2","fillObjectDataBeforeInsert","createRxQuery","isInstanceOf","isInstanceOfRxSchema","createRxSchema","createChangeEvent","newRxError","newRxTypeError","mustMigrate","createDataMigrator","Crypter","createDocCache","createQueryCache","createChangeEventBuffer","overwritable","runPluginHooks","createWithConstructor","createRxDocumentWithConstructor","isRxDocument","createRxDocument","getRxDocumentConstructor","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","pouchSettings","arguments","length","undefined","migrationStrategies","methods","attachments","options","statics","_isInMemory","destroyed","_atomicUpsertQueues","Map","synced","hooks","_subs","_repStates","pouch","_docCache","_queryCache","_dataMigrator","_crypter","_changeEventBuffer","_applyHookFunctions","_proto","prototype","prepare","_this","_spawnPouchDB","version","doKeyCompression","_keyCompressor","createKeyCompressor","spawnedPouchPromise","info","createIndexesPromise","_prepareCreateIndexes","create","password","_observable$","$","pipe","event","data","col","push","cE","isLocal","subscribe","doc","get","_handleChangeEvent","Promise","all","migrationNeeded","migrate","batchSize","migratePromise","docData","noDecrypt","_pouchPut","obj","_this2","overwrite","lockedRun","put","err","status","_id","then","exist","_rev","id","pouchDbError","_pouchGet","key","_this3","_pouchFind","rxQuery","limit","_this4","compressedQueryJSON","keyCompress","find","docsCompressed","docs","map","$emit","changeEvent","insert","json","_this5","tempDoc","_isTemporary","toJSON","useJson","newDoc","_runHooks","validate","insertResult","primaryPath","rev","_dataSync$","next","emitEvent","bulkInsert","docsData","_this6","useDocs","useDocData","insertDocs","d","docsMap","forEach","set","bulkDocs","results","okResults","r","ok","rxDocuments","primary","success","error","upsert","_this7","findOne","exec","existing","atomicUpdate","atomicUpsert","_this8","queue","has","resolve","_atomicUpsertEnsureRxDocumentExists","wasInserted","inserted","_atomicUpsertUpdate","queryObj","query","Array","isArray","dump","_decrypted","importDump","_exportedJSON","watchForChanges","sync","_syncOptions","syncGraphQL","inMemory","addHook","when","fun","parallel","includes","boundFun","bind","runName","series","getHooks","e","instance","tasks","hook","_runHooksSync","newDocument","fillObjectWithDefaults","destroy","_onDestroyCall","sub","unsubscribe","cancel","collections","remove","removeCollection","op","__docChanges$","cEvent","_this9","_onDestroy","res","collection","colProto","Object","getPrototypeOf","fnName","_properties","properties","pseudoInstance","ownProperties","getOwnPropertyNames","prototypeProperties","concat","innerDoc","_data","rxCollection","indexes","indexAr","compressedIdx","transformKey","split","createIndex","index","fields","_ref","_ref$pouchSettings","_ref$migrationStrateg","_ref$autoMigrate","autoMigrate","_ref$statics","_ref$methods","_ref$attachments","_ref$options","keys","funName","topLevelFields","entries","_ref2","defineProperty","ret"],"mappings":"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","sourcesContent":["import _createClass from \"@babel/runtime/helpers/createClass\";\nimport { filter } from 'rxjs/operators';\nimport { ucfirst, nextTick, flatClone, promiseSeries, pluginMissing } from './util';\nimport { validateCouchDBString } from './pouch-db';\nimport { _handleToPouch as _handleToPouch2, _handleFromPouch as _handleFromPouch2, fillObjectDataBeforeInsert } from './rx-collection-helper';\nimport { createRxQuery } from './rx-query';\nimport { isInstanceOf as isInstanceOfRxSchema, createRxSchema } from './rx-schema';\nimport { createChangeEvent } from './rx-change-event';\nimport { newRxError, newRxTypeError } from './rx-error';\nimport { mustMigrate, createDataMigrator } from './data-migrator';\nimport Crypter from './crypter';\nimport { createDocCache } from './doc-cache';\nimport { createQueryCache } from './query-cache';\nimport { createChangeEventBuffer } from './change-event-buffer';\nimport overwritable from './overwritable';\nimport { runPluginHooks } from './hooks';\nimport { createWithConstructor as createRxDocumentWithConstructor, isInstanceOf as isRxDocument } from './rx-document';\nimport { createRxDocument, getRxDocumentConstructor } from './rx-document-prototype-merge';\nvar HOOKS_WHEN = ['pre', 'post'];\nvar HOOKS_KEYS = ['insert', 'save', 'remove', 'create'];\nvar hooksApplied = false;\nexport var RxCollectionBase = /*#__PURE__*/function () {\n  function RxCollectionBase(database, name, schema) {\n    var pouchSettings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var migrationStrategies = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    var methods = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var attachments = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n    var options = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n    var statics = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n    this._isInMemory = false;\n    this.destroyed = false;\n    this._atomicUpsertQueues = new Map();\n    this.synced = false;\n    this.hooks = {};\n    this._subs = [];\n    this._repStates = [];\n    this.pouch = {};\n    this._docCache = createDocCache();\n    this._queryCache = createQueryCache();\n    this._dataMigrator = {};\n    this._crypter = {};\n    this._changeEventBuffer = {};\n    this.database = database;\n    this.name = name;\n    this.schema = schema;\n    this.pouchSettings = pouchSettings;\n    this.migrationStrategies = migrationStrategies;\n    this.methods = methods;\n    this.attachments = attachments;\n    this.options = options;\n    this.statics = statics;\n\n    _applyHookFunctions(this);\n  }\n  /**\n   * returns observable\n   */\n\n\n  var _proto = RxCollectionBase.prototype;\n\n  _proto.prepare = function prepare() {\n    var _this = this;\n\n    this.pouch = this.database._spawnPouchDB(this.name, this.schema.version, this.pouchSettings);\n\n    if (this.schema.doKeyCompression()) {\n      this._keyCompressor = overwritable.createKeyCompressor(this.schema);\n    } // we trigger the non-blocking things first and await them later so we can do stuff in the mean time\n\n\n    var spawnedPouchPromise = this.pouch.info(); // resolved when the pouchdb is useable\n\n    var createIndexesPromise = _prepareCreateIndexes(this, spawnedPouchPromise);\n\n    this._dataMigrator = createDataMigrator(this, this.migrationStrategies);\n    this._crypter = Crypter.create(this.database.password, this.schema);\n    this._observable$ = this.database.$.pipe(filter(function (event) {\n      return event.data.col === _this.name;\n    }));\n    this._changeEventBuffer = createChangeEventBuffer(this);\n\n    this._subs.push(this._observable$.pipe(filter(function (cE) {\n      return !cE.data.isLocal;\n    })).subscribe(function (cE) {\n      // when data changes, send it to RxDocument in docCache\n      var doc = _this._docCache.get(cE.data.doc);\n\n      if (doc) doc._handleChangeEvent(cE);\n    }));\n\n    return Promise.all([spawnedPouchPromise, createIndexesPromise]);\n  }\n  /**\n   * checks if a migration is needed\n   */\n  ;\n\n  _proto.migrationNeeded = function migrationNeeded() {\n    return mustMigrate(this._dataMigrator);\n  }\n  /**\n   * trigger migration manually\n   */\n  ;\n\n  _proto.migrate = function migrate() {\n    var batchSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._dataMigrator.migrate(batchSize);\n  }\n  /**\n   * does the same thing as .migrate() but returns promise\n   * @return resolves when finished\n   */\n  ;\n\n  _proto.migratePromise = function migratePromise() {\n    var batchSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    return this._dataMigrator.migratePromise(batchSize);\n  }\n  /**\n   * wrappers for Pouch.put/get to handle keycompression etc\n   */\n  ;\n\n  _proto._handleToPouch = function _handleToPouch(docData) {\n    return _handleToPouch2(this, docData);\n  };\n\n  _proto._handleFromPouch = function _handleFromPouch(docData) {\n    var noDecrypt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return _handleFromPouch2(this, docData, noDecrypt);\n  }\n  /**\n   * every write on the pouchdb\n   * is tunneld throught this function\n   */\n  ;\n\n  _proto._pouchPut = function _pouchPut(obj) {\n    var _this2 = this;\n\n    var overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    obj = this._handleToPouch(obj);\n    return this.database.lockedRun(function () {\n      return _this2.pouch.put(obj);\n    })[\"catch\"](function (err) {\n      if (overwrite && err.status === 409) {\n        return _this2.database.lockedRun(function () {\n          return _this2.pouch.get(obj._id);\n        }).then(function (exist) {\n          obj._rev = exist._rev;\n          return _this2.database.lockedRun(function () {\n            return _this2.pouch.put(obj);\n          });\n        });\n      } else if (err.status === 409) {\n        throw newRxError('COL19', {\n          id: obj._id,\n          pouchDbError: err,\n          data: obj\n        });\n      } else throw err;\n    });\n  }\n  /**\n   * get document from pouchdb by its _id\n   */\n  ;\n\n  _proto._pouchGet = function _pouchGet(key) {\n    var _this3 = this;\n\n    return this.pouch.get(key).then(function (doc) {\n      return _this3._handleFromPouch(doc);\n    });\n  }\n  /**\n   * wrapps pouch-find\n   */\n  ;\n\n  _proto._pouchFind = function _pouchFind(rxQuery, limit) {\n    var _this4 = this;\n\n    var noDecrypt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var compressedQueryJSON = rxQuery.keyCompress();\n    if (limit) compressedQueryJSON['limit'] = limit;\n    return this.database.lockedRun(function () {\n      return _this4.pouch.find(compressedQueryJSON);\n    }).then(function (docsCompressed) {\n      var docs = docsCompressed.docs.map(function (doc) {\n        return _this4._handleFromPouch(doc, noDecrypt);\n      });\n      return docs;\n    });\n  };\n\n  _proto.$emit = function $emit(changeEvent) {\n    return this.database.$emit(changeEvent);\n  };\n\n  _proto.insert = function insert(json) {\n    var _this5 = this;\n\n    // inserting a temporary-document\n    var tempDoc = null;\n\n    if (isRxDocument(json)) {\n      tempDoc = json;\n\n      if (!tempDoc._isTemporary) {\n        throw newRxError('COL1', {\n          data: json\n        });\n      }\n\n      json = tempDoc.toJSON();\n    }\n\n    var useJson = fillObjectDataBeforeInsert(this, json);\n    var newDoc = tempDoc;\n    return this._runHooks('pre', 'insert', useJson).then(function () {\n      _this5.schema.validate(useJson);\n\n      return _this5._pouchPut(useJson);\n    }).then(function (insertResult) {\n      useJson[_this5.schema.primaryPath] = insertResult.id;\n      useJson._rev = insertResult.rev;\n\n      if (tempDoc) {\n        tempDoc._dataSync$.next(useJson);\n      } else newDoc = createRxDocument(_this5, useJson);\n\n      return _this5._runHooks('post', 'insert', useJson, newDoc);\n    }).then(function () {\n      // event\n      var emitEvent = createChangeEvent('INSERT', _this5.database, _this5, newDoc, useJson);\n\n      _this5.$emit(emitEvent);\n\n      return newDoc;\n    });\n  };\n\n  _proto.bulkInsert = function bulkInsert(docsData) {\n    var _this6 = this;\n\n    var useDocs = docsData.map(function (docData) {\n      var useDocData = fillObjectDataBeforeInsert(_this6, docData);\n      return useDocData;\n    });\n    return Promise.all(useDocs.map(function (doc) {\n      return _this6._runHooks('pre', 'insert', doc).then(function () {\n        _this6.schema.validate(doc);\n\n        return doc;\n      });\n    })).then(function (docs) {\n      var insertDocs = docs.map(function (d) {\n        return _this6._handleToPouch(d);\n      });\n      var docsMap = new Map();\n      docs.forEach(function (d) {\n        docsMap.set(d[_this6.schema.primaryPath], d);\n      });\n      return _this6.database.lockedRun(function () {\n        return _this6.pouch.bulkDocs(insertDocs).then(function (results) {\n          var okResults = results.filter(function (r) {\n            return r.ok;\n          }); // create documents\n\n          var rxDocuments = okResults.map(function (r) {\n            var docData = docsMap.get(r.id);\n            docData._rev = r.rev;\n            var doc = createRxDocument(_this6, docData);\n            return doc;\n          }); // emit events\n\n          rxDocuments.forEach(function (doc) {\n            var emitEvent = createChangeEvent('INSERT', _this6.database, _this6, doc, docsMap.get(doc.primary));\n\n            _this6.$emit(emitEvent);\n          });\n          return {\n            success: rxDocuments,\n            error: results.filter(function (r) {\n              return !r.ok;\n            })\n          };\n        });\n      });\n    });\n  }\n  /**\n   * same as insert but overwrites existing document with same primary\n   */\n  ;\n\n  _proto.upsert = function upsert(json) {\n    var _this7 = this;\n\n    var useJson = flatClone(json);\n    var primary = useJson[this.schema.primaryPath];\n\n    if (!primary) {\n      throw newRxError('COL3', {\n        primaryPath: this.schema.primaryPath,\n        data: useJson\n      });\n    }\n\n    return this.findOne(primary).exec().then(function (existing) {\n      if (existing) {\n        useJson._rev = existing['_rev'];\n        return existing.atomicUpdate(function () {\n          return useJson;\n        }).then(function () {\n          return existing;\n        });\n      } else {\n        return _this7.insert(json);\n      }\n    });\n  }\n  /**\n   * upserts to a RxDocument, uses atomicUpdate if document already exists\n   */\n  ;\n\n  _proto.atomicUpsert = function atomicUpsert(json) {\n    var _this8 = this;\n\n    var primary = json[this.schema.primaryPath];\n\n    if (!primary) {\n      throw newRxError('COL4', {\n        data: json\n      });\n    } // ensure that it wont try 2 parallel runs\n\n\n    var queue;\n\n    if (!this._atomicUpsertQueues.has(primary)) {\n      queue = Promise.resolve();\n    } else {\n      queue = this._atomicUpsertQueues.get(primary);\n    }\n\n    queue = queue.then(function () {\n      return _atomicUpsertEnsureRxDocumentExists(_this8, primary, json);\n    }).then(function (wasInserted) {\n      if (!wasInserted.inserted) {\n        return _atomicUpsertUpdate(wasInserted.doc, json).then(function () {\n          return nextTick();\n        }) // tick here so the event can propagate\n        .then(function () {\n          return wasInserted.doc;\n        });\n      } else return wasInserted.doc;\n    });\n\n    this._atomicUpsertQueues.set(primary, queue);\n\n    return queue;\n  }\n  /**\n   * takes a mongoDB-query-object and returns the documents\n   */\n  ;\n\n  _proto.find = function find(queryObj) {\n    if (typeof queryObj === 'string') {\n      throw newRxError('COL5', {\n        queryObj: queryObj\n      });\n    }\n\n    var query = createRxQuery('find', queryObj, this);\n    return query;\n  };\n\n  _proto.findOne = function findOne(queryObj) {\n    var query;\n\n    if (typeof queryObj === 'string') {\n      query = createRxQuery('findOne', {\n        _id: queryObj\n      }, this);\n    } else query = createRxQuery('findOne', queryObj, this);\n\n    if (typeof queryObj === 'number' || Array.isArray(queryObj)) {\n      throw newRxTypeError('COL6', {\n        queryObj: queryObj\n      });\n    }\n\n    return query;\n  }\n  /**\n   * Export collection to a JSON friendly format.\n   * @param _decrypted\n   * When true, all encrypted values will be decrypted.\n   * When false or omitted and an interface or type is loaded in this collection,\n   * all base properties of the type are typed as `any` since data could be encrypted.\n   */\n  ;\n\n  _proto.dump = function dump() {\n    var _decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * Import the parsed JSON export into the collection.\n   * @param _exportedJSON The previously exported data from the `<collection>.dump()` method.\n   */\n  ;\n\n  _proto.importDump = function importDump(_exportedJSON) {\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * waits for external changes to the database\n   * and ensures they are emitted to the internal RxChangeEvent-Stream\n   * TODO this can be removed by listening to the pull-change-events of the RxReplicationState\n   */\n  ;\n\n  _proto.watchForChanges = function watchForChanges() {\n    throw pluginMissing('watch-for-changes');\n  }\n  /**\n   * sync with another database\n   */\n  ;\n\n  _proto.sync = function sync(_syncOptions) {\n    throw pluginMissing('replication');\n  }\n  /**\n   * sync with a GraphQL endpoint\n   */\n  ;\n\n  _proto.syncGraphQL = function syncGraphQL(options) {\n    throw pluginMissing('replication-graphql');\n  }\n  /**\n   * Create a replicated in-memory-collection\n   */\n  ;\n\n  _proto.inMemory = function inMemory() {\n    throw pluginMissing('in-memory');\n  }\n  /**\n   * HOOKS\n   */\n  ;\n\n  _proto.addHook = function addHook(when, key, fun) {\n    var parallel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    if (typeof fun !== 'function') {\n      throw newRxTypeError('COL7', {\n        key: key,\n        when: when\n      });\n    }\n\n    if (!HOOKS_WHEN.includes(when)) {\n      throw newRxTypeError('COL8', {\n        key: key,\n        when: when\n      });\n    }\n\n    if (!HOOKS_KEYS.includes(key)) {\n      throw newRxError('COL9', {\n        key: key\n      });\n    }\n\n    if (when === 'post' && key === 'create' && parallel === true) {\n      throw newRxError('COL10', {\n        when: when,\n        key: key,\n        parallel: parallel\n      });\n    } // bind this-scope to hook-function\n\n\n    var boundFun = fun.bind(this);\n    var runName = parallel ? 'parallel' : 'series';\n    this.hooks[key] = this.hooks[key] || {};\n    this.hooks[key][when] = this.hooks[key][when] || {\n      series: [],\n      parallel: []\n    };\n    this.hooks[key][when][runName].push(boundFun);\n  };\n\n  _proto.getHooks = function getHooks(when, key) {\n    try {\n      return this.hooks[key][when];\n    } catch (e) {\n      return {\n        series: [],\n        parallel: []\n      };\n    }\n  };\n\n  _proto._runHooks = function _runHooks(when, key, data, instance) {\n    var hooks = this.getHooks(when, key);\n    if (!hooks) return Promise.resolve(); // run parallel: false\n\n    var tasks = hooks.series.map(function (hook) {\n      return function () {\n        return hook(data, instance);\n      };\n    });\n    return promiseSeries(tasks) // run parallel: true\n    .then(function () {\n      return Promise.all(hooks.parallel.map(function (hook) {\n        return hook(data, instance);\n      }));\n    });\n  }\n  /**\n   * does the same as ._runHooks() but with non-async-functions\n   */\n  ;\n\n  _proto._runHooksSync = function _runHooksSync(when, key, data, instance) {\n    var hooks = this.getHooks(when, key);\n    if (!hooks) return;\n    hooks.series.forEach(function (hook) {\n      return hook(data, instance);\n    });\n  }\n  /**\n   * creates a temporaryDocument which can be saved later\n   */\n  ;\n\n  _proto.newDocument = function newDocument() {\n    var docData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    docData = this.schema.fillObjectWithDefaults(docData);\n    var doc = createRxDocumentWithConstructor(getRxDocumentConstructor(this), this, docData);\n    doc._isTemporary = true;\n\n    this._runHooksSync('post', 'create', docData, doc);\n\n    return doc;\n  };\n\n  _proto.destroy = function destroy() {\n    if (this.destroyed) return Promise.resolve(false);\n\n    if (this._onDestroyCall) {\n      this._onDestroyCall();\n    }\n\n    this._subs.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n\n    if (this._changeEventBuffer) {\n      this._changeEventBuffer.destroy();\n    }\n\n    this._queryCache.destroy();\n\n    this._repStates.forEach(function (sync) {\n      return sync.cancel();\n    });\n\n    delete this.database.collections[this.name];\n    this.destroyed = true;\n    return Promise.resolve(true);\n  }\n  /**\n   * remove all data\n   */\n  ;\n\n  _proto.remove = function remove() {\n    return this.database.removeCollection(this.name);\n  };\n\n  _createClass(RxCollectionBase, [{\n    key: \"$\",\n    get: function get() {\n      return this._observable$;\n    }\n  }, {\n    key: \"insert$\",\n    get: function get() {\n      return this.$.pipe(filter(function (cE) {\n        return cE.data.op === 'INSERT';\n      }));\n    }\n  }, {\n    key: \"update$\",\n    get: function get() {\n      return this.$.pipe(filter(function (cE) {\n        return cE.data.op === 'UPDATE';\n      }));\n    }\n  }, {\n    key: \"remove$\",\n    get: function get() {\n      return this.$.pipe(filter(function (cE) {\n        return cE.data.op === 'REMOVE';\n      }));\n    }\n  }, {\n    key: \"docChanges$\",\n    get: function get() {\n      if (!this.__docChanges$) {\n        this.__docChanges$ = this.$.pipe(filter(function (cEvent) {\n          return ['INSERT', 'UPDATE', 'REMOVE'].includes(cEvent.data.op);\n        }));\n      }\n\n      return this.__docChanges$;\n    }\n  }, {\n    key: \"onDestroy\",\n    get: function get() {\n      var _this9 = this;\n\n      if (!this._onDestroy) this._onDestroy = new Promise(function (res) {\n        return _this9._onDestroyCall = res;\n      });\n      return this._onDestroy;\n    }\n  }]);\n\n  return RxCollectionBase;\n}();\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\n\nfunction _applyHookFunctions(collection) {\n  if (hooksApplied) return; // already run\n\n  hooksApplied = true;\n  var colProto = Object.getPrototypeOf(collection);\n  HOOKS_KEYS.forEach(function (key) {\n    HOOKS_WHEN.map(function (when) {\n      var fnName = when + ucfirst(key);\n\n      colProto[fnName] = function (fun, parallel) {\n        return this.addHook(when, key, fun, parallel);\n      };\n    });\n  });\n}\n/**\n * returns all possible properties of a RxCollection-instance\n */\n\n\nvar _properties = null;\nexport function properties() {\n  if (!_properties) {\n    var pseudoInstance = new RxCollectionBase();\n    var ownProperties = Object.getOwnPropertyNames(pseudoInstance);\n    var prototypeProperties = Object.getOwnPropertyNames(Object.getPrototypeOf(pseudoInstance));\n    _properties = [].concat(ownProperties, prototypeProperties);\n  }\n\n  return _properties;\n}\n\nfunction _atomicUpsertUpdate(doc, json) {\n  return doc.atomicUpdate(function (innerDoc) {\n    json._rev = innerDoc._rev;\n    innerDoc._data = json;\n    return innerDoc._data;\n  }).then(function () {\n    return doc;\n  });\n}\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\n\n\nfunction _atomicUpsertEnsureRxDocumentExists(rxCollection, primary, json) {\n  return rxCollection.findOne(primary).exec().then(function (doc) {\n    if (!doc) {\n      return rxCollection.insert(json).then(function (newDoc) {\n        return {\n          doc: newDoc,\n          inserted: true\n        };\n      });\n    } else {\n      return {\n        doc: doc,\n        inserted: false\n      };\n    }\n  });\n}\n/**\n * creates the indexes in the pouchdb\n */\n\n\nfunction _prepareCreateIndexes(rxCollection, spawnedPouchPromise) {\n  return Promise.all(rxCollection.schema.indexes.map(function (indexAr) {\n    var compressedIdx = indexAr.map(function (key) {\n      if (!rxCollection.schema.doKeyCompression()) return key;else return rxCollection._keyCompressor.transformKey('', '', key.split('.'));\n    });\n    return spawnedPouchPromise.then(function () {\n      return rxCollection.pouch.createIndex({\n        index: {\n          fields: compressedIdx\n        }\n      });\n    });\n  }));\n}\n/**\n * creates and prepares a new collection\n */\n\n\nexport function create(_ref) {\n  var database = _ref.database,\n      name = _ref.name,\n      schema = _ref.schema,\n      _ref$pouchSettings = _ref.pouchSettings,\n      pouchSettings = _ref$pouchSettings === void 0 ? {} : _ref$pouchSettings,\n      _ref$migrationStrateg = _ref.migrationStrategies,\n      migrationStrategies = _ref$migrationStrateg === void 0 ? {} : _ref$migrationStrateg,\n      _ref$autoMigrate = _ref.autoMigrate,\n      autoMigrate = _ref$autoMigrate === void 0 ? true : _ref$autoMigrate,\n      _ref$statics = _ref.statics,\n      statics = _ref$statics === void 0 ? {} : _ref$statics,\n      _ref$methods = _ref.methods,\n      methods = _ref$methods === void 0 ? {} : _ref$methods,\n      _ref$attachments = _ref.attachments,\n      attachments = _ref$attachments === void 0 ? {} : _ref$attachments,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n  validateCouchDBString(name); // ensure it is a schema-object\n\n  if (!isInstanceOfRxSchema(schema)) schema = createRxSchema(schema);\n  Object.keys(methods).filter(function (funName) {\n    return schema.topLevelFields.includes(funName);\n  }).forEach(function (funName) {\n    throw newRxError('COL18', {\n      funName: funName\n    });\n  });\n  var collection = new RxCollectionBase(database, name, schema, pouchSettings, migrationStrategies, methods, attachments, options, statics);\n  return collection.prepare().then(function () {\n    // ORM add statics\n    Object.entries(statics).forEach(function (_ref2) {\n      var funName = _ref2[0],\n          fun = _ref2[1];\n      Object.defineProperty(collection, funName, {\n        get: function get() {\n          return fun.bind(collection);\n        }\n      });\n    });\n    var ret = Promise.resolve();\n    if (autoMigrate) ret = collection.migratePromise();\n    return ret;\n  }).then(function () {\n    runPluginHooks('createRxCollection', collection);\n    return collection;\n  });\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxCollectionBase;\n}\nexport default {\n  create: create,\n  properties: properties,\n  isInstanceOf: isInstanceOf,\n  RxCollectionBase: RxCollectionBase\n};\n//# sourceMappingURL=rx-collection.js.map"]},"metadata":{},"sourceType":"module"}