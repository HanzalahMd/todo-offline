{"ast":null,"code":"import { binaryMd5 } from 'pouchdb-md5';\nimport { collate } from 'pouchdb-collate';\n\nfunction sortObjectPropertiesByKey(queryParams) {\n  return Object.keys(queryParams).sort(collate).reduce(function (result, key) {\n    result[key] = queryParams[key];\n    return result;\n  }, {});\n} // Generate a unique id particular to this replication.\n// Not guaranteed to align perfectly with CouchDB's rep ids.\n\n\nfunction generateReplicationId(src, target, opts) {\n  var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : '';\n  var filterFun = opts.filter ? opts.filter.toString() : '';\n  var queryParams = '';\n  var filterViewName = '';\n  var selector = ''; // possibility for checkpoints to be lost here as behaviour of\n  // JSON.stringify is not stable (see #6226)\n\n  /* istanbul ignore if */\n\n  if (opts.selector) {\n    selector = JSON.stringify(opts.selector);\n  }\n\n  if (opts.filter && opts.query_params) {\n    queryParams = JSON.stringify(sortObjectPropertiesByKey(opts.query_params));\n  }\n\n  if (opts.filter && opts.filter === '_view') {\n    filterViewName = opts.view.toString();\n  }\n\n  return Promise.all([src.id(), target.id()]).then(function (res) {\n    var queryData = res[0] + res[1] + filterFun + filterViewName + queryParams + docIds + selector;\n    return new Promise(function (resolve) {\n      binaryMd5(queryData, resolve);\n    });\n  }).then(function (md5sum) {\n    // can't use straight-up md5 alphabet, because\n    // the char '/' is interpreted as being for attachments,\n    // and + is also not url-safe\n    md5sum = md5sum.replace(/\\//g, '.').replace(/\\+/g, '_');\n    return '_local/' + md5sum;\n  });\n}\n\nexport default generateReplicationId;","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/pouchdb-generate-replication-id/lib/index.es.js"],"names":["binaryMd5","collate","sortObjectPropertiesByKey","queryParams","Object","keys","sort","reduce","result","key","generateReplicationId","src","target","opts","docIds","doc_ids","filterFun","filter","toString","filterViewName","selector","JSON","stringify","query_params","view","Promise","all","id","then","res","queryData","resolve","md5sum","replace"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,SAASC,yBAAT,CAAmCC,WAAnC,EAAgD;AAC9C,SAAOC,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBG,IAAzB,CAA8BL,OAA9B,EAAuCM,MAAvC,CAA8C,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;AAC1ED,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcN,WAAW,CAACM,GAAD,CAAzB;AACA,WAAOD,MAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,C,CAED;AACA;;;AACA,SAASE,qBAAT,CAA+BC,GAA/B,EAAoCC,MAApC,EAA4CC,IAA5C,EAAkD;AAChD,MAAIC,MAAM,GAAGD,IAAI,CAACE,OAAL,GAAeF,IAAI,CAACE,OAAL,CAAaT,IAAb,CAAkBL,OAAlB,CAAf,GAA4C,EAAzD;AACA,MAAIe,SAAS,GAAGH,IAAI,CAACI,MAAL,GAAcJ,IAAI,CAACI,MAAL,CAAYC,QAAZ,EAAd,GAAuC,EAAvD;AACA,MAAIf,WAAW,GAAG,EAAlB;AACA,MAAIgB,cAAc,GAAI,EAAtB;AACA,MAAIC,QAAQ,GAAG,EAAf,CALgD,CAOhD;AACA;;AACA;;AACA,MAAIP,IAAI,CAACO,QAAT,EAAmB;AACjBA,IAAAA,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeT,IAAI,CAACO,QAApB,CAAX;AACD;;AAED,MAAIP,IAAI,CAACI,MAAL,IAAeJ,IAAI,CAACU,YAAxB,EAAsC;AACpCpB,IAAAA,WAAW,GAAGkB,IAAI,CAACC,SAAL,CAAepB,yBAAyB,CAACW,IAAI,CAACU,YAAN,CAAxC,CAAd;AACD;;AAED,MAAIV,IAAI,CAACI,MAAL,IAAeJ,IAAI,CAACI,MAAL,KAAgB,OAAnC,EAA4C;AAC1CE,IAAAA,cAAc,GAAGN,IAAI,CAACW,IAAL,CAAUN,QAAV,EAAjB;AACD;;AAED,SAAOO,OAAO,CAACC,GAAR,CAAY,CAACf,GAAG,CAACgB,EAAJ,EAAD,EAAWf,MAAM,CAACe,EAAP,EAAX,CAAZ,EAAqCC,IAArC,CAA0C,UAAUC,GAAV,EAAe;AAC9D,QAAIC,SAAS,GAAGD,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ,GAAkBb,SAAlB,GAA8BG,cAA9B,GACdhB,WADc,GACAW,MADA,GACSM,QADzB;AAEA,WAAO,IAAIK,OAAJ,CAAY,UAAUM,OAAV,EAAmB;AACpC/B,MAAAA,SAAS,CAAC8B,SAAD,EAAYC,OAAZ,CAAT;AACD,KAFM,CAAP;AAGD,GANM,EAMJH,IANI,CAMC,UAAUI,MAAV,EAAkB;AACxB;AACA;AACA;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAe,KAAf,EAAsB,GAAtB,EAA2BA,OAA3B,CAAmC,KAAnC,EAA0C,GAA1C,CAAT;AACA,WAAO,YAAYD,MAAnB;AACD,GAZM,CAAP;AAaD;;AAED,eAAetB,qBAAf","sourcesContent":["import { binaryMd5 } from 'pouchdb-md5';\nimport { collate } from 'pouchdb-collate';\n\nfunction sortObjectPropertiesByKey(queryParams) {\n  return Object.keys(queryParams).sort(collate).reduce(function (result, key) {\n    result[key] = queryParams[key];\n    return result;\n  }, {});\n}\n\n// Generate a unique id particular to this replication.\n// Not guaranteed to align perfectly with CouchDB's rep ids.\nfunction generateReplicationId(src, target, opts) {\n  var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : '';\n  var filterFun = opts.filter ? opts.filter.toString() : '';\n  var queryParams = '';\n  var filterViewName =  '';\n  var selector = '';\n\n  // possibility for checkpoints to be lost here as behaviour of\n  // JSON.stringify is not stable (see #6226)\n  /* istanbul ignore if */\n  if (opts.selector) {\n    selector = JSON.stringify(opts.selector);\n  }\n\n  if (opts.filter && opts.query_params) {\n    queryParams = JSON.stringify(sortObjectPropertiesByKey(opts.query_params));\n  }\n\n  if (opts.filter && opts.filter === '_view') {\n    filterViewName = opts.view.toString();\n  }\n\n  return Promise.all([src.id(), target.id()]).then(function (res) {\n    var queryData = res[0] + res[1] + filterFun + filterViewName +\n      queryParams + docIds + selector;\n    return new Promise(function (resolve) {\n      binaryMd5(queryData, resolve);\n    });\n  }).then(function (md5sum) {\n    // can't use straight-up md5 alphabet, because\n    // the char '/' is interpreted as being for attachments,\n    // and + is also not url-safe\n    md5sum = md5sum.replace(/\\//g, '.').replace(/\\+/g, '_');\n    return '_local/' + md5sum;\n  });\n}\n\nexport default generateReplicationId;\n"]},"metadata":{},"sourceType":"module"}