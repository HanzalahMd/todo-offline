{"ast":null,"code":"export function decompressObject(table, obj) {\n  if (typeof obj !== 'object' || obj === null) return obj;else if (Array.isArray(obj)) {\n    // array\n    return obj.map(function (item) {\n      return decompressObject(table, item);\n    });\n  } else {\n    // object\n    var ret_1 = {};\n    Object.keys(obj).forEach(function (key) {\n      var decompressed = decompressedKey(table, key);\n      var value = decompressObject(table, obj[key]);\n      ret_1[decompressed] = value;\n    });\n    return ret_1;\n  }\n}\n/**\n * transform a compressed object-path\n * into its non-compressed version\n * e.g:\n * - input: '|a.|b'\n * - output: 'name.firstName'\n */\n\nexport function decompressedPath(table, path) {\n  var splitted = path.split('.');\n  return splitted.map(function (subKey) {\n    var compressedKey = decompressedKey(table, subKey);\n    return compressedKey;\n  }).join('.');\n}\nexport function decompressedKey(table, key) {\n  /**\n      * keys could be array-accessors like myArray[4]\n      * we have to split and readd the squared brackets value\n      */\n  var splitSquaredBrackets = key.split('[');\n  key = splitSquaredBrackets.shift();\n  var decompressed = table.uncompressedToCompressed.get(key);\n\n  if (!decompressed) {\n    return key;\n  } else {\n    var readdSquared = splitSquaredBrackets.length ? '[' + splitSquaredBrackets.join('[') : '';\n    return decompressed + readdSquared;\n  }\n}","map":{"version":3,"sources":["../../src/decompress.ts"],"names":[],"mappings":"AAKA,OAAM,SAAU,gBAAV,CACF,KADE,EAEF,GAFE,EAEkB;AAEpB,MAAI,OAAO,GAAP,KAAe,QAAf,IAA2B,GAAG,KAAK,IAAvC,EAA6C,OAAO,GAAP,CAA7C,KACK,IAAI,KAAK,CAAC,OAAN,CAAc,GAAd,CAAJ,EAAwB;AACzB;AACA,WAAO,GAAG,CAAC,GAAJ,CAAQ,UAAA,IAAA,EAAI;AAAI,aAAA,gBAAgB,CAAC,KAAD,EAAhB,IAAgB,CAAhB;AAA6B,KAA7C,CAAP;AACH,GAHI,MAGE;AACH;AACA,QAAM,KAAG,GAAoB,EAA7B;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,UAAA,GAAA,EAAG;AACxB,UAAM,YAAY,GAAG,eAAe,CAChC,KADgC,EAEhC,GAFgC,CAApC;AAIA,UAAM,KAAK,GAAG,gBAAgB,CAC1B,KAD0B,EAE1B,GAAG,CAAC,GAAD,CAFuB,CAA9B;AAIA,MAAA,KAAG,CAAC,YAAD,CAAH,GAAoB,KAApB;AACH,KAVD;AAWA,WAAO,KAAP;AACH;AACJ;AAED;;;;;;;;AAOA,OAAM,SAAU,gBAAV,CACF,KADE,EAEF,IAFE,EAEU;AAEZ,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAjB;AACA,SAAO,QAAQ,CACV,GADE,CACE,UAAA,MAAA,EAAM;AACP,QAAM,aAAa,GAAG,eAAe,CACjC,KADiC,EAEjC,MAFiC,CAArC;AAIA,WAAO,aAAP;AACH,GAPE,EAOA,IAPA,CAOK,GAPL,CAAP;AAQH;AAED,OAAM,SAAU,eAAV,CACF,KADE,EAEF,GAFE,EAES;AAGX;;;;AAIA,MAAM,oBAAoB,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,CAA7B;AACA,EAAA,GAAG,GAAG,oBAAoB,CAAC,KAArB,EAAN;AAEA,MAAM,YAAY,GAAG,KAAK,CAAC,wBAAN,CAA+B,GAA/B,CAAmC,GAAnC,CAArB;;AACA,MAAI,CAAC,YAAL,EAAmB;AACf,WAAO,GAAP;AACH,GAFD,MAEO;AACH,QAAM,YAAY,GAAG,oBAAoB,CAAC,MAArB,GAA8B,MAAM,oBAAoB,CAAC,IAArB,CAA0B,GAA1B,CAApC,GAAqE,EAA1F;AACA,WAAO,YAAY,GAAG,YAAtB;AACH;AACJ","sourceRoot":"","sourcesContent":["export function decompressObject(table, obj) {\n    if (typeof obj !== 'object' || obj === null)\n        return obj;\n    else if (Array.isArray(obj)) {\n        // array\n        return obj.map(function (item) { return decompressObject(table, item); });\n    }\n    else {\n        // object\n        var ret_1 = {};\n        Object.keys(obj).forEach(function (key) {\n            var decompressed = decompressedKey(table, key);\n            var value = decompressObject(table, obj[key]);\n            ret_1[decompressed] = value;\n        });\n        return ret_1;\n    }\n}\n/**\n * transform a compressed object-path\n * into its non-compressed version\n * e.g:\n * - input: '|a.|b'\n * - output: 'name.firstName'\n */\nexport function decompressedPath(table, path) {\n    var splitted = path.split('.');\n    return splitted\n        .map(function (subKey) {\n        var compressedKey = decompressedKey(table, subKey);\n        return compressedKey;\n    }).join('.');\n}\nexport function decompressedKey(table, key) {\n    /**\n        * keys could be array-accessors like myArray[4]\n        * we have to split and readd the squared brackets value\n        */\n    var splitSquaredBrackets = key.split('[');\n    key = splitSquaredBrackets.shift();\n    var decompressed = table.uncompressedToCompressed.get(key);\n    if (!decompressed) {\n        return key;\n    }\n    else {\n        var readdSquared = splitSquaredBrackets.length ? '[' + splitSquaredBrackets.join('[') : '';\n        return decompressed + readdSquared;\n    }\n}\n//# sourceMappingURL=decompress.js.map"]},"metadata":{},"sourceType":"module"}