{"ast":null,"code":"/**\n * this plugin adds the checkAdapter-function to rxdb\n * you can use it to check if the given adapter is working in the current environmet\n */\nimport { PouchDB } from '../pouch-db';\nimport { generateId, adapterObject } from '../util';\n/**\n * The same pouchdb-location is used on each run\n * To ensure when this is run multiple times,\n * there will not be many created databases\n */\n\nexport var POUCHDB_LOCATION = 'rxdb-adapter-check';\nexport function checkAdapter(adapter) {\n  // id of the document which is stored and removed to ensure everything works\n  var _id = POUCHDB_LOCATION + '-' + generateId();\n\n  var pouch;\n\n  try {\n    pouch = new PouchDB(POUCHDB_LOCATION, adapterObject(adapter), {\n      auto_compaction: true,\n      revs_limit: 1\n    });\n  } catch (err) {\n    return Promise.resolve(false);\n  }\n\n  var recoveredDoc;\n  return pouch.info() // ensure that we wait until db is useable\n  // ensure write works\n  .then(function () {\n    return pouch.put({\n      _id: _id,\n      value: {\n        ok: true,\n        time: new Date().getTime()\n      }\n    });\n  }) // ensure read works\n  .then(function () {\n    return pouch.get(_id);\n  }).then(function (doc) {\n    return recoveredDoc = doc;\n  }) // ensure remove works\n  .then(function () {\n    return pouch.remove(recoveredDoc);\n  }).then(function () {\n    return true;\n  }).then(function () {\n    if (recoveredDoc && recoveredDoc.value && recoveredDoc.value.ok) return true;else return false;\n  })[\"catch\"](function () {\n    return false;\n  });\n  /**\n   * NOTICE:\n   * Do not remove the pouchdb-instance after the test\n   * The problem is that when this function is call in parallel,\n   * for example when you restore the tabs from a browser-session and open\n   * the same website multiple times at the same time,\n   * calling destroy would possibly crash the other call\n   */\n}\nexport var rxdb = true;\nexport var prototypes = {};\nexport var overwritable = {\n  checkAdapter: checkAdapter\n};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/adapter-check.js"],"names":["PouchDB","generateId","adapterObject","POUCHDB_LOCATION","checkAdapter","adapter","_id","pouch","auto_compaction","revs_limit","err","Promise","resolve","recoveredDoc","info","then","put","value","ok","time","Date","getTime","get","doc","remove","rxdb","prototypes","overwritable"],"mappings":"AAAA;;;;AAIA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,SAA1C;AAEA;;;;;;AAKA,OAAO,IAAIC,gBAAgB,GAAG,oBAAvB;AACP,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AACpC;AACA,MAAIC,GAAG,GAAGH,gBAAgB,GAAG,GAAnB,GAAyBF,UAAU,EAA7C;;AAEA,MAAIM,KAAJ;;AAEA,MAAI;AACFA,IAAAA,KAAK,GAAG,IAAIP,OAAJ,CAAYG,gBAAZ,EAA8BD,aAAa,CAACG,OAAD,CAA3C,EAAsD;AAC5DG,MAAAA,eAAe,EAAE,IAD2C;AAE5DC,MAAAA,UAAU,EAAE;AAFgD,KAAtD,CAAR;AAID,GALD,CAKE,OAAOC,GAAP,EAAY;AACZ,WAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,MAAIC,YAAJ;AACA,SAAON,KAAK,CAACO,IAAN,GAAa;AACpB;AADO,GAENC,IAFM,CAED,YAAY;AAChB,WAAOR,KAAK,CAACS,GAAN,CAAU;AACfV,MAAAA,GAAG,EAAEA,GADU;AAEfW,MAAAA,KAAK,EAAE;AACLC,QAAAA,EAAE,EAAE,IADC;AAELC,QAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAFD;AAFQ,KAAV,CAAP;AAOD,GAVM,EAUJ;AAVI,GAWNN,IAXM,CAWD,YAAY;AAChB,WAAOR,KAAK,CAACe,GAAN,CAAUhB,GAAV,CAAP;AACD,GAbM,EAaJS,IAbI,CAaC,UAAUQ,GAAV,EAAe;AACrB,WAAOV,YAAY,GAAGU,GAAtB;AACD,GAfM,EAeJ;AAfI,GAgBNR,IAhBM,CAgBD,YAAY;AAChB,WAAOR,KAAK,CAACiB,MAAN,CAAaX,YAAb,CAAP;AACD,GAlBM,EAkBJE,IAlBI,CAkBC,YAAY;AAClB,WAAO,IAAP;AACD,GApBM,EAoBJA,IApBI,CAoBC,YAAY;AAClB,QAAIF,YAAY,IAAIA,YAAY,CAACI,KAA7B,IAAsCJ,YAAY,CAACI,KAAb,CAAmBC,EAA7D,EAAiE,OAAO,IAAP,CAAjE,KAAkF,OAAO,KAAP;AACnF,GAtBM,EAsBJ,OAtBI,EAsBK,YAAY;AACtB,WAAO,KAAP;AACD,GAxBM,CAAP;AAyBA;;;;;;;;AAQD;AACD,OAAO,IAAIO,IAAI,GAAG,IAAX;AACP,OAAO,IAAIC,UAAU,GAAG,EAAjB;AACP,OAAO,IAAIC,YAAY,GAAG;AACxBvB,EAAAA,YAAY,EAAEA;AADU,CAAnB;AAGP,eAAe;AACbqB,EAAAA,IAAI,EAAEA,IADO;AAEbC,EAAAA,UAAU,EAAEA,UAFC;AAGbC,EAAAA,YAAY,EAAEA;AAHD,CAAf","sourcesContent":["/**\n * this plugin adds the checkAdapter-function to rxdb\n * you can use it to check if the given adapter is working in the current environmet\n */\nimport { PouchDB } from '../pouch-db';\nimport { generateId, adapterObject } from '../util';\n\n/**\n * The same pouchdb-location is used on each run\n * To ensure when this is run multiple times,\n * there will not be many created databases\n */\nexport var POUCHDB_LOCATION = 'rxdb-adapter-check';\nexport function checkAdapter(adapter) {\n  // id of the document which is stored and removed to ensure everything works\n  var _id = POUCHDB_LOCATION + '-' + generateId();\n\n  var pouch;\n\n  try {\n    pouch = new PouchDB(POUCHDB_LOCATION, adapterObject(adapter), {\n      auto_compaction: true,\n      revs_limit: 1\n    });\n  } catch (err) {\n    return Promise.resolve(false);\n  }\n\n  var recoveredDoc;\n  return pouch.info() // ensure that we wait until db is useable\n  // ensure write works\n  .then(function () {\n    return pouch.put({\n      _id: _id,\n      value: {\n        ok: true,\n        time: new Date().getTime()\n      }\n    });\n  }) // ensure read works\n  .then(function () {\n    return pouch.get(_id);\n  }).then(function (doc) {\n    return recoveredDoc = doc;\n  }) // ensure remove works\n  .then(function () {\n    return pouch.remove(recoveredDoc);\n  }).then(function () {\n    return true;\n  }).then(function () {\n    if (recoveredDoc && recoveredDoc.value && recoveredDoc.value.ok) return true;else return false;\n  })[\"catch\"](function () {\n    return false;\n  });\n  /**\n   * NOTICE:\n   * Do not remove the pouchdb-instance after the test\n   * The problem is that when this function is call in parallel,\n   * for example when you restore the tabs from a browser-session and open\n   * the same website multiple times at the same time,\n   * calling destroy would possibly crash the other call\n   */\n}\nexport var rxdb = true;\nexport var prototypes = {};\nexport var overwritable = {\n  checkAdapter: checkAdapter\n};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable\n};\n//# sourceMappingURL=adapter-check.js.map"]},"metadata":{},"sourceType":"module"}