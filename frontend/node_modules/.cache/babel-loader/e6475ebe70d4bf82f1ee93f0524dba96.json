{"ast":null,"code":"/**\n * this handles how plugins are added to rxdb\n * basically it changes the internal prototypes\n * by passing them to the plugins-functions\n */\nimport { RxSchema } from './rx-schema';\nimport { Crypter } from './crypter';\nimport { basePrototype as RxDocumentPrototype } from './rx-document';\nimport { RxQueryBase } from './rx-query';\nimport { RxCollectionBase } from './rx-collection';\nimport { RxDatabaseBase } from './rx-database';\nimport { PouchDB } from './pouch-db';\nimport { overwritable } from './overwritable';\nimport { HOOKS, runPluginHooks } from './hooks';\n/**\n * prototypes that can be manipulated with a plugin\n */\n\nvar PROTOTYPES = {\n  RxSchema: RxSchema.prototype,\n  Crypter: Crypter.prototype,\n  RxDocument: RxDocumentPrototype,\n  RxQuery: RxQueryBase.prototype,\n  RxCollection: RxCollectionBase.prototype,\n  RxDatabase: RxDatabaseBase.prototype\n};\nvar ADDED_PLUGINS = new Set();\nexport function addRxPlugin(plugin) {\n  runPluginHooks('preAddRxPlugin', {\n    plugin: plugin,\n    plugins: ADDED_PLUGINS\n  }); // do nothing if added before\n\n  if (ADDED_PLUGINS.has(plugin)) {\n    return;\n  } else {\n    ADDED_PLUGINS.add(plugin);\n  }\n\n  if (!plugin.rxdb) {\n    // pouchdb-plugin\n    if (typeof plugin === 'object' && plugin[\"default\"]) plugin = plugin[\"default\"];\n    PouchDB.plugin(plugin);\n    return;\n  }\n\n  var rxPlugin = plugin; // prototype-overwrites\n\n  if (rxPlugin.prototypes) {\n    Object.entries(plugin.prototypes).forEach(function (_ref) {\n      var name = _ref[0],\n          fun = _ref[1];\n      return fun(PROTOTYPES[name]);\n    });\n  } // overwritable-overwrites\n\n\n  if (rxPlugin.overwritable) {\n    Object.assign(overwritable, plugin.overwritable);\n  } // extend-hooks\n\n\n  if (rxPlugin.hooks) {\n    Object.entries(plugin.hooks).forEach(function (_ref2) {\n      var name = _ref2[0],\n          fun = _ref2[1];\n      return HOOKS[name].push(fun);\n    });\n  }\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugin.js"],"names":["RxSchema","Crypter","basePrototype","RxDocumentPrototype","RxQueryBase","RxCollectionBase","RxDatabaseBase","PouchDB","overwritable","HOOKS","runPluginHooks","PROTOTYPES","prototype","RxDocument","RxQuery","RxCollection","RxDatabase","ADDED_PLUGINS","Set","addRxPlugin","plugin","plugins","has","add","rxdb","rxPlugin","prototypes","Object","entries","forEach","_ref","name","fun","assign","hooks","_ref2","push"],"mappings":"AAAA;;;;;AAKA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,aAAa,IAAIC,mBAA1B,QAAqD,eAArD;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,EAAgBC,cAAhB,QAAsC,SAAtC;AACA;;;;AAIA,IAAIC,UAAU,GAAG;AACfX,EAAAA,QAAQ,EAAEA,QAAQ,CAACY,SADJ;AAEfX,EAAAA,OAAO,EAAEA,OAAO,CAACW,SAFF;AAGfC,EAAAA,UAAU,EAAEV,mBAHG;AAIfW,EAAAA,OAAO,EAAEV,WAAW,CAACQ,SAJN;AAKfG,EAAAA,YAAY,EAAEV,gBAAgB,CAACO,SALhB;AAMfI,EAAAA,UAAU,EAAEV,cAAc,CAACM;AANZ,CAAjB;AAQA,IAAIK,aAAa,GAAG,IAAIC,GAAJ,EAApB;AACA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAClCV,EAAAA,cAAc,CAAC,gBAAD,EAAmB;AAC/BU,IAAAA,MAAM,EAAEA,MADuB;AAE/BC,IAAAA,OAAO,EAAEJ;AAFsB,GAAnB,CAAd,CADkC,CAI9B;;AAEJ,MAAIA,aAAa,CAACK,GAAd,CAAkBF,MAAlB,CAAJ,EAA+B;AAC7B;AACD,GAFD,MAEO;AACLH,IAAAA,aAAa,CAACM,GAAd,CAAkBH,MAAlB;AACD;;AAED,MAAI,CAACA,MAAM,CAACI,IAAZ,EAAkB;AAChB;AACA,QAAI,OAAOJ,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAAC,SAAD,CAAxC,EAAqDA,MAAM,GAAGA,MAAM,CAAC,SAAD,CAAf;AACrDb,IAAAA,OAAO,CAACa,MAAR,CAAeA,MAAf;AACA;AACD;;AAED,MAAIK,QAAQ,GAAGL,MAAf,CAnBkC,CAmBX;;AAEvB,MAAIK,QAAQ,CAACC,UAAb,EAAyB;AACvBC,IAAAA,MAAM,CAACC,OAAP,CAAeR,MAAM,CAACM,UAAtB,EAAkCG,OAAlC,CAA0C,UAAUC,IAAV,EAAgB;AACxD,UAAIC,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAf;AAAA,UACIE,GAAG,GAAGF,IAAI,CAAC,CAAD,CADd;AAEA,aAAOE,GAAG,CAACrB,UAAU,CAACoB,IAAD,CAAX,CAAV;AACD,KAJD;AAKD,GA3BiC,CA2BhC;;;AAGF,MAAIN,QAAQ,CAACjB,YAAb,EAA2B;AACzBmB,IAAAA,MAAM,CAACM,MAAP,CAAczB,YAAd,EAA4BY,MAAM,CAACZ,YAAnC;AACD,GAhCiC,CAgChC;;;AAGF,MAAIiB,QAAQ,CAACS,KAAb,EAAoB;AAClBP,IAAAA,MAAM,CAACC,OAAP,CAAeR,MAAM,CAACc,KAAtB,EAA6BL,OAA7B,CAAqC,UAAUM,KAAV,EAAiB;AACpD,UAAIJ,IAAI,GAAGI,KAAK,CAAC,CAAD,CAAhB;AAAA,UACIH,GAAG,GAAGG,KAAK,CAAC,CAAD,CADf;AAEA,aAAO1B,KAAK,CAACsB,IAAD,CAAL,CAAYK,IAAZ,CAAiBJ,GAAjB,CAAP;AACD,KAJD;AAKD;AACF","sourcesContent":["/**\n * this handles how plugins are added to rxdb\n * basically it changes the internal prototypes\n * by passing them to the plugins-functions\n */\nimport { RxSchema } from './rx-schema';\nimport { Crypter } from './crypter';\nimport { basePrototype as RxDocumentPrototype } from './rx-document';\nimport { RxQueryBase } from './rx-query';\nimport { RxCollectionBase } from './rx-collection';\nimport { RxDatabaseBase } from './rx-database';\nimport { PouchDB } from './pouch-db';\nimport { overwritable } from './overwritable';\nimport { HOOKS, runPluginHooks } from './hooks';\n/**\n * prototypes that can be manipulated with a plugin\n */\n\nvar PROTOTYPES = {\n  RxSchema: RxSchema.prototype,\n  Crypter: Crypter.prototype,\n  RxDocument: RxDocumentPrototype,\n  RxQuery: RxQueryBase.prototype,\n  RxCollection: RxCollectionBase.prototype,\n  RxDatabase: RxDatabaseBase.prototype\n};\nvar ADDED_PLUGINS = new Set();\nexport function addRxPlugin(plugin) {\n  runPluginHooks('preAddRxPlugin', {\n    plugin: plugin,\n    plugins: ADDED_PLUGINS\n  }); // do nothing if added before\n\n  if (ADDED_PLUGINS.has(plugin)) {\n    return;\n  } else {\n    ADDED_PLUGINS.add(plugin);\n  }\n\n  if (!plugin.rxdb) {\n    // pouchdb-plugin\n    if (typeof plugin === 'object' && plugin[\"default\"]) plugin = plugin[\"default\"];\n    PouchDB.plugin(plugin);\n    return;\n  }\n\n  var rxPlugin = plugin; // prototype-overwrites\n\n  if (rxPlugin.prototypes) {\n    Object.entries(plugin.prototypes).forEach(function (_ref) {\n      var name = _ref[0],\n          fun = _ref[1];\n      return fun(PROTOTYPES[name]);\n    });\n  } // overwritable-overwrites\n\n\n  if (rxPlugin.overwritable) {\n    Object.assign(overwritable, plugin.overwritable);\n  } // extend-hooks\n\n\n  if (rxPlugin.hooks) {\n    Object.entries(plugin.hooks).forEach(function (_ref2) {\n      var name = _ref2[0],\n          fun = _ref2[1];\n      return HOOKS[name].push(fun);\n    });\n  }\n}\n//# sourceMappingURL=plugin.js.map"]},"metadata":{},"sourceType":"module"}