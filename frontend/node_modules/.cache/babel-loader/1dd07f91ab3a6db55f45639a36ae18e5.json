{"ast":null,"code":"/**\n * In this file we handle all accesses to the internal store of the database\n * This store is used to save hashes and checksums and metadata\n * ATM this only works with PouchDB but in the future\n * it should work by using the storage.interface\n */\nimport { LOCAL_PREFIX } from './util'; // will be typed when we have more then one\n\nexport var INTERNAL_STORAGE_NAME = '_rxdb_internal';\n/**\n * returns to local document with the given id\n * or null if not exists\n */\n\nexport function getLocalDocument(storageInstance, id) {\n  return storageInstance.get(LOCAL_PREFIX + id)[\"catch\"](function () {\n    return null;\n  });\n}\nexport function setLocalDocument(storageInstance, id, value) {\n  return storageInstance.put({\n    _id: id,\n    value: value\n  }).then(function () {});\n}\nexport function putDocument(storageInstance, doc) {\n  return storageInstance.put(doc).then(function (putResult) {\n    return Object.assign({\n      _id: putResult.id,\n      _rev: putResult.rev\n    }, doc);\n  });\n}\n/**\n * returns all NON-LOCAL documents\n */\n\nexport function getAllDocuments(storageInstance) {\n  return storageInstance.allDocs({\n    include_docs: true\n  }).then(function (result) {\n    return result.rows;\n  });\n}\n/**\n * deletes the storage instance and all of it's data\n */\n\nexport function deleteStorageInstance(storageInstance) {\n  return storageInstance.destroy();\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/rx-database-internal-store.js"],"names":["LOCAL_PREFIX","INTERNAL_STORAGE_NAME","getLocalDocument","storageInstance","id","get","setLocalDocument","value","put","_id","then","putDocument","doc","putResult","Object","assign","_rev","rev","getAllDocuments","allDocs","include_docs","result","rows","deleteStorageInstance","destroy"],"mappings":"AAAA;;;;;;AAMA,SAASA,YAAT,QAA6B,QAA7B,C,CACA;;AACA,OAAO,IAAIC,qBAAqB,GAAG,gBAA5B;AACP;;;;;AAKA,OAAO,SAASC,gBAAT,CAA0BC,eAA1B,EAA2CC,EAA3C,EAA+C;AACpD,SAAOD,eAAe,CAACE,GAAhB,CAAoBL,YAAY,GAAGI,EAAnC,EAAuC,OAAvC,EAAgD,YAAY;AACjE,WAAO,IAAP;AACD,GAFM,CAAP;AAGD;AACD,OAAO,SAASE,gBAAT,CAA0BH,eAA1B,EAA2CC,EAA3C,EAA+CG,KAA/C,EAAsD;AAC3D,SAAOJ,eAAe,CAACK,GAAhB,CAAoB;AACzBC,IAAAA,GAAG,EAAEL,EADoB;AAEzBG,IAAAA,KAAK,EAAEA;AAFkB,GAApB,EAGJG,IAHI,CAGC,YAAY,CAAE,CAHf,CAAP;AAID;AACD,OAAO,SAASC,WAAT,CAAqBR,eAArB,EAAsCS,GAAtC,EAA2C;AAChD,SAAOT,eAAe,CAACK,GAAhB,CAAoBI,GAApB,EAAyBF,IAAzB,CAA8B,UAAUG,SAAV,EAAqB;AACxD,WAAOC,MAAM,CAACC,MAAP,CAAc;AACnBN,MAAAA,GAAG,EAAEI,SAAS,CAACT,EADI;AAEnBY,MAAAA,IAAI,EAAEH,SAAS,CAACI;AAFG,KAAd,EAGJL,GAHI,CAAP;AAID,GALM,CAAP;AAMD;AACD;;;;AAIA,OAAO,SAASM,eAAT,CAAyBf,eAAzB,EAA0C;AAC/C,SAAOA,eAAe,CAACgB,OAAhB,CAAwB;AAC7BC,IAAAA,YAAY,EAAE;AADe,GAAxB,EAEJV,IAFI,CAEC,UAAUW,MAAV,EAAkB;AACxB,WAAOA,MAAM,CAACC,IAAd;AACD,GAJM,CAAP;AAKD;AACD;;;;AAIA,OAAO,SAASC,qBAAT,CAA+BpB,eAA/B,EAAgD;AACrD,SAAOA,eAAe,CAACqB,OAAhB,EAAP;AACD","sourcesContent":["/**\n * In this file we handle all accesses to the internal store of the database\n * This store is used to save hashes and checksums and metadata\n * ATM this only works with PouchDB but in the future\n * it should work by using the storage.interface\n */\nimport { LOCAL_PREFIX } from './util';\n// will be typed when we have more then one\nexport var INTERNAL_STORAGE_NAME = '_rxdb_internal';\n/**\n * returns to local document with the given id\n * or null if not exists\n */\n\nexport function getLocalDocument(storageInstance, id) {\n  return storageInstance.get(LOCAL_PREFIX + id)[\"catch\"](function () {\n    return null;\n  });\n}\nexport function setLocalDocument(storageInstance, id, value) {\n  return storageInstance.put({\n    _id: id,\n    value: value\n  }).then(function () {});\n}\nexport function putDocument(storageInstance, doc) {\n  return storageInstance.put(doc).then(function (putResult) {\n    return Object.assign({\n      _id: putResult.id,\n      _rev: putResult.rev\n    }, doc);\n  });\n}\n/**\n * returns all NON-LOCAL documents\n */\n\nexport function getAllDocuments(storageInstance) {\n  return storageInstance.allDocs({\n    include_docs: true\n  }).then(function (result) {\n    return result.rows;\n  });\n}\n/**\n * deletes the storage instance and all of it's data\n */\n\nexport function deleteStorageInstance(storageInstance) {\n  return storageInstance.destroy();\n}\n//# sourceMappingURL=rx-database-internal-store.js.map"]},"metadata":{},"sourceType":"module"}