{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport objectPath from 'object-path';\nimport deepEqual from 'deep-equal';\nimport { clone, hash, sortObject, trimDots, flattenObject, pluginMissing } from './util';\nimport { newRxError } from './rx-error';\nimport { runPluginHooks } from './hooks';\nimport { defineGetterSetter } from './rx-document';\nexport var RxSchema =\n/*#__PURE__*/\nfunction () {\n  function RxSchema(jsonID) {\n    this.jsonID = jsonID;\n    this.compoundIndexes = this.jsonID.compoundIndexes;\n    this.indexes = getIndexes(this.jsonID); // primary is always required\n\n    this.primaryPath = getPrimary(this.jsonID);\n\n    if (this.primaryPath) {\n      this.jsonID.required.push(this.primaryPath);\n    } // final fields are always required\n\n\n    this.finalFields = getFinalFields(this.jsonID);\n    this.jsonID.required = this.jsonID.required.concat(this.finalFields).filter(function (elem, pos, arr) {\n      return arr.indexOf(elem) === pos;\n    }); // unique;\n    // add primary to schema if not there (if _id)\n\n    if (!this.jsonID.properties[this.primaryPath]) {\n      this.jsonID.properties[this.primaryPath] = {\n        type: 'string',\n        minLength: 1\n      };\n    }\n  }\n\n  var _proto = RxSchema.prototype;\n\n  _proto.getSchemaByObjectPath = function getSchemaByObjectPath(path) {\n    var usePath = path;\n    usePath = usePath.replace(/\\./g, '.properties.');\n    usePath = 'properties.' + usePath;\n    usePath = trimDots(usePath);\n    var ret = objectPath.get(this.jsonID, usePath);\n    return ret;\n  }\n  /**\n   * checks if a given change on a document is allowed\n   * Ensures that:\n   * - primary is not modified\n   * - final fields are not modified\n   * @throws {Error} if not valid\n   */\n  ;\n\n  _proto.validateChange = function validateChange(dataBefore, dataAfter) {\n    this.finalFields.forEach(function (fieldName) {\n      if (!deepEqual(dataBefore[fieldName], dataAfter[fieldName])) {\n        throw newRxError('DOC9', {\n          dataBefore: dataBefore,\n          dataAfter: dataAfter,\n          fieldName: fieldName\n        });\n      }\n    });\n  }\n  /**\n   * validate if the obj matches the schema\n   * @overwritten by plugin (required)\n   * @param schemaPath if given, validates agains deep-path of schema\n   * @throws {Error} if not valid\n   * @param obj equal to input-obj\n   */\n  ;\n\n  _proto.validate = function validate(_obj, _schemaPath) {\n    throw pluginMissing('validate');\n  }\n  /**\n   * fills all unset fields with default-values if set\n   */\n  ;\n\n  _proto.fillObjectWithDefaults = function fillObjectWithDefaults(obj) {\n    obj = clone(obj);\n    Object.entries(this.defaultValues).filter(function (_ref) {\n      var k = _ref[0];\n      return !obj.hasOwnProperty(k) || typeof obj[k] === 'undefined';\n    }).forEach(function (_ref2) {\n      var k = _ref2[0],\n          v = _ref2[1];\n      return obj[k] = v;\n    });\n    return obj;\n  };\n\n  _proto.swapIdToPrimary = function swapIdToPrimary(obj) {\n    if (this.primaryPath === '_id' || obj[this.primaryPath]) return obj;\n    obj[this.primaryPath] = obj._id;\n    delete obj._id;\n    return obj;\n  };\n\n  _proto.swapPrimaryToId = function swapPrimaryToId(obj) {\n    var _this = this;\n\n    if (this.primaryPath === '_id') return obj;\n    var ret = {};\n    Object.entries(obj).forEach(function (entry) {\n      var newKey = entry[0] === _this.primaryPath ? '_id' : entry[0];\n      ret[newKey] = entry[1];\n    });\n    return ret;\n  }\n  /**\n   * returns true if key-compression should be done\n   */\n  ;\n\n  _proto.doKeyCompression = function doKeyCompression() {\n    return this.jsonID.keyCompression;\n  };\n\n  _proto.getDocumentPrototype = function getDocumentPrototype() {\n    if (!this._getDocumentPrototype) {\n      var proto = {};\n      defineGetterSetter(this, proto, '');\n      this._getDocumentPrototype = proto;\n    }\n\n    return this._getDocumentPrototype;\n  };\n\n  _createClass(RxSchema, [{\n    key: \"version\",\n    get: function get() {\n      return this.jsonID.version;\n    }\n  }, {\n    key: \"crypt\",\n    get: function get() {\n      if (!this._crypt) this._crypt = hasCrypt(this.jsonID);\n      return this._crypt;\n    }\n  }, {\n    key: \"normalized\",\n    get: function get() {\n      if (!this._normalized) this._normalized = normalize(this.jsonID);\n      return this._normalized;\n    }\n  }, {\n    key: \"topLevelFields\",\n    get: function get() {\n      return Object.keys(this.normalized.properties);\n    }\n  }, {\n    key: \"defaultValues\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this._defaultValues) {\n        this._defaultValues = {};\n        Object.entries(this.normalized.properties).filter(function (_ref3) {\n          var v = _ref3[1];\n          return v.hasOwnProperty('default');\n        }).forEach(function (_ref4) {\n          var k = _ref4[0],\n              v = _ref4[1];\n          return _this2._defaultValues[k] = v[\"default\"];\n        });\n      }\n\n      return this._defaultValues;\n    }\n  }, {\n    key: \"encryptedPaths\",\n    get: function get() {\n      if (!this._encryptedPaths) this._encryptedPaths = getEncryptedPaths(this.jsonID);\n      return this._encryptedPaths;\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      if (!this._hash) this._hash = hash(this.normalized);\n      return this._hash;\n    }\n    /**\n     * true if schema contains at least one encrypted path\n     */\n\n  }]);\n\n  return RxSchema;\n}();\n/**\n * returns all encrypted paths of the schema\n */\n\nexport function getEncryptedPaths(jsonSchema) {\n  var ret = {};\n\n  function traverse(currentObj, currentPath) {\n    if (typeof currentObj !== 'object') return;\n\n    if (currentObj.encrypted) {\n      ret[currentPath.substring(1)] = currentObj;\n      return;\n    }\n\n    Object.keys(currentObj).forEach(function (attributeName) {\n      var nextPath = currentPath;\n      if (attributeName !== 'properties') nextPath = nextPath + '.' + attributeName;\n      traverse(currentObj[attributeName], nextPath);\n    });\n  }\n\n  traverse(jsonSchema.properties, '');\n  return ret;\n}\n/**\n * returns true if schema contains an encrypted field\n */\n\nexport function hasCrypt(jsonSchema) {\n  var paths = getEncryptedPaths(jsonSchema);\n  if (Object.keys(paths).length > 0) return true;else return false;\n}\nexport function getIndexes(jsonID) {\n  var flattened = flattenObject(jsonID);\n  var keys = Object.keys(flattened);\n  var indexes = keys // flattenObject returns only ending paths, we need all paths pointing to an object\n  .map(function (key) {\n    var splitted = key.split('.');\n    splitted.pop(); // all but last\n\n    return splitted.join('.');\n  }).filter(function (key) {\n    return key !== '';\n  }).filter(function (elem, pos, arr) {\n    return arr.indexOf(elem) === pos;\n  }) // unique\n  .filter(function (key) {\n    // check if this path defines an index\n    var value = objectPath.get(jsonID, key);\n    if (value.index) return true;else return false;\n  }).map(function (key) {\n    // replace inner properties\n    key = key.replace('properties.', ''); // first\n\n    key = key.replace(/\\.properties\\./g, '.'); // middle\n\n    return [trimDots(key)];\n  }); // add compound-indexes\n\n  var addCompound = jsonID.compoundIndexes || [];\n  indexes = indexes.concat(addCompound);\n  return indexes;\n}\n/**\n * returns the primary path of a jsonschema\n * @return primaryPath which is _id if none defined\n */\n\nexport function getPrimary(jsonID) {\n  var ret = Object.keys(jsonID.properties).filter(function (key) {\n    return jsonID.properties[key].primary;\n  }).shift();\n  if (!ret) return '_id';else return ret;\n}\n/**\n * array with previous version-numbers\n */\n\nexport function getPreviousVersions(schema) {\n  var version = schema.version ? schema.version : 0;\n  var c = 0;\n  return new Array(version).fill(0).map(function () {\n    return c++;\n  });\n}\n/**\n * returns the final-fields of the schema\n * @return field-names of the final-fields\n */\n\nexport function getFinalFields(jsonID) {\n  var ret = Object.keys(jsonID.properties).filter(function (key) {\n    return jsonID.properties[key][\"final\"];\n  }); // primary is also final\n\n  ret.push(getPrimary(jsonID));\n  return ret;\n}\n/**\n * orders the schemas attributes by alphabetical order\n * @return jsonSchema - ordered\n */\n\nexport function normalize(jsonSchema) {\n  return sortObject(clone(jsonSchema));\n}\n/**\n * fills the schema-json with default-settings\n * @return cloned schemaObj\n */\n\nvar fillWithDefaultSettings = function fillWithDefaultSettings(schemaObj) {\n  schemaObj = clone(schemaObj); // additionalProperties is always false\n\n  schemaObj.additionalProperties = false; // fill with key-compression-state ()\n\n  if (!schemaObj.hasOwnProperty('keyCompression')) schemaObj.keyCompression = false; // compoundIndexes must be array\n\n  schemaObj.compoundIndexes = schemaObj.compoundIndexes || []; // required must be array\n\n  schemaObj.required = schemaObj.required || []; // add _rev\n\n  schemaObj.properties._rev = {\n    type: 'string',\n    minLength: 1\n  }; // add attachments\n\n  schemaObj.properties._attachments = {\n    type: 'object'\n  }; // version is 0 by default\n\n  schemaObj.version = schemaObj.version || 0;\n  return schemaObj;\n};\n\nexport function createRxSchema(jsonID) {\n  var runPreCreateHooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (runPreCreateHooks) runPluginHooks('preCreateRxSchema', jsonID);\n  var schema = new RxSchema(fillWithDefaultSettings(jsonID));\n  runPluginHooks('createRxSchema', schema);\n  return schema;\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxSchema;\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/rx-schema.js"],"names":["_createClass","objectPath","deepEqual","clone","hash","sortObject","trimDots","flattenObject","pluginMissing","newRxError","runPluginHooks","defineGetterSetter","RxSchema","jsonID","compoundIndexes","indexes","getIndexes","primaryPath","getPrimary","required","push","finalFields","getFinalFields","concat","filter","elem","pos","arr","indexOf","properties","type","minLength","_proto","prototype","getSchemaByObjectPath","path","usePath","replace","ret","get","validateChange","dataBefore","dataAfter","forEach","fieldName","validate","_obj","_schemaPath","fillObjectWithDefaults","obj","Object","entries","defaultValues","_ref","k","hasOwnProperty","_ref2","v","swapIdToPrimary","_id","swapPrimaryToId","_this","entry","newKey","doKeyCompression","keyCompression","getDocumentPrototype","_getDocumentPrototype","proto","key","version","_crypt","hasCrypt","_normalized","normalize","keys","normalized","_this2","_defaultValues","_ref3","_ref4","_encryptedPaths","getEncryptedPaths","_hash","jsonSchema","traverse","currentObj","currentPath","encrypted","substring","attributeName","nextPath","paths","length","flattened","map","splitted","split","pop","join","value","index","addCompound","primary","shift","getPreviousVersions","schema","c","Array","fill","fillWithDefaultSettings","schemaObj","additionalProperties","_rev","_attachments","createRxSchema","runPreCreateHooks","arguments","undefined","isInstanceOf"],"mappings":"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","sourcesContent":["import _createClass from \"@babel/runtime/helpers/createClass\";\nimport objectPath from 'object-path';\nimport deepEqual from 'deep-equal';\nimport { clone, hash, sortObject, trimDots, flattenObject, pluginMissing } from './util';\nimport { newRxError } from './rx-error';\nimport { runPluginHooks } from './hooks';\nimport { defineGetterSetter } from './rx-document';\nexport var RxSchema = /*#__PURE__*/function () {\n  function RxSchema(jsonID) {\n    this.jsonID = jsonID;\n    this.compoundIndexes = this.jsonID.compoundIndexes;\n    this.indexes = getIndexes(this.jsonID); // primary is always required\n\n    this.primaryPath = getPrimary(this.jsonID);\n\n    if (this.primaryPath) {\n      this.jsonID.required.push(this.primaryPath);\n    } // final fields are always required\n\n\n    this.finalFields = getFinalFields(this.jsonID);\n    this.jsonID.required = this.jsonID.required.concat(this.finalFields).filter(function (elem, pos, arr) {\n      return arr.indexOf(elem) === pos;\n    }); // unique;\n    // add primary to schema if not there (if _id)\n\n    if (!this.jsonID.properties[this.primaryPath]) {\n      this.jsonID.properties[this.primaryPath] = {\n        type: 'string',\n        minLength: 1\n      };\n    }\n  }\n\n  var _proto = RxSchema.prototype;\n\n  _proto.getSchemaByObjectPath = function getSchemaByObjectPath(path) {\n    var usePath = path;\n    usePath = usePath.replace(/\\./g, '.properties.');\n    usePath = 'properties.' + usePath;\n    usePath = trimDots(usePath);\n    var ret = objectPath.get(this.jsonID, usePath);\n    return ret;\n  }\n  /**\n   * checks if a given change on a document is allowed\n   * Ensures that:\n   * - primary is not modified\n   * - final fields are not modified\n   * @throws {Error} if not valid\n   */\n  ;\n\n  _proto.validateChange = function validateChange(dataBefore, dataAfter) {\n    this.finalFields.forEach(function (fieldName) {\n      if (!deepEqual(dataBefore[fieldName], dataAfter[fieldName])) {\n        throw newRxError('DOC9', {\n          dataBefore: dataBefore,\n          dataAfter: dataAfter,\n          fieldName: fieldName\n        });\n      }\n    });\n  }\n  /**\n   * validate if the obj matches the schema\n   * @overwritten by plugin (required)\n   * @param schemaPath if given, validates agains deep-path of schema\n   * @throws {Error} if not valid\n   * @param obj equal to input-obj\n   */\n  ;\n\n  _proto.validate = function validate(_obj, _schemaPath) {\n    throw pluginMissing('validate');\n  }\n  /**\n   * fills all unset fields with default-values if set\n   */\n  ;\n\n  _proto.fillObjectWithDefaults = function fillObjectWithDefaults(obj) {\n    obj = clone(obj);\n    Object.entries(this.defaultValues).filter(function (_ref) {\n      var k = _ref[0];\n      return !obj.hasOwnProperty(k) || typeof obj[k] === 'undefined';\n    }).forEach(function (_ref2) {\n      var k = _ref2[0],\n          v = _ref2[1];\n      return obj[k] = v;\n    });\n    return obj;\n  };\n\n  _proto.swapIdToPrimary = function swapIdToPrimary(obj) {\n    if (this.primaryPath === '_id' || obj[this.primaryPath]) return obj;\n    obj[this.primaryPath] = obj._id;\n    delete obj._id;\n    return obj;\n  };\n\n  _proto.swapPrimaryToId = function swapPrimaryToId(obj) {\n    var _this = this;\n\n    if (this.primaryPath === '_id') return obj;\n    var ret = {};\n    Object.entries(obj).forEach(function (entry) {\n      var newKey = entry[0] === _this.primaryPath ? '_id' : entry[0];\n      ret[newKey] = entry[1];\n    });\n    return ret;\n  }\n  /**\n   * returns true if key-compression should be done\n   */\n  ;\n\n  _proto.doKeyCompression = function doKeyCompression() {\n    return this.jsonID.keyCompression;\n  };\n\n  _proto.getDocumentPrototype = function getDocumentPrototype() {\n    if (!this._getDocumentPrototype) {\n      var proto = {};\n      defineGetterSetter(this, proto, '');\n      this._getDocumentPrototype = proto;\n    }\n\n    return this._getDocumentPrototype;\n  };\n\n  _createClass(RxSchema, [{\n    key: \"version\",\n    get: function get() {\n      return this.jsonID.version;\n    }\n  }, {\n    key: \"crypt\",\n    get: function get() {\n      if (!this._crypt) this._crypt = hasCrypt(this.jsonID);\n      return this._crypt;\n    }\n  }, {\n    key: \"normalized\",\n    get: function get() {\n      if (!this._normalized) this._normalized = normalize(this.jsonID);\n      return this._normalized;\n    }\n  }, {\n    key: \"topLevelFields\",\n    get: function get() {\n      return Object.keys(this.normalized.properties);\n    }\n  }, {\n    key: \"defaultValues\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this._defaultValues) {\n        this._defaultValues = {};\n        Object.entries(this.normalized.properties).filter(function (_ref3) {\n          var v = _ref3[1];\n          return v.hasOwnProperty('default');\n        }).forEach(function (_ref4) {\n          var k = _ref4[0],\n              v = _ref4[1];\n          return _this2._defaultValues[k] = v[\"default\"];\n        });\n      }\n\n      return this._defaultValues;\n    }\n  }, {\n    key: \"encryptedPaths\",\n    get: function get() {\n      if (!this._encryptedPaths) this._encryptedPaths = getEncryptedPaths(this.jsonID);\n      return this._encryptedPaths;\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      if (!this._hash) this._hash = hash(this.normalized);\n      return this._hash;\n    }\n    /**\n     * true if schema contains at least one encrypted path\n     */\n\n  }]);\n\n  return RxSchema;\n}();\n/**\n * returns all encrypted paths of the schema\n */\n\nexport function getEncryptedPaths(jsonSchema) {\n  var ret = {};\n\n  function traverse(currentObj, currentPath) {\n    if (typeof currentObj !== 'object') return;\n\n    if (currentObj.encrypted) {\n      ret[currentPath.substring(1)] = currentObj;\n      return;\n    }\n\n    Object.keys(currentObj).forEach(function (attributeName) {\n      var nextPath = currentPath;\n      if (attributeName !== 'properties') nextPath = nextPath + '.' + attributeName;\n      traverse(currentObj[attributeName], nextPath);\n    });\n  }\n\n  traverse(jsonSchema.properties, '');\n  return ret;\n}\n/**\n * returns true if schema contains an encrypted field\n */\n\nexport function hasCrypt(jsonSchema) {\n  var paths = getEncryptedPaths(jsonSchema);\n  if (Object.keys(paths).length > 0) return true;else return false;\n}\nexport function getIndexes(jsonID) {\n  var flattened = flattenObject(jsonID);\n  var keys = Object.keys(flattened);\n  var indexes = keys // flattenObject returns only ending paths, we need all paths pointing to an object\n  .map(function (key) {\n    var splitted = key.split('.');\n    splitted.pop(); // all but last\n\n    return splitted.join('.');\n  }).filter(function (key) {\n    return key !== '';\n  }).filter(function (elem, pos, arr) {\n    return arr.indexOf(elem) === pos;\n  }) // unique\n  .filter(function (key) {\n    // check if this path defines an index\n    var value = objectPath.get(jsonID, key);\n    if (value.index) return true;else return false;\n  }).map(function (key) {\n    // replace inner properties\n    key = key.replace('properties.', ''); // first\n\n    key = key.replace(/\\.properties\\./g, '.'); // middle\n\n    return [trimDots(key)];\n  }); // add compound-indexes\n\n  var addCompound = jsonID.compoundIndexes || [];\n  indexes = indexes.concat(addCompound);\n  return indexes;\n}\n/**\n * returns the primary path of a jsonschema\n * @return primaryPath which is _id if none defined\n */\n\nexport function getPrimary(jsonID) {\n  var ret = Object.keys(jsonID.properties).filter(function (key) {\n    return jsonID.properties[key].primary;\n  }).shift();\n  if (!ret) return '_id';else return ret;\n}\n/**\n * array with previous version-numbers\n */\n\nexport function getPreviousVersions(schema) {\n  var version = schema.version ? schema.version : 0;\n  var c = 0;\n  return new Array(version).fill(0).map(function () {\n    return c++;\n  });\n}\n/**\n * returns the final-fields of the schema\n * @return field-names of the final-fields\n */\n\nexport function getFinalFields(jsonID) {\n  var ret = Object.keys(jsonID.properties).filter(function (key) {\n    return jsonID.properties[key][\"final\"];\n  }); // primary is also final\n\n  ret.push(getPrimary(jsonID));\n  return ret;\n}\n/**\n * orders the schemas attributes by alphabetical order\n * @return jsonSchema - ordered\n */\n\nexport function normalize(jsonSchema) {\n  return sortObject(clone(jsonSchema));\n}\n/**\n * fills the schema-json with default-settings\n * @return cloned schemaObj\n */\n\nvar fillWithDefaultSettings = function fillWithDefaultSettings(schemaObj) {\n  schemaObj = clone(schemaObj); // additionalProperties is always false\n\n  schemaObj.additionalProperties = false; // fill with key-compression-state ()\n\n  if (!schemaObj.hasOwnProperty('keyCompression')) schemaObj.keyCompression = false; // compoundIndexes must be array\n\n  schemaObj.compoundIndexes = schemaObj.compoundIndexes || []; // required must be array\n\n  schemaObj.required = schemaObj.required || []; // add _rev\n\n  schemaObj.properties._rev = {\n    type: 'string',\n    minLength: 1\n  }; // add attachments\n\n  schemaObj.properties._attachments = {\n    type: 'object'\n  }; // version is 0 by default\n\n  schemaObj.version = schemaObj.version || 0;\n  return schemaObj;\n};\n\nexport function createRxSchema(jsonID) {\n  var runPreCreateHooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (runPreCreateHooks) runPluginHooks('preCreateRxSchema', jsonID);\n  var schema = new RxSchema(fillWithDefaultSettings(jsonID));\n  runPluginHooks('createRxSchema', schema);\n  return schema;\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxSchema;\n}\n//# sourceMappingURL=rx-schema.js.map"]},"metadata":{},"sourceType":"module"}