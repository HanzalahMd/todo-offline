{"ast":null,"code":"/**\n * this is based on\n * @link https://github.com/aheckmann/mquery/blob/master/lib/mquery.js\n */\nimport { isObject, merge as _merge } from './mquery-utils';\nimport { newRxTypeError, newRxError } from '../../../rx-error';\nexport var NoSqlQueryBuilderClass =\n/*#__PURE__*/\nfunction () {\n  /**\n   * MQuery constructor used for building queries.\n   *\n   * ####Example:\n   *     var query = new MQuery({ name: 'mquery' });\n   *     query.where('age').gte(21).exec(callback);\n   *\n   */\n  function NoSqlQueryBuilderClass(mangoQuery) {\n    this.options = {};\n    this._conditions = {};\n    this._fields = {};\n\n    if (mangoQuery) {\n      var queryBuilder = this;\n\n      if (mangoQuery.selector) {\n        queryBuilder.find(mangoQuery.selector);\n      }\n\n      if (mangoQuery.limit) {\n        queryBuilder.limit(mangoQuery.limit);\n      }\n\n      if (mangoQuery.skip) {\n        queryBuilder.skip(mangoQuery.skip);\n      }\n\n      if (mangoQuery.sort) {\n        mangoQuery.sort.forEach(function (s) {\n          return queryBuilder.sort(s);\n        });\n      }\n    }\n  }\n  /**\n   * Specifies a `path` for use with chaining.\n   */\n\n\n  var _proto = NoSqlQueryBuilderClass.prototype;\n\n  _proto.where = function where(_path, _val) {\n    if (!arguments.length) return this;\n    var type = typeof arguments[0];\n\n    if ('string' === type) {\n      this._path = arguments[0];\n\n      if (2 === arguments.length) {\n        this._conditions[this._path] = arguments[1];\n      }\n\n      return this;\n    }\n\n    if ('object' === type && !Array.isArray(arguments[0])) {\n      return this.merge(arguments[0]);\n    }\n\n    throw newRxTypeError('MQ1', {\n      path: arguments[0]\n    });\n  }\n  /**\n   * Specifies the complementary comparison value for paths specified with `where()`\n   * ####Example\n   *     User.where('age').equals(49);\n   */\n  ;\n\n  _proto.equals = function equals(val) {\n    this._ensurePath('equals');\n\n    var path = this._path;\n    this._conditions[path] = val;\n    return this;\n  }\n  /**\n   * Specifies the complementary comparison value for paths specified with `where()`\n   * This is alias of `equals`\n   */\n  ;\n\n  _proto.eq = function eq(val) {\n    this._ensurePath('eq');\n\n    var path = this._path;\n    this._conditions[path] = val;\n    return this;\n  }\n  /**\n   * Specifies arguments for an `$or` condition.\n   * ####Example\n   *     query.or([{ color: 'red' }, { status: 'emergency' }])\n   */\n  ;\n\n  _proto.or = function or(array) {\n    var or = this._conditions.$or || (this._conditions.$or = []);\n    if (!Array.isArray(array)) array = [array];\n    or.push.apply(or, array);\n    return this;\n  }\n  /**\n   * Specifies arguments for a `$nor` condition.\n   * ####Example\n   *     query.nor([{ color: 'green' }, { status: 'ok' }])\n   */\n  ;\n\n  _proto.nor = function nor(array) {\n    var nor = this._conditions.$nor || (this._conditions.$nor = []);\n    if (!Array.isArray(array)) array = [array];\n    nor.push.apply(nor, array);\n    return this;\n  }\n  /**\n   * Specifies arguments for a `$and` condition.\n   * ####Example\n   *     query.and([{ color: 'green' }, { status: 'ok' }])\n   * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n   */\n  ;\n\n  _proto.and = function and(array) {\n    var and = this._conditions.$and || (this._conditions.$and = []);\n    if (!Array.isArray(array)) array = [array];\n    and.push.apply(and, array);\n    return this;\n  }\n  /**\n   * Specifies a `$mod` condition\n   */\n  ;\n\n  _proto.mod = function mod(_path, _val) {\n    var val;\n    var path;\n\n    if (1 === arguments.length) {\n      this._ensurePath('mod');\n\n      val = arguments[0];\n      path = this._path;\n    } else if (2 === arguments.length && !Array.isArray(arguments[1])) {\n      this._ensurePath('mod');\n\n      val = arguments.slice();\n      path = this._path;\n    } else if (3 === arguments.length) {\n      val = arguments.slice(1);\n      path = arguments[0];\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$mod = val;\n    return this;\n  }\n  /**\n   * Specifies an `$exists` condition\n   * ####Example\n   *     // { name: { $exists: true }}\n   *     Thing.where('name').exists()\n   *     Thing.where('name').exists(true)\n   *     Thing.find().exists('name')\n   */\n  ;\n\n  _proto.exists = function exists(_path, _val) {\n    var path;\n    var val;\n\n    if (0 === arguments.length) {\n      this._ensurePath('exists');\n\n      path = this._path;\n      val = true;\n    } else if (1 === arguments.length) {\n      if ('boolean' === typeof arguments[0]) {\n        this._ensurePath('exists');\n\n        path = this._path;\n        val = arguments[0];\n      } else {\n        path = arguments[0];\n        val = true;\n      }\n    } else if (2 === arguments.length) {\n      path = arguments[0];\n      val = arguments[1];\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$exists = val;\n    return this;\n  }\n  /**\n   * Specifies an `$elemMatch` condition\n   * ####Example\n   *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n   *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n   *     query.elemMatch('comment', function (elem) {\n   *       elem.where('author').equals('autobot');\n   *       elem.where('votes').gte(5);\n   *     })\n   *     query.where('comment').elemMatch(function (elem) {\n   *       elem.where({ author: 'autobot' });\n   *       elem.where('votes').gte(5);\n   *     })\n   */\n  ;\n\n  _proto.elemMatch = function elemMatch(_path, _criteria) {\n    if (null === arguments[0]) throw newRxTypeError('MQ2');\n    var fn;\n    var path;\n    var criteria;\n\n    if ('function' === typeof arguments[0]) {\n      this._ensurePath('elemMatch');\n\n      path = this._path;\n      fn = arguments[0];\n    } else if (isObject(arguments[0])) {\n      this._ensurePath('elemMatch');\n\n      path = this._path;\n      criteria = arguments[0];\n    } else if ('function' === typeof arguments[1]) {\n      path = arguments[0];\n      fn = arguments[1];\n    } else if (arguments[1] && isObject(arguments[1])) {\n      path = arguments[0];\n      criteria = arguments[1];\n    } else throw newRxTypeError('MQ2');\n\n    if (fn) {\n      criteria = new NoSqlQueryBuilderClass();\n      fn(criteria);\n      criteria = criteria._conditions;\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$elemMatch = criteria;\n    return this;\n  }\n  /**\n   * Sets the sort order\n   * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n   * If a string is passed, it must be a space delimited list of path names.\n   * The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n   * ####Example\n   *     query.sort({ field: 'asc', test: -1 });\n   *     query.sort('field -test');\n   *     query.sort([['field', 1], ['test', -1]]);\n   */\n  ;\n\n  _proto.sort = function sort(arg) {\n    var _this = this;\n\n    if (!arg) return this;\n    var len;\n    var type = typeof arg; // .sort([['field', 1], ['test', -1]])\n\n    if (Array.isArray(arg)) {\n      len = arg.length;\n\n      for (var i = 0; i < arg.length; ++i) {\n        _pushArr(this.options, arg[i][0], arg[i][1]);\n      }\n\n      return this;\n    } // .sort('field -test')\n\n\n    if (1 === arguments.length && 'string' === type) {\n      arg = arg.split(/\\s+/);\n      len = arg.length;\n\n      for (var _i = 0; _i < len; ++_i) {\n        var field = arg[_i];\n        if (!field) continue;\n        var ascend = '-' === field[0] ? -1 : 1;\n        if (ascend === -1) field = field.substring(1);\n        push(this.options, field, ascend);\n      }\n\n      return this;\n    } // .sort({ field: 1, test: -1 })\n\n\n    if (isObject(arg)) {\n      var keys = Object.keys(arg);\n      keys.forEach(function (field) {\n        return push(_this.options, field, arg[field]);\n      });\n      return this;\n    }\n\n    throw newRxTypeError('MQ3', {\n      args: arguments\n    });\n  }\n  /**\n   * Merges another MQuery or conditions object into this one.\n   *\n   * When a MQuery is passed, conditions, field selection and options are merged.\n   *\n   */\n  ;\n\n  _proto.merge = function merge(source) {\n    if (!source) {\n      return this;\n    }\n\n    if (!canMerge(source)) {\n      throw newRxTypeError('MQ4', {\n        source: source\n      });\n    }\n\n    if (source instanceof NoSqlQueryBuilderClass) {\n      // if source has a feature, apply it to ourselves\n      if (source._conditions) _merge(this._conditions, source._conditions);\n\n      if (source._fields) {\n        if (!this._fields) this._fields = {};\n\n        _merge(this._fields, source._fields);\n      }\n\n      if (source.options) {\n        if (!this.options) this.options = {};\n\n        _merge(this.options, source.options);\n      }\n\n      if (source._distinct) this._distinct = source._distinct;\n      return this;\n    } // plain object\n\n\n    _merge(this._conditions, source);\n\n    return this;\n  }\n  /**\n   * Finds documents.\n   * ####Example\n   *     query.find()\n   *     query.find({ name: 'Burning Lights' })\n   */\n  ;\n\n  _proto.find = function find(criteria) {\n    if (canMerge(criteria)) {\n      this.merge(criteria);\n    }\n\n    return this;\n  }\n  /**\n   * Make sure _path is set.\n   *\n   * @parmam {String} method\n   */\n  ;\n\n  _proto._ensurePath = function _ensurePath(method) {\n    if (!this._path) {\n      throw newRxError('MQ5', {\n        method: method\n      });\n    }\n  };\n\n  _proto.toJSON = function toJSON() {\n    var query = {\n      selector: this._conditions\n    };\n\n    if (this.options.skip) {\n      query.skip = this.options.skip;\n    }\n\n    if (this.options.limit) {\n      query.limit = this.options.limit;\n    }\n\n    if (this.options.sort) {\n      query.sort = mQuerySortToRxDBSort(this.options.sort);\n    }\n\n    return {\n      query: query,\n      path: this._path\n    };\n  };\n\n  return NoSqlQueryBuilderClass;\n}();\nexport function mQuerySortToRxDBSort(sort) {\n  return Object.entries(sort).map(function (_ref) {\n    var _part;\n\n    var k = _ref[0],\n        v = _ref[1];\n    var direction = v === 1 ? 'asc' : 'desc';\n    var part = (_part = {}, _part[k] = direction, _part);\n    return part;\n  });\n}\n/**\n * Because some prototype-methods are generated,\n * we have to define the type of NoSqlQueryBuilder here\n */\n\n/**\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n\nexport var OTHER_MANGO_ATTRIBUTES = ['limit', 'skip', 'maxScan', 'batchSize', 'comment'];\nOTHER_MANGO_ATTRIBUTES.forEach(function (method) {\n  NoSqlQueryBuilderClass.prototype[method] = function (v) {\n    this.options[method] = v;\n    return this;\n  };\n});\n/**\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\nexport var OTHER_MANGO_OPERATORS = ['gt', 'gte', 'lt', 'lte', 'ne', 'in', 'nin', 'all', 'regex', 'size'];\nOTHER_MANGO_OPERATORS.forEach(function ($conditional) {\n  NoSqlQueryBuilderClass.prototype[$conditional] = function () {\n    var path;\n    var val;\n\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ? this._conditions[path] : this._conditions[path] = {};\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw newRxTypeError('MQ6', {\n      opts: opts,\n      field: field,\n      value: value\n    });\n  }\n\n  if (value && value.$meta) {\n    var sort = opts.sort || (opts.sort = {});\n    sort[field] = {\n      $meta: value.$meta\n    };\n    return;\n  }\n\n  var val = String(value || 1).toLowerCase();\n\n  if (!/^(?:ascending|asc|descending|desc|1|-1)$/.test(val)) {\n    if (Array.isArray(value)) value = '[' + value + ']';\n    throw newRxTypeError('MQ7', {\n      field: field,\n      value: value\n    });\n  } // store `sort` in a sane format\n\n\n  var s = opts.sort || (opts.sort = {});\n  var valueStr = value.toString().replace('asc', '1').replace('ascending', '1').replace('desc', '-1').replace('descending', '-1');\n  s[field] = parseInt(valueStr, 10);\n}\n\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n\n  if (!Array.isArray(opts.sort)) {\n    throw newRxTypeError('MQ8', {\n      opts: opts,\n      field: field,\n      value: value\n    });\n  }\n  /*    const valueStr = value.toString()\n          .replace('asc', '1')\n          .replace('ascending', '1')\n          .replace('desc', '-1')\n          .replace('descending', '-1');*/\n\n\n  opts.sort.push([field, value]);\n}\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n */\n\n\nexport function canMerge(conds) {\n  return conds instanceof NoSqlQueryBuilderClass || isObject(conds);\n}\nexport function createQueryBuilder(query) {\n  return new NoSqlQueryBuilderClass(query);\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/query-builder/mquery/nosql-query-builder.js"],"names":["isObject","merge","_merge","newRxTypeError","newRxError","NoSqlQueryBuilderClass","mangoQuery","options","_conditions","_fields","queryBuilder","selector","find","limit","skip","sort","forEach","s","_proto","prototype","where","_path","_val","arguments","length","type","Array","isArray","path","equals","val","_ensurePath","eq","or","array","$or","push","apply","nor","$nor","and","$and","mod","slice","conds","$mod","exists","$exists","elemMatch","_criteria","fn","criteria","$elemMatch","arg","_this","len","i","_pushArr","split","_i","field","ascend","substring","keys","Object","args","source","canMerge","_distinct","method","toJSON","query","mQuerySortToRxDBSort","entries","map","_ref","_part","k","v","direction","part","OTHER_MANGO_ATTRIBUTES","OTHER_MANGO_OPERATORS","$conditional","opts","value","$meta","String","toLowerCase","test","valueStr","toString","replace","parseInt","createQueryBuilder"],"mappings":"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","sourcesContent":["/**\n * this is based on\n * @link https://github.com/aheckmann/mquery/blob/master/lib/mquery.js\n */\nimport { isObject, merge as _merge } from './mquery-utils';\nimport { newRxTypeError, newRxError } from '../../../rx-error';\nexport var NoSqlQueryBuilderClass = /*#__PURE__*/function () {\n  /**\n   * MQuery constructor used for building queries.\n   *\n   * ####Example:\n   *     var query = new MQuery({ name: 'mquery' });\n   *     query.where('age').gte(21).exec(callback);\n   *\n   */\n  function NoSqlQueryBuilderClass(mangoQuery) {\n    this.options = {};\n    this._conditions = {};\n    this._fields = {};\n\n    if (mangoQuery) {\n      var queryBuilder = this;\n\n      if (mangoQuery.selector) {\n        queryBuilder.find(mangoQuery.selector);\n      }\n\n      if (mangoQuery.limit) {\n        queryBuilder.limit(mangoQuery.limit);\n      }\n\n      if (mangoQuery.skip) {\n        queryBuilder.skip(mangoQuery.skip);\n      }\n\n      if (mangoQuery.sort) {\n        mangoQuery.sort.forEach(function (s) {\n          return queryBuilder.sort(s);\n        });\n      }\n    }\n  }\n  /**\n   * Specifies a `path` for use with chaining.\n   */\n\n\n  var _proto = NoSqlQueryBuilderClass.prototype;\n\n  _proto.where = function where(_path, _val) {\n    if (!arguments.length) return this;\n    var type = typeof arguments[0];\n\n    if ('string' === type) {\n      this._path = arguments[0];\n\n      if (2 === arguments.length) {\n        this._conditions[this._path] = arguments[1];\n      }\n\n      return this;\n    }\n\n    if ('object' === type && !Array.isArray(arguments[0])) {\n      return this.merge(arguments[0]);\n    }\n\n    throw newRxTypeError('MQ1', {\n      path: arguments[0]\n    });\n  }\n  /**\n   * Specifies the complementary comparison value for paths specified with `where()`\n   * ####Example\n   *     User.where('age').equals(49);\n   */\n  ;\n\n  _proto.equals = function equals(val) {\n    this._ensurePath('equals');\n\n    var path = this._path;\n    this._conditions[path] = val;\n    return this;\n  }\n  /**\n   * Specifies the complementary comparison value for paths specified with `where()`\n   * This is alias of `equals`\n   */\n  ;\n\n  _proto.eq = function eq(val) {\n    this._ensurePath('eq');\n\n    var path = this._path;\n    this._conditions[path] = val;\n    return this;\n  }\n  /**\n   * Specifies arguments for an `$or` condition.\n   * ####Example\n   *     query.or([{ color: 'red' }, { status: 'emergency' }])\n   */\n  ;\n\n  _proto.or = function or(array) {\n    var or = this._conditions.$or || (this._conditions.$or = []);\n    if (!Array.isArray(array)) array = [array];\n    or.push.apply(or, array);\n    return this;\n  }\n  /**\n   * Specifies arguments for a `$nor` condition.\n   * ####Example\n   *     query.nor([{ color: 'green' }, { status: 'ok' }])\n   */\n  ;\n\n  _proto.nor = function nor(array) {\n    var nor = this._conditions.$nor || (this._conditions.$nor = []);\n    if (!Array.isArray(array)) array = [array];\n    nor.push.apply(nor, array);\n    return this;\n  }\n  /**\n   * Specifies arguments for a `$and` condition.\n   * ####Example\n   *     query.and([{ color: 'green' }, { status: 'ok' }])\n   * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n   */\n  ;\n\n  _proto.and = function and(array) {\n    var and = this._conditions.$and || (this._conditions.$and = []);\n    if (!Array.isArray(array)) array = [array];\n    and.push.apply(and, array);\n    return this;\n  }\n  /**\n   * Specifies a `$mod` condition\n   */\n  ;\n\n  _proto.mod = function mod(_path, _val) {\n    var val;\n    var path;\n\n    if (1 === arguments.length) {\n      this._ensurePath('mod');\n\n      val = arguments[0];\n      path = this._path;\n    } else if (2 === arguments.length && !Array.isArray(arguments[1])) {\n      this._ensurePath('mod');\n\n      val = arguments.slice();\n      path = this._path;\n    } else if (3 === arguments.length) {\n      val = arguments.slice(1);\n      path = arguments[0];\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$mod = val;\n    return this;\n  }\n  /**\n   * Specifies an `$exists` condition\n   * ####Example\n   *     // { name: { $exists: true }}\n   *     Thing.where('name').exists()\n   *     Thing.where('name').exists(true)\n   *     Thing.find().exists('name')\n   */\n  ;\n\n  _proto.exists = function exists(_path, _val) {\n    var path;\n    var val;\n\n    if (0 === arguments.length) {\n      this._ensurePath('exists');\n\n      path = this._path;\n      val = true;\n    } else if (1 === arguments.length) {\n      if ('boolean' === typeof arguments[0]) {\n        this._ensurePath('exists');\n\n        path = this._path;\n        val = arguments[0];\n      } else {\n        path = arguments[0];\n        val = true;\n      }\n    } else if (2 === arguments.length) {\n      path = arguments[0];\n      val = arguments[1];\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$exists = val;\n    return this;\n  }\n  /**\n   * Specifies an `$elemMatch` condition\n   * ####Example\n   *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n   *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n   *     query.elemMatch('comment', function (elem) {\n   *       elem.where('author').equals('autobot');\n   *       elem.where('votes').gte(5);\n   *     })\n   *     query.where('comment').elemMatch(function (elem) {\n   *       elem.where({ author: 'autobot' });\n   *       elem.where('votes').gte(5);\n   *     })\n   */\n  ;\n\n  _proto.elemMatch = function elemMatch(_path, _criteria) {\n    if (null === arguments[0]) throw newRxTypeError('MQ2');\n    var fn;\n    var path;\n    var criteria;\n\n    if ('function' === typeof arguments[0]) {\n      this._ensurePath('elemMatch');\n\n      path = this._path;\n      fn = arguments[0];\n    } else if (isObject(arguments[0])) {\n      this._ensurePath('elemMatch');\n\n      path = this._path;\n      criteria = arguments[0];\n    } else if ('function' === typeof arguments[1]) {\n      path = arguments[0];\n      fn = arguments[1];\n    } else if (arguments[1] && isObject(arguments[1])) {\n      path = arguments[0];\n      criteria = arguments[1];\n    } else throw newRxTypeError('MQ2');\n\n    if (fn) {\n      criteria = new NoSqlQueryBuilderClass();\n      fn(criteria);\n      criteria = criteria._conditions;\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$elemMatch = criteria;\n    return this;\n  }\n  /**\n   * Sets the sort order\n   * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n   * If a string is passed, it must be a space delimited list of path names.\n   * The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n   * ####Example\n   *     query.sort({ field: 'asc', test: -1 });\n   *     query.sort('field -test');\n   *     query.sort([['field', 1], ['test', -1]]);\n   */\n  ;\n\n  _proto.sort = function sort(arg) {\n    var _this = this;\n\n    if (!arg) return this;\n    var len;\n    var type = typeof arg; // .sort([['field', 1], ['test', -1]])\n\n    if (Array.isArray(arg)) {\n      len = arg.length;\n\n      for (var i = 0; i < arg.length; ++i) {\n        _pushArr(this.options, arg[i][0], arg[i][1]);\n      }\n\n      return this;\n    } // .sort('field -test')\n\n\n    if (1 === arguments.length && 'string' === type) {\n      arg = arg.split(/\\s+/);\n      len = arg.length;\n\n      for (var _i = 0; _i < len; ++_i) {\n        var field = arg[_i];\n        if (!field) continue;\n        var ascend = '-' === field[0] ? -1 : 1;\n        if (ascend === -1) field = field.substring(1);\n        push(this.options, field, ascend);\n      }\n\n      return this;\n    } // .sort({ field: 1, test: -1 })\n\n\n    if (isObject(arg)) {\n      var keys = Object.keys(arg);\n      keys.forEach(function (field) {\n        return push(_this.options, field, arg[field]);\n      });\n      return this;\n    }\n\n    throw newRxTypeError('MQ3', {\n      args: arguments\n    });\n  }\n  /**\n   * Merges another MQuery or conditions object into this one.\n   *\n   * When a MQuery is passed, conditions, field selection and options are merged.\n   *\n   */\n  ;\n\n  _proto.merge = function merge(source) {\n    if (!source) {\n      return this;\n    }\n\n    if (!canMerge(source)) {\n      throw newRxTypeError('MQ4', {\n        source: source\n      });\n    }\n\n    if (source instanceof NoSqlQueryBuilderClass) {\n      // if source has a feature, apply it to ourselves\n      if (source._conditions) _merge(this._conditions, source._conditions);\n\n      if (source._fields) {\n        if (!this._fields) this._fields = {};\n\n        _merge(this._fields, source._fields);\n      }\n\n      if (source.options) {\n        if (!this.options) this.options = {};\n\n        _merge(this.options, source.options);\n      }\n\n      if (source._distinct) this._distinct = source._distinct;\n      return this;\n    } // plain object\n\n\n    _merge(this._conditions, source);\n\n    return this;\n  }\n  /**\n   * Finds documents.\n   * ####Example\n   *     query.find()\n   *     query.find({ name: 'Burning Lights' })\n   */\n  ;\n\n  _proto.find = function find(criteria) {\n    if (canMerge(criteria)) {\n      this.merge(criteria);\n    }\n\n    return this;\n  }\n  /**\n   * Make sure _path is set.\n   *\n   * @parmam {String} method\n   */\n  ;\n\n  _proto._ensurePath = function _ensurePath(method) {\n    if (!this._path) {\n      throw newRxError('MQ5', {\n        method: method\n      });\n    }\n  };\n\n  _proto.toJSON = function toJSON() {\n    var query = {\n      selector: this._conditions\n    };\n\n    if (this.options.skip) {\n      query.skip = this.options.skip;\n    }\n\n    if (this.options.limit) {\n      query.limit = this.options.limit;\n    }\n\n    if (this.options.sort) {\n      query.sort = mQuerySortToRxDBSort(this.options.sort);\n    }\n\n    return {\n      query: query,\n      path: this._path\n    };\n  };\n\n  return NoSqlQueryBuilderClass;\n}();\nexport function mQuerySortToRxDBSort(sort) {\n  return Object.entries(sort).map(function (_ref) {\n    var _part;\n\n    var k = _ref[0],\n        v = _ref[1];\n    var direction = v === 1 ? 'asc' : 'desc';\n    var part = (_part = {}, _part[k] = direction, _part);\n    return part;\n  });\n}\n/**\n * Because some prototype-methods are generated,\n * we have to define the type of NoSqlQueryBuilder here\n */\n\n/**\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\nexport var OTHER_MANGO_ATTRIBUTES = ['limit', 'skip', 'maxScan', 'batchSize', 'comment'];\nOTHER_MANGO_ATTRIBUTES.forEach(function (method) {\n  NoSqlQueryBuilderClass.prototype[method] = function (v) {\n    this.options[method] = v;\n    return this;\n  };\n});\n/**\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\nexport var OTHER_MANGO_OPERATORS = ['gt', 'gte', 'lt', 'lte', 'ne', 'in', 'nin', 'all', 'regex', 'size'];\nOTHER_MANGO_OPERATORS.forEach(function ($conditional) {\n  NoSqlQueryBuilderClass.prototype[$conditional] = function () {\n    var path;\n    var val;\n\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ? this._conditions[path] : this._conditions[path] = {};\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw newRxTypeError('MQ6', {\n      opts: opts,\n      field: field,\n      value: value\n    });\n  }\n\n  if (value && value.$meta) {\n    var sort = opts.sort || (opts.sort = {});\n    sort[field] = {\n      $meta: value.$meta\n    };\n    return;\n  }\n\n  var val = String(value || 1).toLowerCase();\n\n  if (!/^(?:ascending|asc|descending|desc|1|-1)$/.test(val)) {\n    if (Array.isArray(value)) value = '[' + value + ']';\n    throw newRxTypeError('MQ7', {\n      field: field,\n      value: value\n    });\n  } // store `sort` in a sane format\n\n\n  var s = opts.sort || (opts.sort = {});\n  var valueStr = value.toString().replace('asc', '1').replace('ascending', '1').replace('desc', '-1').replace('descending', '-1');\n  s[field] = parseInt(valueStr, 10);\n}\n\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n\n  if (!Array.isArray(opts.sort)) {\n    throw newRxTypeError('MQ8', {\n      opts: opts,\n      field: field,\n      value: value\n    });\n  }\n  /*    const valueStr = value.toString()\n          .replace('asc', '1')\n          .replace('ascending', '1')\n          .replace('desc', '-1')\n          .replace('descending', '-1');*/\n\n\n  opts.sort.push([field, value]);\n}\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n */\n\n\nexport function canMerge(conds) {\n  return conds instanceof NoSqlQueryBuilderClass || isObject(conds);\n}\nexport function createQueryBuilder(query) {\n  return new NoSqlQueryBuilderClass(query);\n}\n//# sourceMappingURL=nosql-query-builder.js.map"]},"metadata":{},"sourceType":"module"}