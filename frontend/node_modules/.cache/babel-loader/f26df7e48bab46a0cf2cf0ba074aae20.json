{"ast":null,"code":"/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\nimport { newRxTypeError, newRxError } from '../rx-error';\nvar minPassLength = 8;\nexport function encrypt(value, password) {\n  var encrypted = AES.encrypt(value, password);\n  return encrypted.toString();\n}\nexport function decrypt(cipherText, password) {\n  var decrypted = AES.decrypt(cipherText, password);\n  return decrypted.toString(cryptoEnc);\n}\n\nvar _encryptValue = function _encryptValue(value) {\n  return encrypt(JSON.stringify(value), this.password);\n};\n\nvar _decryptValue = function _decryptValue(encryptedValue) {\n  var decrypted = decrypt(encryptedValue, this.password);\n  return JSON.parse(decrypted);\n};\n\nexport var rxdb = true;\nexport var prototypes = {\n  /**\n   * set crypto-functions for the Crypter.prototype\n   */\n  Crypter: function Crypter(proto) {\n    proto._encryptValue = _encryptValue;\n    proto._decryptValue = _decryptValue;\n  }\n};\nexport var overwritable = {\n  validatePassword: function validatePassword(password) {\n    if (password && typeof password !== 'string') {\n      throw newRxTypeError('EN1', {\n        password: password\n      });\n    }\n\n    if (password && password.length < minPassLength) {\n      throw newRxError('EN2', {\n        minPassLength: minPassLength,\n        password: password\n      });\n    }\n  }\n};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/encryption.js"],"names":["AES","cryptoEnc","newRxTypeError","newRxError","minPassLength","encrypt","value","password","encrypted","toString","decrypt","cipherText","decrypted","_encryptValue","JSON","stringify","_decryptValue","encryptedValue","parse","rxdb","prototypes","Crypter","proto","overwritable","validatePassword","length"],"mappings":"AAAA;;;;;AAKA,OAAOA,GAAP,MAAgB,eAAhB;AACA,OAAO,KAAKC,SAAZ,MAA2B,oBAA3B;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,aAA3C;AACA,IAAIC,aAAa,GAAG,CAApB;AACA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,QAAxB,EAAkC;AACvC,MAAIC,SAAS,GAAGR,GAAG,CAACK,OAAJ,CAAYC,KAAZ,EAAmBC,QAAnB,CAAhB;AACA,SAAOC,SAAS,CAACC,QAAV,EAAP;AACD;AACD,OAAO,SAASC,OAAT,CAAiBC,UAAjB,EAA6BJ,QAA7B,EAAuC;AAC5C,MAAIK,SAAS,GAAGZ,GAAG,CAACU,OAAJ,CAAYC,UAAZ,EAAwBJ,QAAxB,CAAhB;AACA,SAAOK,SAAS,CAACH,QAAV,CAAmBR,SAAnB,CAAP;AACD;;AAED,IAAIY,aAAa,GAAG,SAASA,aAAT,CAAuBP,KAAvB,EAA8B;AAChD,SAAOD,OAAO,CAACS,IAAI,CAACC,SAAL,CAAeT,KAAf,CAAD,EAAwB,KAAKC,QAA7B,CAAd;AACD,CAFD;;AAIA,IAAIS,aAAa,GAAG,SAASA,aAAT,CAAuBC,cAAvB,EAAuC;AACzD,MAAIL,SAAS,GAAGF,OAAO,CAACO,cAAD,EAAiB,KAAKV,QAAtB,CAAvB;AACA,SAAOO,IAAI,CAACI,KAAL,CAAWN,SAAX,CAAP;AACD,CAHD;;AAKA,OAAO,IAAIO,IAAI,GAAG,IAAX;AACP,OAAO,IAAIC,UAAU,GAAG;AACtB;;;AAGAC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AAC/BA,IAAAA,KAAK,CAACT,aAAN,GAAsBA,aAAtB;AACAS,IAAAA,KAAK,CAACN,aAAN,GAAsBA,aAAtB;AACD;AAPqB,CAAjB;AASP,OAAO,IAAIO,YAAY,GAAG;AACxBC,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BjB,QAA1B,EAAoC;AACpD,QAAIA,QAAQ,IAAI,OAAOA,QAAP,KAAoB,QAApC,EAA8C;AAC5C,YAAML,cAAc,CAAC,KAAD,EAAQ;AAC1BK,QAAAA,QAAQ,EAAEA;AADgB,OAAR,CAApB;AAGD;;AAED,QAAIA,QAAQ,IAAIA,QAAQ,CAACkB,MAAT,GAAkBrB,aAAlC,EAAiD;AAC/C,YAAMD,UAAU,CAAC,KAAD,EAAQ;AACtBC,QAAAA,aAAa,EAAEA,aADO;AAEtBG,QAAAA,QAAQ,EAAEA;AAFY,OAAR,CAAhB;AAID;AACF;AAduB,CAAnB;AAgBP,eAAe;AACbY,EAAAA,IAAI,EAAEA,IADO;AAEbC,EAAAA,UAAU,EAAEA,UAFC;AAGbG,EAAAA,YAAY,EAAEA;AAHD,CAAf","sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\nimport { newRxTypeError, newRxError } from '../rx-error';\nvar minPassLength = 8;\nexport function encrypt(value, password) {\n  var encrypted = AES.encrypt(value, password);\n  return encrypted.toString();\n}\nexport function decrypt(cipherText, password) {\n  var decrypted = AES.decrypt(cipherText, password);\n  return decrypted.toString(cryptoEnc);\n}\n\nvar _encryptValue = function _encryptValue(value) {\n  return encrypt(JSON.stringify(value), this.password);\n};\n\nvar _decryptValue = function _decryptValue(encryptedValue) {\n  var decrypted = decrypt(encryptedValue, this.password);\n  return JSON.parse(decrypted);\n};\n\nexport var rxdb = true;\nexport var prototypes = {\n  /**\n   * set crypto-functions for the Crypter.prototype\n   */\n  Crypter: function Crypter(proto) {\n    proto._encryptValue = _encryptValue;\n    proto._decryptValue = _decryptValue;\n  }\n};\nexport var overwritable = {\n  validatePassword: function validatePassword(password) {\n    if (password && typeof password !== 'string') {\n      throw newRxTypeError('EN1', {\n        password: password\n      });\n    }\n\n    if (password && password.length < minPassLength) {\n      throw newRxError('EN2', {\n        minPassLength: minPassLength,\n        password: password\n      });\n    }\n  }\n};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable\n};\n//# sourceMappingURL=encryption.js.map"]},"metadata":{},"sourceType":"module"}