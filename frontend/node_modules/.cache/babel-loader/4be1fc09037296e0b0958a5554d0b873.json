{"ast":null,"code":"import React from'react';var TodoItem=function TodoItem(_ref){var index=_ref.index,todo=_ref.todo;var removeTodo=function removeTodo(e){e.preventDefault();e.stopPropagation();todo.remove();};var toggleTodo=function toggleTodo(){todo.update({$set:{isCompleted:!todo.isCompleted}});};return React.createElement(\"li\",null,React.createElement(\"div\",{className:\"view\"},React.createElement(\"div\",{className:\"round\"},React.createElement(\"input\",{checked:todo.isCompleted,type:\"checkbox\",id:todo.id,onChange:toggleTodo}),React.createElement(\"label\",{htmlFor:todo.id}))),React.createElement(\"div\",{className:\"labelContent\"+(todo.isCompleted?\" completed\":'')},todo.text),React.createElement(\"button\",{className:\"closeBtn\",onClick:removeTodo},\"x\"));};export default TodoItem;","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/src/components/Todo/TodoItem.js"],"names":["React","TodoItem","index","todo","removeTodo","e","preventDefault","stopPropagation","remove","toggleTodo","update","$set","isCompleted","id","text"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAmB,IAAjBC,CAAAA,KAAiB,MAAjBA,KAAiB,CAAVC,IAAU,MAAVA,IAAU,CAElC,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,CAAD,CAAO,CACxBA,CAAC,CAACC,cAAF,GACAD,CAAC,CAACE,eAAF,GACAJ,IAAI,CAACK,MAAL,GACD,CAJD,CAMA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvBN,IAAI,CAACO,MAAL,CAAY,CACVC,IAAI,CAAE,CACJC,WAAW,CAAE,CAACT,IAAI,CAACS,WADf,CADI,CAAZ,EAKD,CAND,CAQA,MACE,+BACE,2BAAK,SAAS,CAAC,MAAf,EACE,2BAAK,SAAS,CAAC,OAAf,EACE,6BACE,OAAO,CAAET,IAAI,CAACS,WADhB,CAEE,IAAI,CAAC,UAFP,CAGE,EAAE,CAAET,IAAI,CAACU,EAHX,CAIE,QAAQ,CAAEJ,UAJZ,EADF,CAOE,6BAAO,OAAO,CAAEN,IAAI,CAACU,EAArB,EAPF,CADF,CADF,CAaE,2BAAK,SAAS,CAAE,gBAAkBV,IAAI,CAACS,WAAL,CAAmB,YAAnB,CAAkC,EAApD,CAAhB,EACKT,IAAI,CAACW,IADV,CAbF,CAiBE,8BAAQ,SAAS,CAAC,UAAlB,CAA6B,OAAO,CAAEV,UAAtC,MAjBF,CADF,CAuBD,CAvCD,CAyCA,cAAeH,CAAAA,QAAf","sourcesContent":["import React from 'react';\n\nconst TodoItem = ({index, todo}) => {\n\n  const removeTodo = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    todo.remove()\n  };\n\n  const toggleTodo = () => {\n    todo.update({\n      $set: {\n        isCompleted: !todo.isCompleted,\n      }\n    })\n  };\n\n  return (\n    <li>\n      <div className=\"view\">\n        <div className=\"round\">\n          <input\n            checked={todo.isCompleted}\n            type=\"checkbox\"\n            id={todo.id}\n            onChange={toggleTodo}\n          />\n          <label htmlFor={todo.id}/>\n        </div>\n      </div>\n\n      <div className={\"labelContent\" + (todo.isCompleted ? \" completed\" : '')}>\n          {todo.text}\n      </div>\n\n      <button className=\"closeBtn\" onClick={removeTodo}>\n        x\n      </button>\n    </li>\n  );\n};\n\nexport default TodoItem;\n"]},"metadata":{},"sourceType":"module"}