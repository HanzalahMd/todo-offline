{"ast":null,"code":"/**\n * this plugin validates documents before they can be inserted into the RxCollection.\n * It's using is-my-json-valid as jsonschema-validator\n * @link https://github.com/mafintosh/is-my-json-valid\n */\nimport isMyJsonValid from 'is-my-json-valid';\nimport { newRxError } from '../rx-error';\nimport { requestIdleCallbackIfAvailable } from '../util';\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\n\nvar VALIDATOR_CACHE = new Map();\n/**\n * returns the parsed validator from is-my-json-valid\n */\n\nfunction _getValidator(rxSchema) {\n  var hash = rxSchema.hash;\n\n  if (!VALIDATOR_CACHE.has(hash)) {\n    var validator = isMyJsonValid(rxSchema.jsonID);\n    VALIDATOR_CACHE.set(hash, validator);\n  }\n\n  return VALIDATOR_CACHE.get(hash);\n}\n/**\n * validates the given object against the schema\n * @param  schemaPath if given, the sub-schema will be validated\n * @throws {RxError} if not valid\n */\n\n\nvar validate = function validate(obj) {\n  var useValidator = _getValidator(this);\n\n  var isValid = useValidator(obj);\n  if (isValid) return obj;else {\n    throw newRxError('VD2', {\n      errors: useValidator.errors,\n      obj: obj,\n      schema: this.jsonID\n    });\n  }\n};\n\nvar runAfterSchemaCreated = function runAfterSchemaCreated(rxSchema) {\n  // pre-generate the isMyJsonValid-validator from the schema\n  requestIdleCallbackIfAvailable(function () {\n    _getValidator(rxSchema);\n  });\n};\n\nexport var rxdb = true;\nexport var prototypes = {\n  /**\n   * set validate-function for the RxSchema.prototype\n   * @param prototype of RxSchema\n   */\n  RxSchema: function RxSchema(proto) {\n    proto._getValidator = _getValidator;\n    proto.validate = validate;\n  }\n};\nexport var hooks = {\n  createRxSchema: runAfterSchemaCreated\n};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes,\n  hooks: hooks\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/validate.js"],"names":["isMyJsonValid","newRxError","requestIdleCallbackIfAvailable","VALIDATOR_CACHE","Map","_getValidator","rxSchema","hash","has","validator","jsonID","set","get","validate","obj","useValidator","isValid","errors","schema","runAfterSchemaCreated","rxdb","prototypes","RxSchema","proto","hooks","createRxSchema"],"mappings":"AAAA;;;;;AAKA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,8BAAT,QAA+C,SAA/C;AAEA;;;;;AAIA,IAAIC,eAAe,GAAG,IAAIC,GAAJ,EAAtB;AACA;;;;AAIA,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC/B,MAAIC,IAAI,GAAGD,QAAQ,CAACC,IAApB;;AAEA,MAAI,CAACJ,eAAe,CAACK,GAAhB,CAAoBD,IAApB,CAAL,EAAgC;AAC9B,QAAIE,SAAS,GAAGT,aAAa,CAACM,QAAQ,CAACI,MAAV,CAA7B;AACAP,IAAAA,eAAe,CAACQ,GAAhB,CAAoBJ,IAApB,EAA0BE,SAA1B;AACD;;AAED,SAAON,eAAe,CAACS,GAAhB,CAAoBL,IAApB,CAAP;AACD;AACD;;;;;;;AAOA,IAAIM,QAAQ,GAAG,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACpC,MAAIC,YAAY,GAAGV,aAAa,CAAC,IAAD,CAAhC;;AAEA,MAAIW,OAAO,GAAGD,YAAY,CAACD,GAAD,CAA1B;AACA,MAAIE,OAAJ,EAAa,OAAOF,GAAP,CAAb,KAA6B;AAC3B,UAAMb,UAAU,CAAC,KAAD,EAAQ;AACtBgB,MAAAA,MAAM,EAAEF,YAAY,CAACE,MADC;AAEtBH,MAAAA,GAAG,EAAEA,GAFiB;AAGtBI,MAAAA,MAAM,EAAE,KAAKR;AAHS,KAAR,CAAhB;AAKD;AACF,CAXD;;AAaA,IAAIS,qBAAqB,GAAG,SAASA,qBAAT,CAA+Bb,QAA/B,EAAyC;AACnE;AACAJ,EAAAA,8BAA8B,CAAC,YAAY;AACzCG,IAAAA,aAAa,CAACC,QAAD,CAAb;AACD,GAF6B,CAA9B;AAGD,CALD;;AAOA,OAAO,IAAIc,IAAI,GAAG,IAAX;AACP,OAAO,IAAIC,UAAU,GAAG;AACtB;;;;AAIAC,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACjCA,IAAAA,KAAK,CAAClB,aAAN,GAAsBA,aAAtB;AACAkB,IAAAA,KAAK,CAACV,QAAN,GAAiBA,QAAjB;AACD;AARqB,CAAjB;AAUP,OAAO,IAAIW,KAAK,GAAG;AACjBC,EAAAA,cAAc,EAAEN;AADC,CAAZ;AAGP,eAAe;AACbC,EAAAA,IAAI,EAAEA,IADO;AAEbC,EAAAA,UAAU,EAAEA,UAFC;AAGbG,EAAAA,KAAK,EAAEA;AAHM,CAAf","sourcesContent":["/**\n * this plugin validates documents before they can be inserted into the RxCollection.\n * It's using is-my-json-valid as jsonschema-validator\n * @link https://github.com/mafintosh/is-my-json-valid\n */\nimport isMyJsonValid from 'is-my-json-valid';\nimport { newRxError } from '../rx-error';\nimport { requestIdleCallbackIfAvailable } from '../util';\n\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\nvar VALIDATOR_CACHE = new Map();\n/**\n * returns the parsed validator from is-my-json-valid\n */\n\nfunction _getValidator(rxSchema) {\n  var hash = rxSchema.hash;\n\n  if (!VALIDATOR_CACHE.has(hash)) {\n    var validator = isMyJsonValid(rxSchema.jsonID);\n    VALIDATOR_CACHE.set(hash, validator);\n  }\n\n  return VALIDATOR_CACHE.get(hash);\n}\n/**\n * validates the given object against the schema\n * @param  schemaPath if given, the sub-schema will be validated\n * @throws {RxError} if not valid\n */\n\n\nvar validate = function validate(obj) {\n  var useValidator = _getValidator(this);\n\n  var isValid = useValidator(obj);\n  if (isValid) return obj;else {\n    throw newRxError('VD2', {\n      errors: useValidator.errors,\n      obj: obj,\n      schema: this.jsonID\n    });\n  }\n};\n\nvar runAfterSchemaCreated = function runAfterSchemaCreated(rxSchema) {\n  // pre-generate the isMyJsonValid-validator from the schema\n  requestIdleCallbackIfAvailable(function () {\n    _getValidator(rxSchema);\n  });\n};\n\nexport var rxdb = true;\nexport var prototypes = {\n  /**\n   * set validate-function for the RxSchema.prototype\n   * @param prototype of RxSchema\n   */\n  RxSchema: function RxSchema(proto) {\n    proto._getValidator = _getValidator;\n    proto.validate = validate;\n  }\n};\nexport var hooks = {\n  createRxSchema: runAfterSchemaCreated\n};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes,\n  hooks: hooks\n};\n//# sourceMappingURL=validate.js.map"]},"metadata":{},"sourceType":"module"}