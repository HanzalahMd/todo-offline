{"ast":null,"code":"import { newRxTypeError, newRxError } from '../../rx-error';\nimport { getPreviousVersions } from '../../rx-schema';\n/**\n * checks if the migrationStrategies are ok, throws if not\n * @throws {Error|TypeError} if not ok\n */\n\nexport function checkMigrationStrategies(schema, migrationStrategies) {\n  // migrationStrategies must be object not array\n  if (typeof migrationStrategies !== 'object' || Array.isArray(migrationStrategies)) {\n    throw newRxTypeError('COL11', {\n      schema: schema\n    });\n  }\n\n  var previousVersions = getPreviousVersions(schema); // for every previousVersion there must be strategy\n\n  if (previousVersions.length !== Object.keys(migrationStrategies).length) {\n    throw newRxError('COL12', {\n      have: Object.keys(migrationStrategies),\n      should: previousVersions\n    });\n  } // every strategy must have number as property and be a function\n\n\n  previousVersions.map(function (vNr) {\n    return {\n      v: vNr,\n      s: migrationStrategies[vNr + 1]\n    };\n  }).filter(function (strat) {\n    return typeof strat.s !== 'function';\n  }).forEach(function (strat) {\n    throw newRxTypeError('COL13', {\n      version: strat.v,\n      type: typeof strat,\n      schema: schema\n    });\n  });\n  return true;\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/dev-mode/check-migration-strategies.js"],"names":["newRxTypeError","newRxError","getPreviousVersions","checkMigrationStrategies","schema","migrationStrategies","Array","isArray","previousVersions","length","Object","keys","have","should","map","vNr","v","s","filter","strat","forEach","version","type"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,UAAzB,QAA2C,gBAA3C;AACA,SAASC,mBAAT,QAAoC,iBAApC;AACA;;;;;AAKA,OAAO,SAASC,wBAAT,CAAkCC,MAAlC,EAA0CC,mBAA1C,EAA+D;AACpE;AACA,MAAI,OAAOA,mBAAP,KAA+B,QAA/B,IAA2CC,KAAK,CAACC,OAAN,CAAcF,mBAAd,CAA/C,EAAmF;AACjF,UAAML,cAAc,CAAC,OAAD,EAAU;AAC5BI,MAAAA,MAAM,EAAEA;AADoB,KAAV,CAApB;AAGD;;AAED,MAAII,gBAAgB,GAAGN,mBAAmB,CAACE,MAAD,CAA1C,CARoE,CAQhB;;AAEpD,MAAII,gBAAgB,CAACC,MAAjB,KAA4BC,MAAM,CAACC,IAAP,CAAYN,mBAAZ,EAAiCI,MAAjE,EAAyE;AACvE,UAAMR,UAAU,CAAC,OAAD,EAAU;AACxBW,MAAAA,IAAI,EAAEF,MAAM,CAACC,IAAP,CAAYN,mBAAZ,CADkB;AAExBQ,MAAAA,MAAM,EAAEL;AAFgB,KAAV,CAAhB;AAID,GAfmE,CAelE;;;AAGFA,EAAAA,gBAAgB,CAACM,GAAjB,CAAqB,UAAUC,GAAV,EAAe;AAClC,WAAO;AACLC,MAAAA,CAAC,EAAED,GADE;AAELE,MAAAA,CAAC,EAAEZ,mBAAmB,CAACU,GAAG,GAAG,CAAP;AAFjB,KAAP;AAID,GALD,EAKGG,MALH,CAKU,UAAUC,KAAV,EAAiB;AACzB,WAAO,OAAOA,KAAK,CAACF,CAAb,KAAmB,UAA1B;AACD,GAPD,EAOGG,OAPH,CAOW,UAAUD,KAAV,EAAiB;AAC1B,UAAMnB,cAAc,CAAC,OAAD,EAAU;AAC5BqB,MAAAA,OAAO,EAAEF,KAAK,CAACH,CADa;AAE5BM,MAAAA,IAAI,EAAE,OAAOH,KAFe;AAG5Bf,MAAAA,MAAM,EAAEA;AAHoB,KAAV,CAApB;AAKD,GAbD;AAcA,SAAO,IAAP;AACD","sourcesContent":["import { newRxTypeError, newRxError } from '../../rx-error';\nimport { getPreviousVersions } from '../../rx-schema';\n/**\n * checks if the migrationStrategies are ok, throws if not\n * @throws {Error|TypeError} if not ok\n */\n\nexport function checkMigrationStrategies(schema, migrationStrategies) {\n  // migrationStrategies must be object not array\n  if (typeof migrationStrategies !== 'object' || Array.isArray(migrationStrategies)) {\n    throw newRxTypeError('COL11', {\n      schema: schema\n    });\n  }\n\n  var previousVersions = getPreviousVersions(schema); // for every previousVersion there must be strategy\n\n  if (previousVersions.length !== Object.keys(migrationStrategies).length) {\n    throw newRxError('COL12', {\n      have: Object.keys(migrationStrategies),\n      should: previousVersions\n    });\n  } // every strategy must have number as property and be a function\n\n\n  previousVersions.map(function (vNr) {\n    return {\n      v: vNr,\n      s: migrationStrategies[vNr + 1]\n    };\n  }).filter(function (strat) {\n    return typeof strat.s !== 'function';\n  }).forEach(function (strat) {\n    throw newRxTypeError('COL13', {\n      version: strat.v,\n      type: typeof strat,\n      schema: schema\n    });\n  });\n  return true;\n}\n//# sourceMappingURL=check-migration-strategies.js.map"]},"metadata":{},"sourceType":"module"}