{"ast":null,"code":"/**\n * For the ORM capabilities,\n * we have to merge the document prototype\n * with the ORM functions and the data\n * We do this itterating over the properties and\n * adding them to a new object.\n * In the future we should do this by chaining the __proto__ objects\n */\nimport { createRxDocumentConstructor, basePrototype, createWithConstructor as createRxDocumentWithConstructor } from './rx-document';\nimport { runPluginHooks } from './hooks'; // caches\n\nvar protoForCollection = new WeakMap();\nvar constructorForCollection = new WeakMap();\nexport function getDocumentPrototype(rxCollection) {\n  if (!protoForCollection.has(rxCollection)) {\n    var schemaProto = rxCollection.schema.getDocumentPrototype();\n    var ormProto = getDocumentOrmPrototype(rxCollection);\n    var baseProto = basePrototype;\n    var proto = {};\n    [schemaProto, ormProto, baseProto].forEach(function (obj) {\n      var props = Object.getOwnPropertyNames(obj);\n      props.forEach(function (key) {\n        var desc = Object.getOwnPropertyDescriptor(obj, key);\n        /**\n         * When enumerable is true, it will show on console.dir(instance)\n         * To not polute the output, only getters and methods are enumerable\n         */\n\n        var enumerable = true;\n        if (key.startsWith('_') || key.endsWith('_') || key.startsWith('$') || key.endsWith('$')) enumerable = false;\n\n        if (typeof desc.value === 'function') {\n          // when getting a function, we automatically do a .bind(this)\n          Object.defineProperty(proto, key, {\n            get: function get() {\n              return desc.value.bind(this);\n            },\n            enumerable: enumerable,\n            configurable: false\n          });\n        } else {\n          desc.enumerable = enumerable;\n          desc.configurable = false;\n          if (desc.writable) desc.writable = false;\n          Object.defineProperty(proto, key, desc);\n        }\n      });\n    });\n    protoForCollection.set(rxCollection, proto);\n  }\n\n  return protoForCollection.get(rxCollection);\n}\nexport function getRxDocumentConstructor(rxCollection) {\n  if (!constructorForCollection.has(rxCollection)) {\n    var ret = createRxDocumentConstructor(getDocumentPrototype(rxCollection));\n    constructorForCollection.set(rxCollection, ret);\n  }\n\n  return constructorForCollection.get(rxCollection);\n}\n/**\n * create a RxDocument-instance from the jsonData\n * and the prototype merge\n */\n\nexport function createRxDocument(rxCollection, docData) {\n  // return from cache if exsists\n  var id = docData[rxCollection.schema.primaryPath];\n\n  var cacheDoc = rxCollection._docCache.get(id);\n\n  if (cacheDoc) return cacheDoc;\n  var doc = createRxDocumentWithConstructor(getRxDocumentConstructor(rxCollection), rxCollection, docData);\n\n  rxCollection._docCache.set(id, doc);\n\n  rxCollection._runHooksSync('post', 'create', docData, doc);\n\n  runPluginHooks('postCreateRxDocument', doc);\n  return doc;\n}\n/**\n * create RxDocument from the docs-array\n */\n\nexport function createRxDocuments(rxCollection, docsJSON) {\n  return docsJSON.map(function (json) {\n    return createRxDocument(rxCollection, json);\n  });\n}\n/**\n * returns the prototype-object\n * that contains the orm-methods,\n * used in the proto-merge\n */\n\nexport function getDocumentOrmPrototype(rxCollection) {\n  var proto = {};\n  Object.entries(rxCollection.methods).forEach(function (_ref) {\n    var k = _ref[0],\n        v = _ref[1];\n    proto[k] = v;\n  });\n  return proto;\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/rx-document-prototype-merge.js"],"names":["createRxDocumentConstructor","basePrototype","createWithConstructor","createRxDocumentWithConstructor","runPluginHooks","protoForCollection","WeakMap","constructorForCollection","getDocumentPrototype","rxCollection","has","schemaProto","schema","ormProto","getDocumentOrmPrototype","baseProto","proto","forEach","obj","props","Object","getOwnPropertyNames","key","desc","getOwnPropertyDescriptor","enumerable","startsWith","endsWith","value","defineProperty","get","bind","configurable","writable","set","getRxDocumentConstructor","ret","createRxDocument","docData","id","primaryPath","cacheDoc","_docCache","doc","_runHooksSync","createRxDocuments","docsJSON","map","json","entries","methods","_ref","k","v"],"mappings":"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","sourcesContent":["/**\n * For the ORM capabilities,\n * we have to merge the document prototype\n * with the ORM functions and the data\n * We do this itterating over the properties and\n * adding them to a new object.\n * In the future we should do this by chaining the __proto__ objects\n */\nimport { createRxDocumentConstructor, basePrototype, createWithConstructor as createRxDocumentWithConstructor } from './rx-document';\nimport { runPluginHooks } from './hooks'; // caches\n\nvar protoForCollection = new WeakMap();\nvar constructorForCollection = new WeakMap();\nexport function getDocumentPrototype(rxCollection) {\n  if (!protoForCollection.has(rxCollection)) {\n    var schemaProto = rxCollection.schema.getDocumentPrototype();\n    var ormProto = getDocumentOrmPrototype(rxCollection);\n    var baseProto = basePrototype;\n    var proto = {};\n    [schemaProto, ormProto, baseProto].forEach(function (obj) {\n      var props = Object.getOwnPropertyNames(obj);\n      props.forEach(function (key) {\n        var desc = Object.getOwnPropertyDescriptor(obj, key);\n        /**\n         * When enumerable is true, it will show on console.dir(instance)\n         * To not polute the output, only getters and methods are enumerable\n         */\n\n        var enumerable = true;\n        if (key.startsWith('_') || key.endsWith('_') || key.startsWith('$') || key.endsWith('$')) enumerable = false;\n\n        if (typeof desc.value === 'function') {\n          // when getting a function, we automatically do a .bind(this)\n          Object.defineProperty(proto, key, {\n            get: function get() {\n              return desc.value.bind(this);\n            },\n            enumerable: enumerable,\n            configurable: false\n          });\n        } else {\n          desc.enumerable = enumerable;\n          desc.configurable = false;\n          if (desc.writable) desc.writable = false;\n          Object.defineProperty(proto, key, desc);\n        }\n      });\n    });\n    protoForCollection.set(rxCollection, proto);\n  }\n\n  return protoForCollection.get(rxCollection);\n}\nexport function getRxDocumentConstructor(rxCollection) {\n  if (!constructorForCollection.has(rxCollection)) {\n    var ret = createRxDocumentConstructor(getDocumentPrototype(rxCollection));\n    constructorForCollection.set(rxCollection, ret);\n  }\n\n  return constructorForCollection.get(rxCollection);\n}\n/**\n * create a RxDocument-instance from the jsonData\n * and the prototype merge\n */\n\nexport function createRxDocument(rxCollection, docData) {\n  // return from cache if exsists\n  var id = docData[rxCollection.schema.primaryPath];\n\n  var cacheDoc = rxCollection._docCache.get(id);\n\n  if (cacheDoc) return cacheDoc;\n  var doc = createRxDocumentWithConstructor(getRxDocumentConstructor(rxCollection), rxCollection, docData);\n\n  rxCollection._docCache.set(id, doc);\n\n  rxCollection._runHooksSync('post', 'create', docData, doc);\n\n  runPluginHooks('postCreateRxDocument', doc);\n  return doc;\n}\n/**\n * create RxDocument from the docs-array\n */\n\nexport function createRxDocuments(rxCollection, docsJSON) {\n  return docsJSON.map(function (json) {\n    return createRxDocument(rxCollection, json);\n  });\n}\n/**\n * returns the prototype-object\n * that contains the orm-methods,\n * used in the proto-merge\n */\n\nexport function getDocumentOrmPrototype(rxCollection) {\n  var proto = {};\n  Object.entries(rxCollection.methods).forEach(function (_ref) {\n    var k = _ref[0],\n        v = _ref[1];\n    proto[k] = v;\n  });\n  return proto;\n}\n//# sourceMappingURL=rx-document-prototype-merge.js.map"]},"metadata":{},"sourceType":"module"}