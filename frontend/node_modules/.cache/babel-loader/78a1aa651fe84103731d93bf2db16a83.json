{"ast":null,"code":"import { splitStringToChunks } from '../util';\nimport { getNumberOfChar } from './string-format';\nexport function minimalStringToSimpleBdd(str) {\n  var nodesById = new Map(); // parse leaf nodes\n\n  var leafNodeAmount = parseInt(str.charAt(0) + str.charAt(1), 10);\n  var lastLeafNodeChar = 2 + leafNodeAmount * 2;\n  var leafNodeChars = str.substring(2, lastLeafNodeChar);\n  var leafNodeChunks = splitStringToChunks(leafNodeChars, 2);\n\n  for (var i = 0; i < leafNodeChunks.length; i++) {\n    var chunk = leafNodeChunks[i];\n    var id = chunk.charAt(0);\n    var value = getNumberOfChar(chunk.charAt(1));\n    nodesById.set(id, value);\n  } // parse internal nodes\n\n\n  var internalNodeChars = str.substring(lastLeafNodeChar, str.length - 3);\n  var internalNodeChunks = splitStringToChunks(internalNodeChars, 4);\n\n  for (var i = 0; i < internalNodeChunks.length; i++) {\n    var chunk = internalNodeChunks[i];\n    var id = chunk.charAt(0);\n    var idOf0Branch = chunk.charAt(1);\n    var idOf1Branch = chunk.charAt(2);\n    var level = getNumberOfChar(chunk.charAt(3));\n\n    if (!nodesById.has(idOf0Branch)) {\n      throw new Error('missing node with id ' + idOf0Branch);\n    }\n\n    if (!nodesById.has(idOf1Branch)) {\n      throw new Error('missing node with id ' + idOf1Branch);\n    }\n\n    var node0 = nodesById.get(idOf0Branch);\n    var node1 = nodesById.get(idOf1Branch);\n    var node = {\n      l: level,\n      0: node0,\n      1: node1\n    };\n    nodesById.set(id, node);\n  } // parse root node\n\n\n  var last3 = str.slice(-3);\n  var idOf0 = last3.charAt(0);\n  var idOf1 = last3.charAt(1);\n  var levelOfRoot = getNumberOfChar(last3.charAt(2));\n  var nodeOf0 = nodesById.get(idOf0);\n  var nodeOf1 = nodesById.get(idOf1);\n  var rootNode = {\n    l: levelOfRoot,\n    0: nodeOf0,\n    1: nodeOf1\n  };\n  return rootNode;\n}","map":{"version":3,"sources":["../../../src/minimal-string/minimal-string-to-simple-bdd.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { splitStringToChunks } from '../util';\nimport { getNumberOfChar } from './string-format';\nexport function minimalStringToSimpleBdd(str) {\n    var nodesById = new Map();\n    // parse leaf nodes\n    var leafNodeAmount = parseInt(str.charAt(0) + str.charAt(1), 10);\n    var lastLeafNodeChar = (2 + leafNodeAmount * 2);\n    var leafNodeChars = str.substring(2, lastLeafNodeChar);\n    var leafNodeChunks = splitStringToChunks(leafNodeChars, 2);\n    for (var i = 0; i < leafNodeChunks.length; i++) {\n        var chunk = leafNodeChunks[i];\n        var id = chunk.charAt(0);\n        var value = getNumberOfChar(chunk.charAt(1));\n        nodesById.set(id, value);\n    }\n    // parse internal nodes\n    var internalNodeChars = str.substring(lastLeafNodeChar, str.length - 3);\n    var internalNodeChunks = splitStringToChunks(internalNodeChars, 4);\n    for (var i = 0; i < internalNodeChunks.length; i++) {\n        var chunk = internalNodeChunks[i];\n        var id = chunk.charAt(0);\n        var idOf0Branch = chunk.charAt(1);\n        var idOf1Branch = chunk.charAt(2);\n        var level = getNumberOfChar(chunk.charAt(3));\n        if (!nodesById.has(idOf0Branch)) {\n            throw new Error('missing node with id ' + idOf0Branch);\n        }\n        if (!nodesById.has(idOf1Branch)) {\n            throw new Error('missing node with id ' + idOf1Branch);\n        }\n        var node0 = nodesById.get(idOf0Branch);\n        var node1 = nodesById.get(idOf1Branch);\n        var node = {\n            l: level,\n            0: node0,\n            1: node1\n        };\n        nodesById.set(id, node);\n    }\n    // parse root node\n    var last3 = str.slice(-3);\n    var idOf0 = last3.charAt(0);\n    var idOf1 = last3.charAt(1);\n    var levelOfRoot = getNumberOfChar(last3.charAt(2));\n    var nodeOf0 = nodesById.get(idOf0);\n    var nodeOf1 = nodesById.get(idOf1);\n    var rootNode = {\n        l: levelOfRoot,\n        0: nodeOf0,\n        1: nodeOf1,\n    };\n    return rootNode;\n}\n//# sourceMappingURL=minimal-string-to-simple-bdd.js.map"]},"metadata":{},"sourceType":"module"}