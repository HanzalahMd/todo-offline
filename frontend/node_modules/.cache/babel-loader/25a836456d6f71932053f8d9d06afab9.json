{"ast":null,"code":"import { numberToLetter, alphabeticCompare } from './util';\n/**\n * Compressed property-names begin with the compression-flag\n * it indicates that the name is compressed.\n * If an object is compressed, where one attribute starts with the\n * compression-flag, an error will be thrown.\n */\n\nexport var DEFAULT_COMPRESSION_FLAG = '|';\nexport function createCompressionTable(schema, compressionFlag, ignoreProperties) {\n  if (compressionFlag === void 0) {\n    compressionFlag = DEFAULT_COMPRESSION_FLAG;\n  }\n\n  if (ignoreProperties === void 0) {\n    ignoreProperties = [];\n  }\n\n  var table = compressedToUncompressedTable(schema, ignoreProperties);\n  var compressionTable = {\n    compressedToUncompressed: table,\n    uncompressedToCompressed: uncompressedToCompressedTable(table, compressionFlag, ignoreProperties),\n    compressionFlag: compressionFlag\n  };\n  return compressionTable;\n}\nexport function getPropertiesOfSchema(schema) {\n  var ret = new Set();\n\n  function addSchema(innerSchema) {\n    var keys = getPropertiesOfSchema(innerSchema);\n    Array.from(keys).forEach(function (k) {\n      return ret.add(k);\n    });\n  }\n\n  if (schema.properties) {\n    Object.keys(schema.properties).forEach(function (property) {\n      ret.add(property);\n      if (!schema.properties) return;\n      var deepSchema = schema.properties[property];\n      addSchema(deepSchema);\n    });\n  }\n\n  if (schema.items) {\n    if (Array.isArray(schema.items)) {\n      schema.items.forEach(function (subSchema) {\n        addSchema(subSchema);\n      });\n    } else {\n      addSchema(schema.items);\n    }\n  }\n\n  return ret;\n}\nexport function compressedToUncompressedTable(schema, ignoreProperties) {\n  var attributes = getPropertiesOfSchema(schema);\n  var schemaKeysSorted = Array.from(attributes).sort(alphabeticCompare);\n  var table = new Map();\n  var lastKeyNumber = 0;\n  schemaKeysSorted.filter(function (k) {\n    return k.length > 3 && !ignoreProperties.includes(k);\n  }).forEach(function (k) {\n    var compressKey = numberToLetter(lastKeyNumber);\n    lastKeyNumber++;\n    table.set(k, compressKey);\n  });\n  return table;\n}\nexport function uncompressedToCompressedTable(table, compressionFlag, ignoreProperties) {\n  var reverseTable = new Map();\n  Array.from(table.keys()).forEach(function (key) {\n    var value = table.get(key);\n\n    if (!ignoreProperties.includes(value)) {\n      reverseTable.set(compressionFlag + value, key);\n    }\n  });\n  return reverseTable;\n}","map":{"version":3,"sources":["../../src/create-compression-table.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { numberToLetter, alphabeticCompare } from './util';\n/**\n * Compressed property-names begin with the compression-flag\n * it indicates that the name is compressed.\n * If an object is compressed, where one attribute starts with the\n * compression-flag, an error will be thrown.\n */\nexport var DEFAULT_COMPRESSION_FLAG = '|';\nexport function createCompressionTable(schema, compressionFlag, ignoreProperties) {\n    if (compressionFlag === void 0) { compressionFlag = DEFAULT_COMPRESSION_FLAG; }\n    if (ignoreProperties === void 0) { ignoreProperties = []; }\n    var table = compressedToUncompressedTable(schema, ignoreProperties);\n    var compressionTable = {\n        compressedToUncompressed: table,\n        uncompressedToCompressed: uncompressedToCompressedTable(table, compressionFlag, ignoreProperties),\n        compressionFlag: compressionFlag\n    };\n    return compressionTable;\n}\nexport function getPropertiesOfSchema(schema) {\n    var ret = new Set();\n    function addSchema(innerSchema) {\n        var keys = getPropertiesOfSchema(innerSchema);\n        Array.from(keys).forEach(function (k) { return ret.add(k); });\n    }\n    if (schema.properties) {\n        Object.keys(schema.properties).forEach(function (property) {\n            ret.add(property);\n            if (!schema.properties)\n                return;\n            var deepSchema = schema.properties[property];\n            addSchema(deepSchema);\n        });\n    }\n    if (schema.items) {\n        if (Array.isArray(schema.items)) {\n            schema.items.forEach(function (subSchema) {\n                addSchema(subSchema);\n            });\n        }\n        else {\n            addSchema(schema.items);\n        }\n    }\n    return ret;\n}\nexport function compressedToUncompressedTable(schema, ignoreProperties) {\n    var attributes = getPropertiesOfSchema(schema);\n    var schemaKeysSorted = Array.from(attributes).sort(alphabeticCompare);\n    var table = new Map();\n    var lastKeyNumber = 0;\n    schemaKeysSorted\n        .filter(function (k) { return k.length > 3 && !ignoreProperties.includes(k); })\n        .forEach(function (k) {\n        var compressKey = numberToLetter(lastKeyNumber);\n        lastKeyNumber++;\n        table.set(k, compressKey);\n    });\n    return table;\n}\nexport function uncompressedToCompressedTable(table, compressionFlag, ignoreProperties) {\n    var reverseTable = new Map();\n    Array.from(table.keys()).forEach(function (key) {\n        var value = table.get(key);\n        if (!ignoreProperties.includes(value)) {\n            reverseTable.set(compressionFlag + value, key);\n        }\n    });\n    return reverseTable;\n}\n//# sourceMappingURL=create-compression-table.js.map"]},"metadata":{},"sourceType":"module"}