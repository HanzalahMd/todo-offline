{"ast":null,"code":"/**\n * this is copied from\n * @link https://github.com/aheckmann/mquery/blob/master/lib/utils.js\n */\nimport { clone } from '../util';\n/**\n * Merges 'from' into 'to' without overwriting existing properties.\n */\n\nexport function merge(to, from) {\n  Object.keys(from).forEach(function (key) {\n    if (typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    } else {\n      if (isObject(from[key])) merge(to[key], from[key]);else to[key] = from[key];\n    }\n  });\n}\n/**\n * Same as merge but clones the assigned values.\n */\n\nexport function mergeClone(to, from) {\n  Object.keys(from).forEach(function (key) {\n    if ('undefined' === typeof to[key]) {\n      // make sure to retain key order here because of a bug handling the $each\n      // operator in mongodb 2.4.4\n      to[key] = clone(from[key]);\n    } else {\n      if (isObject(from[key])) mergeClone(to[key], from[key]);else {\n        // make sure to retain key order here because of a bug handling the\n        // $each operator in mongodb 2.4.4\n        to[key] = clone(from[key]);\n      }\n    }\n  });\n}\n/**\n * Determines if `arg` is an object.\n */\n\nexport function isObject(arg) {\n  return '[object Object]' === arg.toString();\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/mquery/mquery_utils.js"],"names":["clone","merge","to","from","Object","keys","forEach","key","isObject","mergeClone","arg","toString"],"mappings":"AAAA;;;;AAIA,SAASA,KAAT,QAAsB,SAAtB;AACA;;;;AAIA,OAAO,SAASC,KAAT,CAAeC,EAAf,EAAmBC,IAAnB,EAAyB;AAC9BC,EAAAA,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,OAAlB,CAA0B,UAAUC,GAAV,EAAe;AACvC,QAAI,OAAOL,EAAE,CAACK,GAAD,CAAT,KAAmB,WAAvB,EAAoC;AAClCL,MAAAA,EAAE,CAACK,GAAD,CAAF,GAAUJ,IAAI,CAACI,GAAD,CAAd;AACD,KAFD,MAEO;AACL,UAAIC,QAAQ,CAACL,IAAI,CAACI,GAAD,CAAL,CAAZ,EAAyBN,KAAK,CAACC,EAAE,CAACK,GAAD,CAAH,EAAUJ,IAAI,CAACI,GAAD,CAAd,CAAL,CAAzB,KAAwDL,EAAE,CAACK,GAAD,CAAF,GAAUJ,IAAI,CAACI,GAAD,CAAd;AACzD;AACF,GAND;AAOD;AACD;;;;AAIA,OAAO,SAASE,UAAT,CAAoBP,EAApB,EAAwBC,IAAxB,EAA8B;AACnCC,EAAAA,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,OAAlB,CAA0B,UAAUC,GAAV,EAAe;AACvC,QAAI,gBAAgB,OAAOL,EAAE,CAACK,GAAD,CAA7B,EAAoC;AAClC;AACA;AACAL,MAAAA,EAAE,CAACK,GAAD,CAAF,GAAUP,KAAK,CAACG,IAAI,CAACI,GAAD,CAAL,CAAf;AACD,KAJD,MAIO;AACL,UAAIC,QAAQ,CAACL,IAAI,CAACI,GAAD,CAAL,CAAZ,EAAyBE,UAAU,CAACP,EAAE,CAACK,GAAD,CAAH,EAAUJ,IAAI,CAACI,GAAD,CAAd,CAAV,CAAzB,KAA6D;AAC3D;AACA;AACAL,QAAAA,EAAE,CAACK,GAAD,CAAF,GAAUP,KAAK,CAACG,IAAI,CAACI,GAAD,CAAL,CAAf;AACD;AACF;AACF,GAZD;AAaD;AACD;;;;AAIA,OAAO,SAASC,QAAT,CAAkBE,GAAlB,EAAuB;AAC5B,SAAO,sBAAsBA,GAAG,CAACC,QAAJ,EAA7B;AACD","sourcesContent":["/**\n * this is copied from\n * @link https://github.com/aheckmann/mquery/blob/master/lib/utils.js\n */\nimport { clone } from '../util';\n/**\n * Merges 'from' into 'to' without overwriting existing properties.\n */\n\nexport function merge(to, from) {\n  Object.keys(from).forEach(function (key) {\n    if (typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    } else {\n      if (isObject(from[key])) merge(to[key], from[key]);else to[key] = from[key];\n    }\n  });\n}\n/**\n * Same as merge but clones the assigned values.\n */\n\nexport function mergeClone(to, from) {\n  Object.keys(from).forEach(function (key) {\n    if ('undefined' === typeof to[key]) {\n      // make sure to retain key order here because of a bug handling the $each\n      // operator in mongodb 2.4.4\n      to[key] = clone(from[key]);\n    } else {\n      if (isObject(from[key])) mergeClone(to[key], from[key]);else {\n        // make sure to retain key order here because of a bug handling the\n        // $each operator in mongodb 2.4.4\n        to[key] = clone(from[key]);\n      }\n    }\n  });\n}\n/**\n * Determines if `arg` is an object.\n */\n\nexport function isObject(arg) {\n  return '[object Object]' === arg.toString();\n}\n//# sourceMappingURL=mquery_utils.js.map"]},"metadata":{},"sourceType":"module"}