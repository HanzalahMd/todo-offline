{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport objectPath from 'object-path';\nimport deepEqual from 'deep-equal';\nimport { clone, hash, sortObject, trimDots, pluginMissing, overwriteGetterForCaching } from './util';\nimport { newRxError } from './rx-error';\nimport { runPluginHooks } from './hooks';\nimport { defineGetterSetter } from './rx-document';\nexport var RxSchema =\n/*#__PURE__*/\nfunction () {\n  function RxSchema(jsonSchema) {\n    this.jsonSchema = jsonSchema;\n    this.indexes = getIndexes(this.jsonSchema); // primary is always required\n\n    this.primaryPath = getPrimary(this.jsonSchema);\n\n    if (this.primaryPath) {\n      this.jsonSchema.required.push(this.primaryPath);\n    } // final fields are always required\n\n\n    this.finalFields = getFinalFields(this.jsonSchema);\n    this.jsonSchema.required = this.jsonSchema.required.concat(this.finalFields).filter(function (elem, pos, arr) {\n      return arr.indexOf(elem) === pos;\n    }); // unique;\n    // add primary to schema if not there (if _id)\n\n    if (!this.jsonSchema.properties[this.primaryPath]) {\n      this.jsonSchema.properties[this.primaryPath] = {\n        type: 'string',\n        minLength: 1\n      };\n    }\n  }\n\n  var _proto = RxSchema.prototype;\n\n  _proto.getSchemaByObjectPath = function getSchemaByObjectPath(path) {\n    var usePath = path;\n    usePath = usePath.replace(/\\./g, '.properties.');\n    usePath = 'properties.' + usePath;\n    usePath = trimDots(usePath);\n    var ret = objectPath.get(this.jsonSchema, usePath);\n    return ret;\n  }\n  /**\n   * checks if a given change on a document is allowed\n   * Ensures that:\n   * - primary is not modified\n   * - final fields are not modified\n   * @throws {Error} if not valid\n   */\n  ;\n\n  _proto.validateChange = function validateChange(dataBefore, dataAfter) {\n    this.finalFields.forEach(function (fieldName) {\n      if (!deepEqual(dataBefore[fieldName], dataAfter[fieldName])) {\n        throw newRxError('DOC9', {\n          dataBefore: dataBefore,\n          dataAfter: dataAfter,\n          fieldName: fieldName\n        });\n      }\n    });\n  }\n  /**\n   * validate if the obj matches the schema\n   * @overwritten by plugin (required)\n   * @param schemaPath if given, validates agains deep-path of schema\n   * @throws {Error} if not valid\n   * @param obj equal to input-obj\n   */\n  ;\n\n  _proto.validate = function validate(_obj, _schemaPath) {\n    throw pluginMissing('validate');\n  }\n  /**\n   * fills all unset fields with default-values if set\n   */\n  ;\n\n  _proto.fillObjectWithDefaults = function fillObjectWithDefaults(obj) {\n    obj = clone(obj);\n    Object.entries(this.defaultValues).filter(function (_ref) {\n      var k = _ref[0];\n      return !obj.hasOwnProperty(k) || typeof obj[k] === 'undefined';\n    }).forEach(function (_ref2) {\n      var k = _ref2[0],\n          v = _ref2[1];\n      return obj[k] = v;\n    });\n    return obj;\n  };\n\n  _proto.swapIdToPrimary = function swapIdToPrimary(obj) {\n    if (this.primaryPath === '_id' || obj[this.primaryPath]) {\n      return obj;\n    }\n\n    obj[this.primaryPath] = obj._id;\n    delete obj._id;\n    return obj;\n  };\n\n  _proto.swapPrimaryToId = function swapPrimaryToId(obj) {\n    var _this = this;\n\n    if (this.primaryPath === '_id') {\n      return obj;\n    }\n\n    var ret = {};\n    Object.entries(obj).forEach(function (entry) {\n      var newKey = entry[0] === _this.primaryPath ? '_id' : entry[0];\n      ret[newKey] = entry[1];\n    });\n    return ret;\n  }\n  /**\n   * returns true if key-compression should be done\n   */\n  ;\n\n  _proto.doKeyCompression = function doKeyCompression() {\n    return this.jsonSchema.keyCompression;\n  }\n  /**\n   * creates the schema-based document-prototype,\n   * see RxCollection.getDocumentPrototype()\n   */\n  ;\n\n  _proto.getDocumentPrototype = function getDocumentPrototype() {\n    var proto = {};\n    defineGetterSetter(this, proto, '');\n    overwriteGetterForCaching(this, 'getDocumentPrototype', function () {\n      return proto;\n    });\n    return proto;\n  };\n\n  _createClass(RxSchema, [{\n    key: \"version\",\n    get: function get() {\n      return this.jsonSchema.version;\n    }\n  }, {\n    key: \"normalized\",\n    get: function get() {\n      return overwriteGetterForCaching(this, 'normalized', normalize(this.jsonSchema));\n    }\n  }, {\n    key: \"topLevelFields\",\n    get: function get() {\n      return Object.keys(this.normalized.properties);\n    }\n  }, {\n    key: \"defaultValues\",\n    get: function get() {\n      var values = {};\n      Object.entries(this.normalized.properties).filter(function (_ref3) {\n        var v = _ref3[1];\n        return v.hasOwnProperty('default');\n      }).forEach(function (_ref4) {\n        var k = _ref4[0],\n            v = _ref4[1];\n        return values[k] = v[\"default\"];\n      });\n      return overwriteGetterForCaching(this, 'defaultValues', values);\n    }\n    /**\n        * true if schema contains at least one encrypted path\n        */\n\n  }, {\n    key: \"crypt\",\n    get: function get() {\n      if (!!this.jsonSchema.encrypted && this.jsonSchema.encrypted.length > 0 || this.jsonSchema.attachments && this.jsonSchema.attachments.encrypted) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /**\n     * get all encrypted paths\n     */\n\n  }, {\n    key: \"encryptedPaths\",\n    get: function get() {\n      return this.jsonSchema.encrypted || [];\n    }\n    /**\n     * @overrides itself on the first call\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return overwriteGetterForCaching(this, 'hash', hash(this.normalized));\n    }\n  }]);\n\n  return RxSchema;\n}();\nexport function getIndexes(jsonSchema) {\n  return (jsonSchema.indexes || []).map(function (index) {\n    return Array.isArray(index) ? index : [index];\n  });\n}\n/**\n * returns the primary path of a jsonschema\n * @return primaryPath which is _id if none defined\n */\n\nexport function getPrimary(jsonSchema) {\n  var ret = Object.keys(jsonSchema.properties).filter(function (key) {\n    return jsonSchema.properties[key].primary;\n  }).shift();\n  if (!ret) return '_id';else return ret;\n}\n/**\n * array with previous version-numbers\n */\n\nexport function getPreviousVersions(schema) {\n  var version = schema.version ? schema.version : 0;\n  var c = 0;\n  return new Array(version).fill(0).map(function () {\n    return c++;\n  });\n}\n/**\n * returns the final-fields of the schema\n * @return field-names of the final-fields\n */\n\nexport function getFinalFields(jsonSchema) {\n  var ret = Object.keys(jsonSchema.properties).filter(function (key) {\n    return jsonSchema.properties[key][\"final\"];\n  }); // primary is also final\n\n  ret.push(getPrimary(jsonSchema));\n  return ret;\n}\n/**\n * orders the schemas attributes by alphabetical order\n * @return jsonSchema - ordered\n */\n\nexport function normalize(jsonSchema) {\n  var normalizedSchema = sortObject(clone(jsonSchema));\n\n  if (jsonSchema.indexes) {\n    normalizedSchema.indexes = Array.from(jsonSchema.indexes); // indexes should remain unsorted\n  }\n\n  return normalizedSchema;\n}\n/**\n * fills the schema-json with default-settings\n * @return cloned schemaObj\n */\n\nexport var fillWithDefaultSettings = function fillWithDefaultSettings(schemaObj) {\n  schemaObj = clone(schemaObj); // additionalProperties is always false\n\n  schemaObj.additionalProperties = false; // fill with key-compression-state ()\n\n  if (!schemaObj.hasOwnProperty('keyCompression')) schemaObj.keyCompression = false; // indexes must be array\n\n  schemaObj.indexes = schemaObj.indexes || []; // required must be array\n\n  schemaObj.required = schemaObj.required || []; // encrypted must be array\n\n  schemaObj.encrypted = schemaObj.encrypted || []; // add _rev\n\n  schemaObj.properties._rev = {\n    type: 'string',\n    minLength: 1\n  }; // add attachments\n\n  schemaObj.properties._attachments = {\n    type: 'object'\n  }; // version is 0 by default\n\n  schemaObj.version = schemaObj.version || 0;\n  return schemaObj;\n};\nexport function createRxSchema(jsonSchema) {\n  var runPreCreateHooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (runPreCreateHooks) {\n    runPluginHooks('preCreateRxSchema', jsonSchema);\n  }\n\n  var schema = new RxSchema(fillWithDefaultSettings(jsonSchema));\n  runPluginHooks('createRxSchema', schema);\n  return schema;\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxSchema;\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/rx-schema.js"],"names":["_createClass","objectPath","deepEqual","clone","hash","sortObject","trimDots","pluginMissing","overwriteGetterForCaching","newRxError","runPluginHooks","defineGetterSetter","RxSchema","jsonSchema","indexes","getIndexes","primaryPath","getPrimary","required","push","finalFields","getFinalFields","concat","filter","elem","pos","arr","indexOf","properties","type","minLength","_proto","prototype","getSchemaByObjectPath","path","usePath","replace","ret","get","validateChange","dataBefore","dataAfter","forEach","fieldName","validate","_obj","_schemaPath","fillObjectWithDefaults","obj","Object","entries","defaultValues","_ref","k","hasOwnProperty","_ref2","v","swapIdToPrimary","_id","swapPrimaryToId","_this","entry","newKey","doKeyCompression","keyCompression","getDocumentPrototype","proto","key","version","normalize","keys","normalized","values","_ref3","_ref4","encrypted","length","attachments","map","index","Array","isArray","primary","shift","getPreviousVersions","schema","c","fill","normalizedSchema","from","fillWithDefaultSettings","schemaObj","additionalProperties","_rev","_attachments","createRxSchema","runPreCreateHooks","arguments","undefined","isInstanceOf"],"mappings":"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","sourcesContent":["import _createClass from \"@babel/runtime/helpers/createClass\";\nimport objectPath from 'object-path';\nimport deepEqual from 'deep-equal';\nimport { clone, hash, sortObject, trimDots, pluginMissing, overwriteGetterForCaching } from './util';\nimport { newRxError } from './rx-error';\nimport { runPluginHooks } from './hooks';\nimport { defineGetterSetter } from './rx-document';\nexport var RxSchema = /*#__PURE__*/function () {\n  function RxSchema(jsonSchema) {\n    this.jsonSchema = jsonSchema;\n    this.indexes = getIndexes(this.jsonSchema); // primary is always required\n\n    this.primaryPath = getPrimary(this.jsonSchema);\n\n    if (this.primaryPath) {\n      this.jsonSchema.required.push(this.primaryPath);\n    } // final fields are always required\n\n\n    this.finalFields = getFinalFields(this.jsonSchema);\n    this.jsonSchema.required = this.jsonSchema.required.concat(this.finalFields).filter(function (elem, pos, arr) {\n      return arr.indexOf(elem) === pos;\n    }); // unique;\n    // add primary to schema if not there (if _id)\n\n    if (!this.jsonSchema.properties[this.primaryPath]) {\n      this.jsonSchema.properties[this.primaryPath] = {\n        type: 'string',\n        minLength: 1\n      };\n    }\n  }\n\n  var _proto = RxSchema.prototype;\n\n  _proto.getSchemaByObjectPath = function getSchemaByObjectPath(path) {\n    var usePath = path;\n    usePath = usePath.replace(/\\./g, '.properties.');\n    usePath = 'properties.' + usePath;\n    usePath = trimDots(usePath);\n    var ret = objectPath.get(this.jsonSchema, usePath);\n    return ret;\n  }\n  /**\n   * checks if a given change on a document is allowed\n   * Ensures that:\n   * - primary is not modified\n   * - final fields are not modified\n   * @throws {Error} if not valid\n   */\n  ;\n\n  _proto.validateChange = function validateChange(dataBefore, dataAfter) {\n    this.finalFields.forEach(function (fieldName) {\n      if (!deepEqual(dataBefore[fieldName], dataAfter[fieldName])) {\n        throw newRxError('DOC9', {\n          dataBefore: dataBefore,\n          dataAfter: dataAfter,\n          fieldName: fieldName\n        });\n      }\n    });\n  }\n  /**\n   * validate if the obj matches the schema\n   * @overwritten by plugin (required)\n   * @param schemaPath if given, validates agains deep-path of schema\n   * @throws {Error} if not valid\n   * @param obj equal to input-obj\n   */\n  ;\n\n  _proto.validate = function validate(_obj, _schemaPath) {\n    throw pluginMissing('validate');\n  }\n  /**\n   * fills all unset fields with default-values if set\n   */\n  ;\n\n  _proto.fillObjectWithDefaults = function fillObjectWithDefaults(obj) {\n    obj = clone(obj);\n    Object.entries(this.defaultValues).filter(function (_ref) {\n      var k = _ref[0];\n      return !obj.hasOwnProperty(k) || typeof obj[k] === 'undefined';\n    }).forEach(function (_ref2) {\n      var k = _ref2[0],\n          v = _ref2[1];\n      return obj[k] = v;\n    });\n    return obj;\n  };\n\n  _proto.swapIdToPrimary = function swapIdToPrimary(obj) {\n    if (this.primaryPath === '_id' || obj[this.primaryPath]) {\n      return obj;\n    }\n\n    obj[this.primaryPath] = obj._id;\n    delete obj._id;\n    return obj;\n  };\n\n  _proto.swapPrimaryToId = function swapPrimaryToId(obj) {\n    var _this = this;\n\n    if (this.primaryPath === '_id') {\n      return obj;\n    }\n\n    var ret = {};\n    Object.entries(obj).forEach(function (entry) {\n      var newKey = entry[0] === _this.primaryPath ? '_id' : entry[0];\n      ret[newKey] = entry[1];\n    });\n    return ret;\n  }\n  /**\n   * returns true if key-compression should be done\n   */\n  ;\n\n  _proto.doKeyCompression = function doKeyCompression() {\n    return this.jsonSchema.keyCompression;\n  }\n  /**\n   * creates the schema-based document-prototype,\n   * see RxCollection.getDocumentPrototype()\n   */\n  ;\n\n  _proto.getDocumentPrototype = function getDocumentPrototype() {\n    var proto = {};\n    defineGetterSetter(this, proto, '');\n    overwriteGetterForCaching(this, 'getDocumentPrototype', function () {\n      return proto;\n    });\n    return proto;\n  };\n\n  _createClass(RxSchema, [{\n    key: \"version\",\n    get: function get() {\n      return this.jsonSchema.version;\n    }\n  }, {\n    key: \"normalized\",\n    get: function get() {\n      return overwriteGetterForCaching(this, 'normalized', normalize(this.jsonSchema));\n    }\n  }, {\n    key: \"topLevelFields\",\n    get: function get() {\n      return Object.keys(this.normalized.properties);\n    }\n  }, {\n    key: \"defaultValues\",\n    get: function get() {\n      var values = {};\n      Object.entries(this.normalized.properties).filter(function (_ref3) {\n        var v = _ref3[1];\n        return v.hasOwnProperty('default');\n      }).forEach(function (_ref4) {\n        var k = _ref4[0],\n            v = _ref4[1];\n        return values[k] = v[\"default\"];\n      });\n      return overwriteGetterForCaching(this, 'defaultValues', values);\n    }\n    /**\n        * true if schema contains at least one encrypted path\n        */\n\n  }, {\n    key: \"crypt\",\n    get: function get() {\n      if (!!this.jsonSchema.encrypted && this.jsonSchema.encrypted.length > 0 || this.jsonSchema.attachments && this.jsonSchema.attachments.encrypted) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /**\n     * get all encrypted paths\n     */\n\n  }, {\n    key: \"encryptedPaths\",\n    get: function get() {\n      return this.jsonSchema.encrypted || [];\n    }\n    /**\n     * @overrides itself on the first call\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return overwriteGetterForCaching(this, 'hash', hash(this.normalized));\n    }\n  }]);\n\n  return RxSchema;\n}();\nexport function getIndexes(jsonSchema) {\n  return (jsonSchema.indexes || []).map(function (index) {\n    return Array.isArray(index) ? index : [index];\n  });\n}\n/**\n * returns the primary path of a jsonschema\n * @return primaryPath which is _id if none defined\n */\n\nexport function getPrimary(jsonSchema) {\n  var ret = Object.keys(jsonSchema.properties).filter(function (key) {\n    return jsonSchema.properties[key].primary;\n  }).shift();\n  if (!ret) return '_id';else return ret;\n}\n/**\n * array with previous version-numbers\n */\n\nexport function getPreviousVersions(schema) {\n  var version = schema.version ? schema.version : 0;\n  var c = 0;\n  return new Array(version).fill(0).map(function () {\n    return c++;\n  });\n}\n/**\n * returns the final-fields of the schema\n * @return field-names of the final-fields\n */\n\nexport function getFinalFields(jsonSchema) {\n  var ret = Object.keys(jsonSchema.properties).filter(function (key) {\n    return jsonSchema.properties[key][\"final\"];\n  }); // primary is also final\n\n  ret.push(getPrimary(jsonSchema));\n  return ret;\n}\n/**\n * orders the schemas attributes by alphabetical order\n * @return jsonSchema - ordered\n */\n\nexport function normalize(jsonSchema) {\n  var normalizedSchema = sortObject(clone(jsonSchema));\n\n  if (jsonSchema.indexes) {\n    normalizedSchema.indexes = Array.from(jsonSchema.indexes); // indexes should remain unsorted\n  }\n\n  return normalizedSchema;\n}\n/**\n * fills the schema-json with default-settings\n * @return cloned schemaObj\n */\n\nexport var fillWithDefaultSettings = function fillWithDefaultSettings(schemaObj) {\n  schemaObj = clone(schemaObj); // additionalProperties is always false\n\n  schemaObj.additionalProperties = false; // fill with key-compression-state ()\n\n  if (!schemaObj.hasOwnProperty('keyCompression')) schemaObj.keyCompression = false; // indexes must be array\n\n  schemaObj.indexes = schemaObj.indexes || []; // required must be array\n\n  schemaObj.required = schemaObj.required || []; // encrypted must be array\n\n  schemaObj.encrypted = schemaObj.encrypted || []; // add _rev\n\n  schemaObj.properties._rev = {\n    type: 'string',\n    minLength: 1\n  }; // add attachments\n\n  schemaObj.properties._attachments = {\n    type: 'object'\n  }; // version is 0 by default\n\n  schemaObj.version = schemaObj.version || 0;\n  return schemaObj;\n};\nexport function createRxSchema(jsonSchema) {\n  var runPreCreateHooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (runPreCreateHooks) {\n    runPluginHooks('preCreateRxSchema', jsonSchema);\n  }\n\n  var schema = new RxSchema(fillWithDefaultSettings(jsonSchema));\n  runPluginHooks('createRxSchema', schema);\n  return schema;\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxSchema;\n}\n//# sourceMappingURL=rx-schema.js.map"]},"metadata":{},"sourceType":"module"}