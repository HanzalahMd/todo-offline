{"ast":null,"code":"import { getCharOfLevel, getCharOfValue, getNextCharId } from './string-format';\nimport { FIRST_CHAR_CODE_FOR_ID } from './string-format';\nexport function bddToMinimalString(bdd) {\n  var ret = '';\n  var currentCharCode = FIRST_CHAR_CODE_FOR_ID; // add leaf node count\n\n  var leafNodeAmount = bdd.getLeafNodes().length;\n\n  if (leafNodeAmount > 99) {\n    throw new Error('cannot build string with too many leaf nodes');\n  }\n\n  ret += leafNodeAmount.toString().padStart(2, '0');\n  var levelsHighestFirst = bdd.levels.slice().reverse();\n  var idByNode = new Map();\n  levelsHighestFirst.forEach(function (level) {\n    var nodes = bdd.getNodesOfLevel(level);\n    nodes.forEach(function (node) {\n      var stringRep = nodeToString(node, idByNode, currentCharCode);\n      currentCharCode = stringRep.nextCode;\n      idByNode.set(node, stringRep.id);\n      ret += stringRep.str;\n    });\n  });\n  return ret;\n}\nexport function nodeToString(node, idByNode, lastCode) {\n  var nextId = getNextCharId(lastCode);\n\n  switch (node.type) {\n    case 'LeafNode':\n      var valueChar = getCharOfValue(node.asLeafNode().value);\n      return {\n        id: nextId.char,\n        nextCode: nextId.nextCode,\n        str: nextId.char + valueChar\n      };\n\n    case 'InternalNode':\n      var branch0Id = idByNode.get(node.asInternalNode().branches.getBranch('0'));\n      var branch1Id = idByNode.get(node.asInternalNode().branches.getBranch('1'));\n      return {\n        id: nextId.char,\n        nextCode: nextId.nextCode,\n        str: nextId.char + branch0Id + branch1Id + getCharOfLevel(node.level)\n      };\n\n    case 'RootNode':\n      var branch0IdRoot = idByNode.get(node.asRootNode().branches.getBranch('0'));\n      var branch1IdRoot = idByNode.get(node.asRootNode().branches.getBranch('1'));\n      return {\n        id: nextId.char,\n        nextCode: nextId.nextCode,\n        str: '' + branch0IdRoot + branch1IdRoot + getCharOfLevel(node.level)\n      };\n\n    default:\n      throw new Error('unknown node type');\n  }\n}","map":{"version":3,"sources":["../../../src/minimal-string/bdd-to-minimal-string.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getCharOfLevel, getCharOfValue, getNextCharId } from './string-format';\nimport { FIRST_CHAR_CODE_FOR_ID } from './string-format';\nexport function bddToMinimalString(bdd) {\n    var ret = '';\n    var currentCharCode = FIRST_CHAR_CODE_FOR_ID;\n    // add leaf node count\n    var leafNodeAmount = bdd.getLeafNodes().length;\n    if (leafNodeAmount > 99) {\n        throw new Error('cannot build string with too many leaf nodes');\n    }\n    ret += leafNodeAmount.toString().padStart(2, '0');\n    var levelsHighestFirst = bdd.levels.slice().reverse();\n    var idByNode = new Map();\n    levelsHighestFirst.forEach(function (level) {\n        var nodes = bdd.getNodesOfLevel(level);\n        nodes.forEach(function (node) {\n            var stringRep = nodeToString(node, idByNode, currentCharCode);\n            currentCharCode = stringRep.nextCode;\n            idByNode.set(node, stringRep.id);\n            ret += stringRep.str;\n        });\n    });\n    return ret;\n}\nexport function nodeToString(node, idByNode, lastCode) {\n    var nextId = getNextCharId(lastCode);\n    switch (node.type) {\n        case 'LeafNode':\n            var valueChar = getCharOfValue(node.asLeafNode().value);\n            return {\n                id: nextId.char,\n                nextCode: nextId.nextCode,\n                str: nextId.char + valueChar\n            };\n        case 'InternalNode':\n            var branch0Id = idByNode.get(node.asInternalNode().branches.getBranch('0'));\n            var branch1Id = idByNode.get(node.asInternalNode().branches.getBranch('1'));\n            return {\n                id: nextId.char,\n                nextCode: nextId.nextCode,\n                str: nextId.char + branch0Id + branch1Id + getCharOfLevel(node.level)\n            };\n        case 'RootNode':\n            var branch0IdRoot = idByNode.get(node.asRootNode().branches.getBranch('0'));\n            var branch1IdRoot = idByNode.get(node.asRootNode().branches.getBranch('1'));\n            return {\n                id: nextId.char,\n                nextCode: nextId.nextCode,\n                str: '' + branch0IdRoot + branch1IdRoot + getCharOfLevel(node.level)\n            };\n        default:\n            throw new Error('unknown node type');\n    }\n}\n//# sourceMappingURL=bdd-to-minimal-string.js.map"]},"metadata":{},"sourceType":"module"}