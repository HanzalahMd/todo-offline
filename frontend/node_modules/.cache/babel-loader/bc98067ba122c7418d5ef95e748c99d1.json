{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport randomToken from 'random-token';\nimport IdleQueue from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { adapterObject, hash, promiseWait, pluginMissing } from './util';\nimport { newRxError } from './rx-error';\nimport { createRxSchema } from './rx-schema';\nimport { isInstanceOf as isInstanceOfRxChangeEvent, createChangeEvent, changeEventfromJSON } from './rx-change-event';\nimport overwritable from './overwritable';\nimport { runPluginHooks } from './hooks';\nimport { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { PouchDB, validateCouchDBString, isLevelDown } from './pouch-db';\nimport { create as createRxCollection } from './rx-collection';\n/**\n * stores the combinations\n * of used database-names with their adapters\n * so we can throw when the same database is created more then once\n */\n\nvar USED_COMBINATIONS = {};\nvar DB_COUNT = 0;\nexport var RxDatabaseBase =\n/*#__PURE__*/\nfunction () {\n  function RxDatabaseBase(name, adapter, password, multiInstance) {\n    var queryChangeDetection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var pouchSettings = arguments.length > 6 ? arguments[6] : undefined;\n    this.idleQueue = new IdleQueue();\n    this.token = randomToken(10);\n    this._subs = [];\n    this.destroyed = false;\n    this.subject = new Subject();\n    this.observable$ = this.subject.asObservable().pipe(filter(function (cEvent) {\n      return isInstanceOfRxChangeEvent(cEvent);\n    }));\n    this._adminPouch = {};\n    this._collectionsPouch = {};\n    this.name = name;\n    this.adapter = adapter;\n    this.password = password;\n    this.multiInstance = multiInstance;\n    this.queryChangeDetection = queryChangeDetection;\n    this.options = options;\n    this.pouchSettings = pouchSettings;\n    this.collections = {};\n    if (typeof name !== 'undefined') DB_COUNT++;\n  }\n\n  var _proto = RxDatabaseBase.prototype;\n  /**\n   * removes all internal collection-info\n   * only use this if you have to upgrade from a major rxdb-version\n   * do NEVER use this to change the schema of a collection\n   */\n\n  _proto.dangerousRemoveCollectionInfo = function dangerousRemoveCollectionInfo() {\n    var colPouch = this._collectionsPouch;\n    return colPouch.allDocs().then(function (docsRes) {\n      return Promise.all(docsRes.rows.map(function (row) {\n        return {\n          _id: row.key,\n          _rev: row.value.rev\n        };\n      }).map(function (doc) {\n        return colPouch.remove(doc._id, doc._rev);\n      }));\n    });\n  }\n  /**\n   * spawns a new pouch-instance\n   */\n  ;\n\n  _proto._spawnPouchDB = function _spawnPouchDB(collectionName, schemaVersion) {\n    var pouchSettings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return _spawnPouchDB2(this.name, this.adapter, collectionName, schemaVersion, pouchSettings, this.pouchSettings);\n  }\n  /**\n   * returns a promise which resolves when the instance becomes leader\n   */\n  ;\n\n  _proto.waitForLeadership = function waitForLeadership() {\n    if (!this.multiInstance) return Promise.resolve(true);\n    return this.leaderElector.waitForLeadership();\n  }\n  /**\n   * This is the main handle-point for all change events\n   * ChangeEvents created by this instance go:\n   * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n   * ChangeEvents created by other instances go:\n   * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n   */\n  ;\n\n  _proto.$emit = function $emit(changeEvent) {\n    if (!changeEvent) return; // emit into own stream\n\n    this.subject.next(changeEvent); // write to socket if event was created by this instance\n\n    if (changeEvent.data.it === this.token) {\n      writeToSocket(this, changeEvent);\n    }\n  }\n  /**\n   * removes the collection-doc from this._collectionsPouch\n   */\n  ;\n\n  _proto.removeCollectionDoc = function removeCollectionDoc(name, schema) {\n    var _this = this;\n\n    var docId = _collectionNamePrimary(name, schema);\n\n    return this._collectionsPouch.get(docId).then(function (doc) {\n      return _this.lockedRun(function () {\n        return _this._collectionsPouch.remove(doc);\n      });\n    });\n  }\n  /**\n   * create or fetch a collection\n   */\n  ;\n\n  _proto.collection = function collection(args) {\n    var _this2 = this;\n\n    if (typeof args === 'string') return Promise.resolve(this.collections[args]);\n    args = Object.assign({}, args);\n    args.database = this;\n    runPluginHooks('preCreateRxCollection', args);\n\n    if (args.name.charAt(0) === '_') {\n      throw newRxError('DB2', {\n        name: args.name\n      });\n    }\n\n    if (this.collections[args.name]) {\n      throw newRxError('DB3', {\n        name: args.name\n      });\n    }\n\n    if (!args.schema) {\n      throw newRxError('DB4', {\n        name: args.name,\n        args: args\n      });\n    }\n\n    var internalPrimary = _collectionNamePrimary(args.name, args.schema); // check unallowed collection-names\n\n\n    if (properties().includes(args.name)) {\n      throw newRxError('DB5', {\n        name: args.name\n      });\n    }\n\n    var schema = createRxSchema(args.schema);\n    args.schema = schema; // check schemaHash\n\n    var schemaHash = schema.hash;\n    var colDoc;\n    var col;\n    return this.lockedRun(function () {\n      return _this2._collectionsPouch.get(internalPrimary);\n    })[\"catch\"](function () {\n      return null;\n    }).then(function (collectionDoc) {\n      colDoc = collectionDoc;\n\n      if (collectionDoc && collectionDoc.schemaHash !== schemaHash) {\n        // collection already exists with different schema, check if it has documents\n        var pouch = _this2._spawnPouchDB(args.name, args.schema.version, args.pouchSettings);\n\n        return pouch.find({\n          selector: {\n            _id: {}\n          },\n          limit: 1\n        }).then(function (oneDoc) {\n          if (oneDoc.docs.length !== 0) {\n            // we have one document\n            throw newRxError('DB6', {\n              name: args.name,\n              previousSchemaHash: collectionDoc.schemaHash,\n              schemaHash: schemaHash\n            });\n          }\n\n          return collectionDoc;\n        });\n      } else return collectionDoc;\n    }).then(function () {\n      return createRxCollection(args);\n    }).then(function (collection) {\n      col = collection;\n\n      if (Object.keys(collection.schema.encryptedPaths).length > 0 && !_this2.password) {\n        throw newRxError('DB7', {\n          name: args.name\n        });\n      }\n\n      if (!colDoc) {\n        return _this2.lockedRun(function () {\n          return _this2._collectionsPouch.put({\n            _id: internalPrimary,\n            schemaHash: schemaHash,\n            schema: collection.schema.normalized,\n            version: collection.schema.version\n          });\n        })[\"catch\"](function () {});\n      }\n    }).then(function () {\n      var cEvent = createChangeEvent('RxDatabase.collection', _this2, col);\n      cEvent.data.v = col.name;\n      cEvent.data.col = '_collections';\n      _this2.collections[args.name] = col;\n\n      if (!_this2[args.name]) {\n        Object.defineProperty(_this2, args.name, {\n          get: function get() {\n            return _this2.collections[args.name];\n          }\n        });\n      }\n\n      _this2.$emit(cEvent);\n\n      return col;\n    });\n  }\n  /**\n   * delete all data of the collection and its previous versions\n   */\n  ;\n\n  _proto.removeCollection = function removeCollection(collectionName) {\n    var _this3 = this;\n\n    if (this.collections[collectionName]) this.collections[collectionName].destroy(); // remove schemas from internal db\n\n    return _removeAllOfCollection(this, collectionName) // get all relevant pouchdb-instances\n    .then(function (knownVersions) {\n      return knownVersions.map(function (v) {\n        return _this3._spawnPouchDB(collectionName, v);\n      });\n    }) // remove documents\n    .then(function (pouches) {\n      return Promise.all(pouches.map(function (pouch) {\n        return _this3.lockedRun(function () {\n          return pouch.destroy();\n        });\n      }));\n    }).then(function () {});\n  }\n  /**\n   * runs the given function between idleQueue-locking\n   */\n  ;\n\n  _proto.lockedRun = function lockedRun(fn) {\n    return this.idleQueue.wrapCall(fn);\n  };\n\n  _proto.requestIdlePromise = function requestIdlePromise() {\n    return this.idleQueue.requestIdlePromise();\n  }\n  /**\n   * Export database to a JSON friendly format.\n   * @param _decrypted\n   * When true, all encrypted values will be decrypted.\n   */\n  ;\n\n  _proto.dump = function dump() {\n    var _decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var _collections = arguments.length > 1 ? arguments[1] : undefined;\n\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * Import the parsed JSON export into the collection.\n   * @param _exportedJSON The previously exported data from the `<db>.dump()` method.\n   * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n   * since data could be encrypted.\n   */\n  ;\n\n  _proto.importDump = function importDump(_exportedJSON) {\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * spawn server\n   */\n  ;\n\n  _proto.server = function server(_options) {\n    throw pluginMissing('server');\n  }\n  /**\n   * destroys the database-instance and all collections\n   */\n  ;\n\n  _proto.destroy = function destroy() {\n    var _this4 = this;\n\n    if (this.destroyed) return Promise.resolve(false);\n    runPluginHooks('preDestroyRxDatabase', this);\n    DB_COUNT--;\n    this.destroyed = true;\n\n    if (this.broadcastChannel) {\n      /**\n       * The broadcast-channel gets closed lazy\n       * to ensure that all pending change-events\n       * get emitted\n       */\n      setTimeout(function () {\n        return _this4.broadcastChannel.close();\n      }, 1000);\n    }\n\n    if (this._leaderElector) this._leaderElector.destroy();\n\n    this._subs.map(function (sub) {\n      return sub.unsubscribe();\n    }); // destroy all collections\n\n\n    return Promise.all(Object.keys(this.collections).map(function (key) {\n      return _this4.collections[key];\n    }).map(function (col) {\n      return col.destroy();\n    })) // remove combination from USED_COMBINATIONS-map\n    .then(function () {\n      return _removeUsedCombination(_this4.name, _this4.adapter);\n    }).then(function () {\n      return true;\n    });\n  }\n  /**\n   * deletes the database and its stored data\n   */\n  ;\n\n  _proto.remove = function remove() {\n    var _this5 = this;\n\n    return this.destroy().then(function () {\n      return removeDatabase(_this5.name, _this5.adapter);\n    });\n  };\n\n  _createClass(RxDatabaseBase, [{\n    key: \"leaderElector\",\n    get: function get() {\n      if (!this._leaderElector) this._leaderElector = overwritable.createLeaderElector(this);\n      return this._leaderElector;\n    }\n  }, {\n    key: \"isLeader\",\n    get: function get() {\n      if (!this.multiInstance) return true;\n      return this.leaderElector.isLeader;\n    }\n  }, {\n    key: \"$\",\n    get: function get() {\n      return this.observable$;\n    }\n  }]);\n\n  return RxDatabaseBase;\n}();\n/**\n * returns all possible properties of a RxDatabase-instance\n */\n\nvar _properties = null;\nexport function properties() {\n  if (!_properties) {\n    var pseudoInstance = new RxDatabaseBase();\n    var ownProperties = Object.getOwnPropertyNames(pseudoInstance);\n    var prototypeProperties = Object.getOwnPropertyNames(Object.getPrototypeOf(pseudoInstance));\n    _properties = [].concat(ownProperties, prototypeProperties);\n  }\n\n  return _properties;\n}\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\n\nfunction _isNameAdapterUsed(name, adapter) {\n  if (!USED_COMBINATIONS[name]) return false;\n  var used = false;\n  USED_COMBINATIONS[name].forEach(function (ad) {\n    if (ad === adapter) used = true;\n  });\n\n  if (used) {\n    throw newRxError('DB8', {\n      name: name,\n      adapter: adapter,\n      link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n    });\n  }\n}\n\nfunction _removeUsedCombination(name, adapter) {\n  if (!USED_COMBINATIONS[name]) return;\n  var index = USED_COMBINATIONS[name].indexOf(adapter);\n  USED_COMBINATIONS[name].splice(index, 1);\n}\n/**\n * validates and inserts the password-hash\n * to ensure there is/was no other instance with a different password\n */\n\n\nexport function _preparePasswordHash(rxDatabase) {\n  if (!rxDatabase.password) return Promise.resolve(false);\n  var pwHash = hash(rxDatabase.password);\n  return rxDatabase._adminPouch.get('_local/pwHash')[\"catch\"](function () {\n    return null;\n  }).then(function (pwHashDoc) {\n    /**\n     * if pwHash was not saved, we save it,\n     * this operation might throw because another instance runs save at the same time,\n     * also we do not await the output because it does not mather\n     */\n    if (!pwHashDoc) {\n      rxDatabase._adminPouch.put({\n        _id: '_local/pwHash',\n        value: pwHash\n      })[\"catch\"](function () {\n        return null;\n      });\n    } // different hash was already set by other instance\n\n\n    if (pwHashDoc && rxDatabase.password && pwHash !== pwHashDoc.value) {\n      return rxDatabase.destroy().then(function () {\n        throw newRxError('DB1', {\n          passwordHash: hash(rxDatabase.password),\n          existingPasswordHash: pwHashDoc.value\n        });\n      });\n    }\n\n    return true;\n  });\n}\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\n\nexport function _ensureStorageTokenExists(rxDatabase) {\n  return rxDatabase._adminPouch.get('_local/storageToken')[\"catch\"](function () {\n    // no doc exists -> insert\n    return rxDatabase._adminPouch.put({\n      _id: '_local/storageToken',\n      value: randomToken(10)\n    })[\"catch\"](function () {}).then(function () {\n      return promiseWait(0);\n    });\n  }).then(function () {\n    return rxDatabase._adminPouch.get('_local/storageToken');\n  }).then(function (storageTokenDoc2) {\n    return storageTokenDoc2.value;\n  });\n}\n/**\n * writes the changeEvent to the broadcastChannel\n */\n\nexport function writeToSocket(rxDatabase, changeEvent) {\n  if (rxDatabase.multiInstance && !changeEvent.isIntern() && rxDatabase.broadcastChannel) {\n    var socketDoc = changeEvent.toJSON();\n    delete socketDoc.db;\n    var sendOverChannel = {\n      db: rxDatabase.token,\n      // database-token\n      st: rxDatabase.storageToken,\n      // storage-token\n      d: socketDoc\n    };\n    return rxDatabase.broadcastChannel.postMessage(sendOverChannel).then(function () {\n      return true;\n    });\n  } else return Promise.resolve(false);\n}\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\n\nexport function _collectionNamePrimary(name, schema) {\n  return name + '-' + schema.version;\n}\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\n\nexport function _removeAllOfCollection(rxDatabase, collectionName) {\n  return rxDatabase.lockedRun(function () {\n    return rxDatabase._collectionsPouch.allDocs({\n      include_docs: true\n    });\n  }).then(function (data) {\n    var relevantDocs = data.rows.map(function (row) {\n      return row.doc;\n    }).filter(function (doc) {\n      var name = doc._id.split('-')[0];\n\n      return name === collectionName;\n    });\n    return Promise.all(relevantDocs.map(function (doc) {\n      return rxDatabase.lockedRun(function () {\n        return rxDatabase._collectionsPouch.remove(doc);\n      });\n    })).then(function () {\n      return relevantDocs.map(function (doc) {\n        return doc.version;\n      });\n    });\n  });\n}\n\nfunction _prepareBroadcastChannel(rxDatabase) {\n  // broadcastChannel\n  rxDatabase.broadcastChannel = new BroadcastChannel('RxDB:' + rxDatabase.name + ':' + 'socket');\n  rxDatabase.broadcastChannel$ = new Subject();\n\n  rxDatabase.broadcastChannel.onmessage = function (msg) {\n    if (msg.st !== rxDatabase.storageToken) return; // not same storage-state\n\n    if (msg.db === rxDatabase.token) return; // same db\n\n    var changeEvent = changeEventfromJSON(msg.d);\n    rxDatabase.broadcastChannel$.next(changeEvent);\n  }; // TODO only subscribe when sth is listening to the event-chain\n\n\n  rxDatabase._subs.push(rxDatabase.broadcastChannel$.subscribe(function (cE) {\n    rxDatabase.$emit(cE);\n  }));\n}\n/**\n * do the async things for this database\n */\n\n\nfunction prepare(rxDatabase) {\n  rxDatabase._adminPouch = _internalAdminPouch(rxDatabase.name, rxDatabase.adapter, rxDatabase.pouchSettings);\n  rxDatabase._collectionsPouch = _internalCollectionsPouch(rxDatabase.name, rxDatabase.adapter, rxDatabase.pouchSettings); // ensure admin-pouch is useable\n\n  return rxDatabase._adminPouch.info().then(function () {\n    // validate/insert password-hash\n    return Promise.all([_ensureStorageTokenExists(rxDatabase), _preparePasswordHash(rxDatabase)]);\n  }).then(function (_ref) {\n    var storageToken = _ref[0];\n    rxDatabase.storageToken = storageToken;\n\n    if (rxDatabase.multiInstance) {\n      _prepareBroadcastChannel(rxDatabase);\n    }\n  });\n}\n\nexport function create(_ref2) {\n  var name = _ref2.name,\n      adapter = _ref2.adapter,\n      password = _ref2.password,\n      _ref2$multiInstance = _ref2.multiInstance,\n      multiInstance = _ref2$multiInstance === void 0 ? true : _ref2$multiInstance,\n      _ref2$queryChangeDete = _ref2.queryChangeDetection,\n      queryChangeDetection = _ref2$queryChangeDete === void 0 ? false : _ref2$queryChangeDete,\n      _ref2$ignoreDuplicate = _ref2.ignoreDuplicate,\n      ignoreDuplicate = _ref2$ignoreDuplicate === void 0 ? false : _ref2$ignoreDuplicate,\n      _ref2$options = _ref2.options,\n      options = _ref2$options === void 0 ? {} : _ref2$options,\n      _ref2$pouchSettings = _ref2.pouchSettings,\n      pouchSettings = _ref2$pouchSettings === void 0 ? {} : _ref2$pouchSettings;\n  validateCouchDBString(name); // check if pouchdb-adapter\n\n  if (typeof adapter === 'string') {\n    // TODO make a function hasAdapter()\n    if (!PouchDB.adapters || !PouchDB.adapters[adapter]) {\n      throw newRxError('DB9', {\n        adapter: adapter\n      });\n    }\n  } else {\n    isLevelDown(adapter);\n\n    if (!PouchDB.adapters || !PouchDB.adapters.leveldb) {\n      throw newRxError('DB10', {\n        adapter: adapter\n      });\n    }\n  }\n\n  if (password) {\n    overwritable.validatePassword(password);\n  } // check if combination already used\n\n\n  if (!ignoreDuplicate) {\n    _isNameAdapterUsed(name, adapter);\n  } // add to used_map\n\n\n  if (!USED_COMBINATIONS[name]) USED_COMBINATIONS[name] = [];\n  USED_COMBINATIONS[name].push(adapter);\n  var db = new RxDatabaseBase(name, adapter, password, multiInstance, queryChangeDetection, options, pouchSettings);\n  return prepare(db).then(function () {\n    runPluginHooks('createRxDatabase', db);\n    return db;\n  });\n}\nexport function getPouchLocation(dbName, collectionName, schemaVersion) {\n  var prefix = dbName + '-rxdb-' + schemaVersion + '-';\n\n  if (!collectionName.includes('/')) {\n    return prefix + collectionName;\n  } else {\n    // if collectionName is a path, we have to prefix the last part only\n    var split = collectionName.split('/');\n    var last = split.pop();\n    var ret = split.join('/');\n    ret += '/' + prefix + last;\n    return ret;\n  }\n}\n\nfunction _spawnPouchDB2(dbName, adapter, collectionName, schemaVersion) {\n  var pouchSettings = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var pouchSettingsFromRxDatabaseCreator = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  var pouchLocation = getPouchLocation(dbName, collectionName, schemaVersion);\n  var pouchDbParameters = {\n    location: pouchLocation,\n    adapter: adapterObject(adapter),\n    settings: pouchSettings\n  };\n  var pouchDBOptions = Object.assign({}, pouchDbParameters.adapter, pouchSettingsFromRxDatabaseCreator, pouchDbParameters.settings);\n  runPluginHooks('preCreatePouchDb', pouchDbParameters);\n  return new PouchDB(pouchDbParameters.location, pouchDBOptions);\n}\n\nfunction _internalAdminPouch(name, adapter) {\n  var pouchSettingsFromRxDatabaseCreator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return _spawnPouchDB2(name, adapter, '_admin', 0, {\n    // no compaction because this only stores local documents\n    auto_compaction: false,\n    revs_limit: 1\n  }, pouchSettingsFromRxDatabaseCreator);\n}\n\nfunction _internalCollectionsPouch(name, adapter) {\n  var pouchSettingsFromRxDatabaseCreator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return _spawnPouchDB2(name, adapter, '_collections', 0, {\n    // no compaction because this only stores local documents\n    auto_compaction: false,\n    revs_limit: 1\n  }, pouchSettingsFromRxDatabaseCreator);\n}\n/**\n * removes the database and all its known data\n */\n\n\nexport function removeDatabase(databaseName, adapter) {\n  var adminPouch = _internalAdminPouch(databaseName, adapter);\n\n  var collectionsPouch = _internalCollectionsPouch(databaseName, adapter);\n\n  return collectionsPouch.allDocs({\n    include_docs: true\n  }) // remove collections\n  .then(function (collectionsData) {\n    return Promise.all(collectionsData.rows.map(function (colDoc) {\n      return colDoc.id;\n    }).map(function (id) {\n      var split = id.split('-');\n      var name = split[0];\n      var version = parseInt(split[1], 10);\n\n      var pouch = _spawnPouchDB2(databaseName, adapter, name, version);\n\n      return pouch.destroy();\n    }));\n  }) // remove internals\n  .then(function () {\n    return Promise.all([collectionsPouch.destroy(), adminPouch.destroy()]);\n  });\n}\n/**\n * check is the given adapter can be used\n */\n\nexport function checkAdapter(adapter) {\n  return overwritable.checkAdapter(adapter);\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxDatabaseBase;\n}\nexport function dbCount() {\n  return DB_COUNT;\n}\nexport default {\n  create: create,\n  removeDatabase: removeDatabase,\n  checkAdapter: checkAdapter,\n  isInstanceOf: isInstanceOf,\n  RxDatabaseBase: RxDatabaseBase,\n  dbCount: dbCount\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/rx-database.js"],"names":["_createClass","randomToken","IdleQueue","BroadcastChannel","adapterObject","hash","promiseWait","pluginMissing","newRxError","createRxSchema","isInstanceOf","isInstanceOfRxChangeEvent","createChangeEvent","changeEventfromJSON","overwritable","runPluginHooks","Subject","filter","PouchDB","validateCouchDBString","isLevelDown","create","createRxCollection","USED_COMBINATIONS","DB_COUNT","RxDatabaseBase","name","adapter","password","multiInstance","queryChangeDetection","arguments","length","undefined","options","pouchSettings","idleQueue","token","_subs","destroyed","subject","observable$","asObservable","pipe","cEvent","_adminPouch","_collectionsPouch","collections","_proto","prototype","dangerousRemoveCollectionInfo","colPouch","allDocs","then","docsRes","Promise","all","rows","map","row","_id","key","_rev","value","rev","doc","remove","_spawnPouchDB","collectionName","schemaVersion","_spawnPouchDB2","waitForLeadership","resolve","leaderElector","$emit","changeEvent","next","data","it","writeToSocket","removeCollectionDoc","schema","_this","docId","_collectionNamePrimary","get","lockedRun","collection","args","_this2","Object","assign","database","charAt","internalPrimary","properties","includes","schemaHash","colDoc","col","collectionDoc","pouch","version","find","selector","limit","oneDoc","docs","previousSchemaHash","keys","encryptedPaths","put","normalized","v","defineProperty","removeCollection","_this3","destroy","_removeAllOfCollection","knownVersions","pouches","fn","wrapCall","requestIdlePromise","dump","_decrypted","_collections","importDump","_exportedJSON","server","_options","_this4","broadcastChannel","setTimeout","close","_leaderElector","sub","unsubscribe","_removeUsedCombination","_this5","removeDatabase","createLeaderElector","isLeader","_properties","pseudoInstance","ownProperties","getOwnPropertyNames","prototypeProperties","getPrototypeOf","concat","_isNameAdapterUsed","used","forEach","ad","link","index","indexOf","splice","_preparePasswordHash","rxDatabase","pwHash","pwHashDoc","passwordHash","existingPasswordHash","_ensureStorageTokenExists","storageTokenDoc2","isIntern","socketDoc","toJSON","db","sendOverChannel","st","storageToken","d","postMessage","include_docs","relevantDocs","split","_prepareBroadcastChannel","broadcastChannel$","onmessage","msg","push","subscribe","cE","prepare","_internalAdminPouch","_internalCollectionsPouch","info","_ref","_ref2","_ref2$multiInstance","_ref2$queryChangeDete","_ref2$ignoreDuplicate","ignoreDuplicate","_ref2$options","_ref2$pouchSettings","adapters","leveldb","validatePassword","getPouchLocation","dbName","prefix","last","pop","ret","join","pouchSettingsFromRxDatabaseCreator","pouchLocation","pouchDbParameters","location","settings","pouchDBOptions","auto_compaction","revs_limit","databaseName","adminPouch","collectionsPouch","collectionsData","id","parseInt","checkAdapter","obj","dbCount"],"mappings":"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","sourcesContent":["import _createClass from \"@babel/runtime/helpers/createClass\";\nimport randomToken from 'random-token';\nimport IdleQueue from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { adapterObject, hash, promiseWait, pluginMissing } from './util';\nimport { newRxError } from './rx-error';\nimport { createRxSchema } from './rx-schema';\nimport { isInstanceOf as isInstanceOfRxChangeEvent, createChangeEvent, changeEventfromJSON } from './rx-change-event';\nimport overwritable from './overwritable';\nimport { runPluginHooks } from './hooks';\nimport { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { PouchDB, validateCouchDBString, isLevelDown } from './pouch-db';\nimport { create as createRxCollection } from './rx-collection';\n\n/**\n * stores the combinations\n * of used database-names with their adapters\n * so we can throw when the same database is created more then once\n */\nvar USED_COMBINATIONS = {};\nvar DB_COUNT = 0;\nexport var RxDatabaseBase = /*#__PURE__*/function () {\n  function RxDatabaseBase(name, adapter, password, multiInstance) {\n    var queryChangeDetection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    var pouchSettings = arguments.length > 6 ? arguments[6] : undefined;\n    this.idleQueue = new IdleQueue();\n    this.token = randomToken(10);\n    this._subs = [];\n    this.destroyed = false;\n    this.subject = new Subject();\n    this.observable$ = this.subject.asObservable().pipe(filter(function (cEvent) {\n      return isInstanceOfRxChangeEvent(cEvent);\n    }));\n    this._adminPouch = {};\n    this._collectionsPouch = {};\n    this.name = name;\n    this.adapter = adapter;\n    this.password = password;\n    this.multiInstance = multiInstance;\n    this.queryChangeDetection = queryChangeDetection;\n    this.options = options;\n    this.pouchSettings = pouchSettings;\n    this.collections = {};\n    if (typeof name !== 'undefined') DB_COUNT++;\n  }\n\n  var _proto = RxDatabaseBase.prototype;\n\n  /**\n   * removes all internal collection-info\n   * only use this if you have to upgrade from a major rxdb-version\n   * do NEVER use this to change the schema of a collection\n   */\n  _proto.dangerousRemoveCollectionInfo = function dangerousRemoveCollectionInfo() {\n    var colPouch = this._collectionsPouch;\n    return colPouch.allDocs().then(function (docsRes) {\n      return Promise.all(docsRes.rows.map(function (row) {\n        return {\n          _id: row.key,\n          _rev: row.value.rev\n        };\n      }).map(function (doc) {\n        return colPouch.remove(doc._id, doc._rev);\n      }));\n    });\n  }\n  /**\n   * spawns a new pouch-instance\n   */\n  ;\n\n  _proto._spawnPouchDB = function _spawnPouchDB(collectionName, schemaVersion) {\n    var pouchSettings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return _spawnPouchDB2(this.name, this.adapter, collectionName, schemaVersion, pouchSettings, this.pouchSettings);\n  }\n  /**\n   * returns a promise which resolves when the instance becomes leader\n   */\n  ;\n\n  _proto.waitForLeadership = function waitForLeadership() {\n    if (!this.multiInstance) return Promise.resolve(true);\n    return this.leaderElector.waitForLeadership();\n  }\n  /**\n   * This is the main handle-point for all change events\n   * ChangeEvents created by this instance go:\n   * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n   * ChangeEvents created by other instances go:\n   * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n   */\n  ;\n\n  _proto.$emit = function $emit(changeEvent) {\n    if (!changeEvent) return; // emit into own stream\n\n    this.subject.next(changeEvent); // write to socket if event was created by this instance\n\n    if (changeEvent.data.it === this.token) {\n      writeToSocket(this, changeEvent);\n    }\n  }\n  /**\n   * removes the collection-doc from this._collectionsPouch\n   */\n  ;\n\n  _proto.removeCollectionDoc = function removeCollectionDoc(name, schema) {\n    var _this = this;\n\n    var docId = _collectionNamePrimary(name, schema);\n\n    return this._collectionsPouch.get(docId).then(function (doc) {\n      return _this.lockedRun(function () {\n        return _this._collectionsPouch.remove(doc);\n      });\n    });\n  }\n  /**\n   * create or fetch a collection\n   */\n  ;\n\n  _proto.collection = function collection(args) {\n    var _this2 = this;\n\n    if (typeof args === 'string') return Promise.resolve(this.collections[args]);\n    args = Object.assign({}, args);\n    args.database = this;\n    runPluginHooks('preCreateRxCollection', args);\n\n    if (args.name.charAt(0) === '_') {\n      throw newRxError('DB2', {\n        name: args.name\n      });\n    }\n\n    if (this.collections[args.name]) {\n      throw newRxError('DB3', {\n        name: args.name\n      });\n    }\n\n    if (!args.schema) {\n      throw newRxError('DB4', {\n        name: args.name,\n        args: args\n      });\n    }\n\n    var internalPrimary = _collectionNamePrimary(args.name, args.schema); // check unallowed collection-names\n\n\n    if (properties().includes(args.name)) {\n      throw newRxError('DB5', {\n        name: args.name\n      });\n    }\n\n    var schema = createRxSchema(args.schema);\n    args.schema = schema; // check schemaHash\n\n    var schemaHash = schema.hash;\n    var colDoc;\n    var col;\n    return this.lockedRun(function () {\n      return _this2._collectionsPouch.get(internalPrimary);\n    })[\"catch\"](function () {\n      return null;\n    }).then(function (collectionDoc) {\n      colDoc = collectionDoc;\n\n      if (collectionDoc && collectionDoc.schemaHash !== schemaHash) {\n        // collection already exists with different schema, check if it has documents\n        var pouch = _this2._spawnPouchDB(args.name, args.schema.version, args.pouchSettings);\n\n        return pouch.find({\n          selector: {\n            _id: {}\n          },\n          limit: 1\n        }).then(function (oneDoc) {\n          if (oneDoc.docs.length !== 0) {\n            // we have one document\n            throw newRxError('DB6', {\n              name: args.name,\n              previousSchemaHash: collectionDoc.schemaHash,\n              schemaHash: schemaHash\n            });\n          }\n\n          return collectionDoc;\n        });\n      } else return collectionDoc;\n    }).then(function () {\n      return createRxCollection(args);\n    }).then(function (collection) {\n      col = collection;\n\n      if (Object.keys(collection.schema.encryptedPaths).length > 0 && !_this2.password) {\n        throw newRxError('DB7', {\n          name: args.name\n        });\n      }\n\n      if (!colDoc) {\n        return _this2.lockedRun(function () {\n          return _this2._collectionsPouch.put({\n            _id: internalPrimary,\n            schemaHash: schemaHash,\n            schema: collection.schema.normalized,\n            version: collection.schema.version\n          });\n        })[\"catch\"](function () {});\n      }\n    }).then(function () {\n      var cEvent = createChangeEvent('RxDatabase.collection', _this2, col);\n      cEvent.data.v = col.name;\n      cEvent.data.col = '_collections';\n      _this2.collections[args.name] = col;\n\n      if (!_this2[args.name]) {\n        Object.defineProperty(_this2, args.name, {\n          get: function get() {\n            return _this2.collections[args.name];\n          }\n        });\n      }\n\n      _this2.$emit(cEvent);\n\n      return col;\n    });\n  }\n  /**\n   * delete all data of the collection and its previous versions\n   */\n  ;\n\n  _proto.removeCollection = function removeCollection(collectionName) {\n    var _this3 = this;\n\n    if (this.collections[collectionName]) this.collections[collectionName].destroy(); // remove schemas from internal db\n\n    return _removeAllOfCollection(this, collectionName) // get all relevant pouchdb-instances\n    .then(function (knownVersions) {\n      return knownVersions.map(function (v) {\n        return _this3._spawnPouchDB(collectionName, v);\n      });\n    }) // remove documents\n    .then(function (pouches) {\n      return Promise.all(pouches.map(function (pouch) {\n        return _this3.lockedRun(function () {\n          return pouch.destroy();\n        });\n      }));\n    }).then(function () {});\n  }\n  /**\n   * runs the given function between idleQueue-locking\n   */\n  ;\n\n  _proto.lockedRun = function lockedRun(fn) {\n    return this.idleQueue.wrapCall(fn);\n  };\n\n  _proto.requestIdlePromise = function requestIdlePromise() {\n    return this.idleQueue.requestIdlePromise();\n  }\n  /**\n   * Export database to a JSON friendly format.\n   * @param _decrypted\n   * When true, all encrypted values will be decrypted.\n   */\n  ;\n\n  _proto.dump = function dump() {\n    var _decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var _collections = arguments.length > 1 ? arguments[1] : undefined;\n\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * Import the parsed JSON export into the collection.\n   * @param _exportedJSON The previously exported data from the `<db>.dump()` method.\n   * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n   * since data could be encrypted.\n   */\n  ;\n\n  _proto.importDump = function importDump(_exportedJSON) {\n    throw pluginMissing('json-dump');\n  }\n  /**\n   * spawn server\n   */\n  ;\n\n  _proto.server = function server(_options) {\n    throw pluginMissing('server');\n  }\n  /**\n   * destroys the database-instance and all collections\n   */\n  ;\n\n  _proto.destroy = function destroy() {\n    var _this4 = this;\n\n    if (this.destroyed) return Promise.resolve(false);\n    runPluginHooks('preDestroyRxDatabase', this);\n    DB_COUNT--;\n    this.destroyed = true;\n\n    if (this.broadcastChannel) {\n      /**\n       * The broadcast-channel gets closed lazy\n       * to ensure that all pending change-events\n       * get emitted\n       */\n      setTimeout(function () {\n        return _this4.broadcastChannel.close();\n      }, 1000);\n    }\n\n    if (this._leaderElector) this._leaderElector.destroy();\n\n    this._subs.map(function (sub) {\n      return sub.unsubscribe();\n    }); // destroy all collections\n\n\n    return Promise.all(Object.keys(this.collections).map(function (key) {\n      return _this4.collections[key];\n    }).map(function (col) {\n      return col.destroy();\n    })) // remove combination from USED_COMBINATIONS-map\n    .then(function () {\n      return _removeUsedCombination(_this4.name, _this4.adapter);\n    }).then(function () {\n      return true;\n    });\n  }\n  /**\n   * deletes the database and its stored data\n   */\n  ;\n\n  _proto.remove = function remove() {\n    var _this5 = this;\n\n    return this.destroy().then(function () {\n      return removeDatabase(_this5.name, _this5.adapter);\n    });\n  };\n\n  _createClass(RxDatabaseBase, [{\n    key: \"leaderElector\",\n    get: function get() {\n      if (!this._leaderElector) this._leaderElector = overwritable.createLeaderElector(this);\n      return this._leaderElector;\n    }\n  }, {\n    key: \"isLeader\",\n    get: function get() {\n      if (!this.multiInstance) return true;\n      return this.leaderElector.isLeader;\n    }\n  }, {\n    key: \"$\",\n    get: function get() {\n      return this.observable$;\n    }\n  }]);\n\n  return RxDatabaseBase;\n}();\n/**\n * returns all possible properties of a RxDatabase-instance\n */\n\nvar _properties = null;\nexport function properties() {\n  if (!_properties) {\n    var pseudoInstance = new RxDatabaseBase();\n    var ownProperties = Object.getOwnPropertyNames(pseudoInstance);\n    var prototypeProperties = Object.getOwnPropertyNames(Object.getPrototypeOf(pseudoInstance));\n    _properties = [].concat(ownProperties, prototypeProperties);\n  }\n\n  return _properties;\n}\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\n\nfunction _isNameAdapterUsed(name, adapter) {\n  if (!USED_COMBINATIONS[name]) return false;\n  var used = false;\n  USED_COMBINATIONS[name].forEach(function (ad) {\n    if (ad === adapter) used = true;\n  });\n\n  if (used) {\n    throw newRxError('DB8', {\n      name: name,\n      adapter: adapter,\n      link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n    });\n  }\n}\n\nfunction _removeUsedCombination(name, adapter) {\n  if (!USED_COMBINATIONS[name]) return;\n  var index = USED_COMBINATIONS[name].indexOf(adapter);\n  USED_COMBINATIONS[name].splice(index, 1);\n}\n/**\n * validates and inserts the password-hash\n * to ensure there is/was no other instance with a different password\n */\n\n\nexport function _preparePasswordHash(rxDatabase) {\n  if (!rxDatabase.password) return Promise.resolve(false);\n  var pwHash = hash(rxDatabase.password);\n  return rxDatabase._adminPouch.get('_local/pwHash')[\"catch\"](function () {\n    return null;\n  }).then(function (pwHashDoc) {\n    /**\n     * if pwHash was not saved, we save it,\n     * this operation might throw because another instance runs save at the same time,\n     * also we do not await the output because it does not mather\n     */\n    if (!pwHashDoc) {\n      rxDatabase._adminPouch.put({\n        _id: '_local/pwHash',\n        value: pwHash\n      })[\"catch\"](function () {\n        return null;\n      });\n    } // different hash was already set by other instance\n\n\n    if (pwHashDoc && rxDatabase.password && pwHash !== pwHashDoc.value) {\n      return rxDatabase.destroy().then(function () {\n        throw newRxError('DB1', {\n          passwordHash: hash(rxDatabase.password),\n          existingPasswordHash: pwHashDoc.value\n        });\n      });\n    }\n\n    return true;\n  });\n}\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\n\nexport function _ensureStorageTokenExists(rxDatabase) {\n  return rxDatabase._adminPouch.get('_local/storageToken')[\"catch\"](function () {\n    // no doc exists -> insert\n    return rxDatabase._adminPouch.put({\n      _id: '_local/storageToken',\n      value: randomToken(10)\n    })[\"catch\"](function () {}).then(function () {\n      return promiseWait(0);\n    });\n  }).then(function () {\n    return rxDatabase._adminPouch.get('_local/storageToken');\n  }).then(function (storageTokenDoc2) {\n    return storageTokenDoc2.value;\n  });\n}\n/**\n * writes the changeEvent to the broadcastChannel\n */\n\nexport function writeToSocket(rxDatabase, changeEvent) {\n  if (rxDatabase.multiInstance && !changeEvent.isIntern() && rxDatabase.broadcastChannel) {\n    var socketDoc = changeEvent.toJSON();\n    delete socketDoc.db;\n    var sendOverChannel = {\n      db: rxDatabase.token,\n      // database-token\n      st: rxDatabase.storageToken,\n      // storage-token\n      d: socketDoc\n    };\n    return rxDatabase.broadcastChannel.postMessage(sendOverChannel).then(function () {\n      return true;\n    });\n  } else return Promise.resolve(false);\n}\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\n\nexport function _collectionNamePrimary(name, schema) {\n  return name + '-' + schema.version;\n}\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\n\nexport function _removeAllOfCollection(rxDatabase, collectionName) {\n  return rxDatabase.lockedRun(function () {\n    return rxDatabase._collectionsPouch.allDocs({\n      include_docs: true\n    });\n  }).then(function (data) {\n    var relevantDocs = data.rows.map(function (row) {\n      return row.doc;\n    }).filter(function (doc) {\n      var name = doc._id.split('-')[0];\n\n      return name === collectionName;\n    });\n    return Promise.all(relevantDocs.map(function (doc) {\n      return rxDatabase.lockedRun(function () {\n        return rxDatabase._collectionsPouch.remove(doc);\n      });\n    })).then(function () {\n      return relevantDocs.map(function (doc) {\n        return doc.version;\n      });\n    });\n  });\n}\n\nfunction _prepareBroadcastChannel(rxDatabase) {\n  // broadcastChannel\n  rxDatabase.broadcastChannel = new BroadcastChannel('RxDB:' + rxDatabase.name + ':' + 'socket');\n  rxDatabase.broadcastChannel$ = new Subject();\n\n  rxDatabase.broadcastChannel.onmessage = function (msg) {\n    if (msg.st !== rxDatabase.storageToken) return; // not same storage-state\n\n    if (msg.db === rxDatabase.token) return; // same db\n\n    var changeEvent = changeEventfromJSON(msg.d);\n    rxDatabase.broadcastChannel$.next(changeEvent);\n  }; // TODO only subscribe when sth is listening to the event-chain\n\n\n  rxDatabase._subs.push(rxDatabase.broadcastChannel$.subscribe(function (cE) {\n    rxDatabase.$emit(cE);\n  }));\n}\n/**\n * do the async things for this database\n */\n\n\nfunction prepare(rxDatabase) {\n  rxDatabase._adminPouch = _internalAdminPouch(rxDatabase.name, rxDatabase.adapter, rxDatabase.pouchSettings);\n  rxDatabase._collectionsPouch = _internalCollectionsPouch(rxDatabase.name, rxDatabase.adapter, rxDatabase.pouchSettings); // ensure admin-pouch is useable\n\n  return rxDatabase._adminPouch.info().then(function () {\n    // validate/insert password-hash\n    return Promise.all([_ensureStorageTokenExists(rxDatabase), _preparePasswordHash(rxDatabase)]);\n  }).then(function (_ref) {\n    var storageToken = _ref[0];\n    rxDatabase.storageToken = storageToken;\n\n    if (rxDatabase.multiInstance) {\n      _prepareBroadcastChannel(rxDatabase);\n    }\n  });\n}\n\nexport function create(_ref2) {\n  var name = _ref2.name,\n      adapter = _ref2.adapter,\n      password = _ref2.password,\n      _ref2$multiInstance = _ref2.multiInstance,\n      multiInstance = _ref2$multiInstance === void 0 ? true : _ref2$multiInstance,\n      _ref2$queryChangeDete = _ref2.queryChangeDetection,\n      queryChangeDetection = _ref2$queryChangeDete === void 0 ? false : _ref2$queryChangeDete,\n      _ref2$ignoreDuplicate = _ref2.ignoreDuplicate,\n      ignoreDuplicate = _ref2$ignoreDuplicate === void 0 ? false : _ref2$ignoreDuplicate,\n      _ref2$options = _ref2.options,\n      options = _ref2$options === void 0 ? {} : _ref2$options,\n      _ref2$pouchSettings = _ref2.pouchSettings,\n      pouchSettings = _ref2$pouchSettings === void 0 ? {} : _ref2$pouchSettings;\n  validateCouchDBString(name); // check if pouchdb-adapter\n\n  if (typeof adapter === 'string') {\n    // TODO make a function hasAdapter()\n    if (!PouchDB.adapters || !PouchDB.adapters[adapter]) {\n      throw newRxError('DB9', {\n        adapter: adapter\n      });\n    }\n  } else {\n    isLevelDown(adapter);\n\n    if (!PouchDB.adapters || !PouchDB.adapters.leveldb) {\n      throw newRxError('DB10', {\n        adapter: adapter\n      });\n    }\n  }\n\n  if (password) {\n    overwritable.validatePassword(password);\n  } // check if combination already used\n\n\n  if (!ignoreDuplicate) {\n    _isNameAdapterUsed(name, adapter);\n  } // add to used_map\n\n\n  if (!USED_COMBINATIONS[name]) USED_COMBINATIONS[name] = [];\n  USED_COMBINATIONS[name].push(adapter);\n  var db = new RxDatabaseBase(name, adapter, password, multiInstance, queryChangeDetection, options, pouchSettings);\n  return prepare(db).then(function () {\n    runPluginHooks('createRxDatabase', db);\n    return db;\n  });\n}\nexport function getPouchLocation(dbName, collectionName, schemaVersion) {\n  var prefix = dbName + '-rxdb-' + schemaVersion + '-';\n\n  if (!collectionName.includes('/')) {\n    return prefix + collectionName;\n  } else {\n    // if collectionName is a path, we have to prefix the last part only\n    var split = collectionName.split('/');\n    var last = split.pop();\n    var ret = split.join('/');\n    ret += '/' + prefix + last;\n    return ret;\n  }\n}\n\nfunction _spawnPouchDB2(dbName, adapter, collectionName, schemaVersion) {\n  var pouchSettings = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var pouchSettingsFromRxDatabaseCreator = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  var pouchLocation = getPouchLocation(dbName, collectionName, schemaVersion);\n  var pouchDbParameters = {\n    location: pouchLocation,\n    adapter: adapterObject(adapter),\n    settings: pouchSettings\n  };\n  var pouchDBOptions = Object.assign({}, pouchDbParameters.adapter, pouchSettingsFromRxDatabaseCreator, pouchDbParameters.settings);\n  runPluginHooks('preCreatePouchDb', pouchDbParameters);\n  return new PouchDB(pouchDbParameters.location, pouchDBOptions);\n}\n\nfunction _internalAdminPouch(name, adapter) {\n  var pouchSettingsFromRxDatabaseCreator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return _spawnPouchDB2(name, adapter, '_admin', 0, {\n    // no compaction because this only stores local documents\n    auto_compaction: false,\n    revs_limit: 1\n  }, pouchSettingsFromRxDatabaseCreator);\n}\n\nfunction _internalCollectionsPouch(name, adapter) {\n  var pouchSettingsFromRxDatabaseCreator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return _spawnPouchDB2(name, adapter, '_collections', 0, {\n    // no compaction because this only stores local documents\n    auto_compaction: false,\n    revs_limit: 1\n  }, pouchSettingsFromRxDatabaseCreator);\n}\n/**\n * removes the database and all its known data\n */\n\n\nexport function removeDatabase(databaseName, adapter) {\n  var adminPouch = _internalAdminPouch(databaseName, adapter);\n\n  var collectionsPouch = _internalCollectionsPouch(databaseName, adapter);\n\n  return collectionsPouch.allDocs({\n    include_docs: true\n  }) // remove collections\n  .then(function (collectionsData) {\n    return Promise.all(collectionsData.rows.map(function (colDoc) {\n      return colDoc.id;\n    }).map(function (id) {\n      var split = id.split('-');\n      var name = split[0];\n      var version = parseInt(split[1], 10);\n\n      var pouch = _spawnPouchDB2(databaseName, adapter, name, version);\n\n      return pouch.destroy();\n    }));\n  }) // remove internals\n  .then(function () {\n    return Promise.all([collectionsPouch.destroy(), adminPouch.destroy()]);\n  });\n}\n/**\n * check is the given adapter can be used\n */\n\nexport function checkAdapter(adapter) {\n  return overwritable.checkAdapter(adapter);\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxDatabaseBase;\n}\nexport function dbCount() {\n  return DB_COUNT;\n}\nexport default {\n  create: create,\n  removeDatabase: removeDatabase,\n  checkAdapter: checkAdapter,\n  isInstanceOf: isInstanceOf,\n  RxDatabaseBase: RxDatabaseBase,\n  dbCount: dbCount\n};\n//# sourceMappingURL=rx-database.js.map"]},"metadata":{},"sourceType":"module"}