{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/src/components/AppWrapper.js\";\nimport React from 'react';\nimport auth0 from 'auth0-js';\nimport history from '../utils/history';\nimport { AUTH_CONFIG } from './auth0-variables';\nimport App from './App';\nimport Login from './Login';\nimport * as Database from './Database';\nimport Loading from './Loading'; // We will use this to show a loader while RxDB initializes\n\nvar AppWrapper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AppWrapper, _React$Component);\n\n  function AppWrapper() {\n    var _this;\n\n    _classCallCheck(this, AppWrapper);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppWrapper).call(this));\n    _this.auth0 = new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      audience: \"https://\".concat(AUTH_CONFIG.domain, \"/userinfo\"),\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    });\n\n    _this.handleAuthentication = function () {\n      _this.auth0.parseHash(function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this.setSession(authResult);\n        } else if (err) {\n          _this.logout();\n\n          console.error(err);\n          alert(\"Error: \".concat(err.error, \" - \").concat(err.errorDescription));\n        }\n      });\n    };\n\n    _this.login = _this.login.bind(_assertThisInitialized(_this));\n    _this.logout = _this.logout.bind(_assertThisInitialized(_this));\n    _this.handleAuthentication = _this.handleAuthentication.bind(_assertThisInitialized(_this));\n    _this.isExpired = _this.isExpired.bind(_assertThisInitialized(_this));\n    _this.getAccessToken = _this.getAccessToken.bind(_assertThisInitialized(_this));\n    _this.getIdToken = _this.getIdToken.bind(_assertThisInitialized(_this));\n    _this.renewSession = _this.renewSession.bind(_assertThisInitialized(_this));\n    _this.state = {\n      idToken: null,\n      userId: localStorage.getItem(\"userId\")\n    };\n    return _this;\n  }\n\n  _createClass(AppWrapper, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      return this.accessToken;\n    }\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken() {\n      return this.idToken;\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // Set isLoggedIn flag in localStorage\n      localStorage.setItem('isLoggedIn', 'true'); // Set the time that the access token will expire at\n\n      var expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n      this.accessToken = authResult.accessToken;\n      this.idToken = authResult.idToken;\n      this.expiresAt = expiresAt;\n      this.userId = authResult.idTokenPayload.sub;\n      localStorage.setItem('userId', this.userId); // navigate to the home route\n\n      history.replace('/');\n      this.setState({\n        idToken: authResult.idToken,\n        userId: this.userId\n      });\n    }\n  }, {\n    key: \"renewSession\",\n    value: function renewSession() {\n      var _this2 = this;\n\n      var interval = setInterval(function () {\n        var shouldRenewSession = _this2.isLoggedIn && (!_this2.idToken || _this2.isExpired());\n\n        if (window.navigator.onLine && shouldRenewSession) {\n          _this2.auth0.checkSession({}, function (err, authResult) {\n            if (authResult && authResult.accessToken && authResult.idToken) {\n              _this2.setSession(authResult);\n            } else if (err) {\n              _this2.logout();\n\n              console.log(err);\n              alert(\"Could not get token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n            }\n          });\n        }\n      }, 5000);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Remove tokens and expiry time\n      this.accessToken = null;\n      this.idToken = null;\n      this.expiresAt = 0; // Remove isLoggedIn flag from localStorage\n\n      localStorage.removeItem('isLoggedIn');\n      this.auth0.logout({\n        return_to: window.location.origin\n      }); // navigate to the home route\n\n      history.replace('/');\n      this.setState({\n        idToken: null\n      });\n    }\n  }, {\n    key: \"isExpired\",\n    value: function isExpired() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = this.expiresAt;\n      return new Date().getTime() > expiresAt;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var db, location;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Database.createDb());\n\n            case 2:\n              db = _context.sent;\n              this.setState({\n                db: db\n              }); // If this is a callback URL then do the right things\n\n              location = this.props.location;\n\n              if (!(location && location.pathname.startsWith('/callback') && /access_token|id_token|error/.test(location.hash))) {\n                _context.next = 8;\n                break;\n              }\n\n              this.handleAuthentication();\n              return _context.abrupt(\"return\");\n\n            case 8:\n              if (!this.isLoggedIn()) {\n                _context.next = 11;\n                break;\n              }\n\n              this.renewSession();\n              return _context.abrupt(\"return\");\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"isLoggedIn\",\n    value: function isLoggedIn() {\n      return localStorage.getItem('isLoggedIn') === 'true';\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var location = this.props.location;\n      var isCallbackPage = location && location.pathname.startsWith('/callback');\n\n      if (!this.isLoggedIn() && !isCallbackPage) {\n        return React.createElement(Login, {\n          loginHandler: this.login,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        });\n      } // Add this if statement\n\n\n      if (!this.state.db) {\n        return React.createElement(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        });\n      } // Pass db in props to the App\n\n\n      return React.createElement(App, {\n        auth: {\n          userId: this.userId\n        },\n        logoutHandler: this.logout,\n        db: this.state.db,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return AppWrapper;\n}(React.Component);\n\nexport { AppWrapper as default };","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/src/components/AppWrapper.js"],"names":["React","auth0","history","AUTH_CONFIG","App","Login","Database","Loading","AppWrapper","WebAuth","domain","clientID","clientId","redirectUri","callbackUrl","audience","responseType","scope","handleAuthentication","parseHash","err","authResult","accessToken","idToken","setSession","logout","console","error","alert","errorDescription","login","bind","isExpired","getAccessToken","getIdToken","renewSession","state","userId","localStorage","getItem","authorize","setItem","expiresAt","expiresIn","Date","getTime","idTokenPayload","sub","replace","setState","interval","setInterval","shouldRenewSession","isLoggedIn","window","navigator","onLine","checkSession","log","error_description","removeItem","return_to","location","origin","createDb","db","props","pathname","startsWith","test","hash","isCallbackPage","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport auth0 from 'auth0-js';\n\nimport history from '../utils/history';\nimport { AUTH_CONFIG } from './auth0-variables';\nimport App from './App';\nimport Login from './Login';\n\nimport * as Database from './Database';\nimport Loading from './Loading'; // We will use this to show a loader while RxDB initializes\n\nexport default class AppWrapper extends React.Component {\n  auth0 = new auth0.WebAuth({\n    domain: AUTH_CONFIG.domain,\n    clientID: AUTH_CONFIG.clientId,\n    redirectUri: AUTH_CONFIG.callbackUrl,\n    audience: `https://${AUTH_CONFIG.domain}/userinfo`,\n    responseType: 'token id_token',\n    scope: 'openid profile'\n  });\n\n  constructor() {\n    super();\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isExpired = this.isExpired.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n\n    this.state = {\n      idToken: null,\n      userId: localStorage.getItem(\"userId\"),\n    };\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication = () => {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        this.logout();\n        console.error(err);\n        alert(`Error: ${err.error} - ${err.errorDescription}`);\n      }\n    });\n  };\n\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  setSession(authResult) {\n    // Set isLoggedIn flag in localStorage\n    localStorage.setItem('isLoggedIn', 'true');\n\n    // Set the time that the access token will expire at\n    let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\n    this.accessToken = authResult.accessToken;\n    this.idToken = authResult.idToken;\n    this.expiresAt = expiresAt;\n    this.userId = authResult.idTokenPayload.sub;\n\n    localStorage.setItem('userId', this.userId);\n\n    // navigate to the home route\n    history.replace('/');\n    this.setState({\n      idToken: authResult.idToken,\n      userId: this.userId,\n    });\n  }\n\n  renewSession() {\n    const interval = setInterval(() => {\n      const shouldRenewSession = this.isLoggedIn &&\n        (!this.idToken || this.isExpired());\n  \n      if (window.navigator.onLine && shouldRenewSession) {\n        this.auth0.checkSession({}, (err, authResult) => {\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            this.setSession(authResult);\n          } else if (err) {\n            this.logout();\n            console.log(err);\n            alert(`Could not get token (${err.error}: ${err.error_description}).`);\n          }\n        });\n      }\n    }, 5000);\n  }\n\n  logout() {\n    // Remove tokens and expiry time\n    this.accessToken = null;\n    this.idToken = null;\n    this.expiresAt = 0;\n\n    // Remove isLoggedIn flag from localStorage\n    localStorage.removeItem('isLoggedIn');\n\n    this.auth0.logout({\n      return_to: window.location.origin\n    });\n\n    // navigate to the home route\n    history.replace('/');\n    this.setState({\n      idToken: null\n    });\n  }\n\n  isExpired() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = this.expiresAt;\n    return new Date().getTime() > expiresAt;\n  }\n\n  async componentDidMount() {\n    const db = await Database.createDb()\n        this.setState({ db });\n    // If this is a callback URL then do the right things\n    const location = this.props.location;\n    if (location && location.pathname.startsWith('/callback') && /access_token|id_token|error/.test(location.hash)) {\n      this.handleAuthentication();\n      return;\n    }\n\n    if (this.isLoggedIn()) {\n      this.renewSession();\n      return;\n    }\n  }\n\n  isLoggedIn() {\n    return localStorage.getItem('isLoggedIn') === 'true'\n  }\n\n  render() {\n    const location = this.props.location;\n    const isCallbackPage = location && location.pathname.startsWith('/callback');\n    if (!this.isLoggedIn() && !isCallbackPage) {\n        return (<Login loginHandler={this.login} />);\n    }\n    // Add this if statement\n    if(!this.state.db) {\n        return <Loading />\n    }\n    // Pass db in props to the App\n    return (<App\n        auth={{ userId: this.userId }}\n        logoutHandler={this.logout}\n        db={this.state.db}\n    />);\n}\n}\n"]},"metadata":{},"sourceType":"module"}