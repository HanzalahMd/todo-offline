{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\n/**\n * this plugin adds the keycompression-capabilities to rxdb\n * if you dont use this, ensure that you set disableKeyComression to false in your schema\n */\n\nimport { createCompressionTable, compressObject, decompressObject, compressedPath, compressQuery as _compressQuery, DEFAULT_COMPRESSION_FLAG } from 'jsonschema-key-compression';\nimport { overwriteGetterForCaching } from '../util';\nexport var KeyCompressor =\n/*#__PURE__*/\nfunction () {\n  function KeyCompressor(schema) {\n    this.schema = schema;\n  }\n  /**\n   * @overwrites itself on the first call\n   */\n\n\n  var _proto = KeyCompressor.prototype;\n  /**\n   * compress the keys of an object via the compression-table\n   */\n\n  _proto.compress = function compress(obj) {\n    if (!this.schema.doKeyCompression()) {\n      return obj;\n    } else {\n      return compressObject(this.table, obj);\n    }\n  };\n\n  _proto.decompress = function decompress(compressedObject) {\n    if (!this.schema.doKeyCompression()) {\n      return compressedObject;\n    } else {\n      return decompressObject(this.table, compressedObject);\n    }\n  }\n  /**\n   * get the full compressed-key-path of a object-path\n   */\n  ;\n\n  _proto.transformKey = function transformKey(objectPath) {\n    return compressedPath(this.table, objectPath); // > '|a.|b'\n  }\n  /**\n   * replace the keys of a query-obj with the compressed keys\n   * @return compressed queryJSON\n   */\n  ;\n\n  _proto.compressQuery = function compressQuery(queryJSON) {\n    if (!this.schema.doKeyCompression()) {\n      return queryJSON;\n    } else {\n      return _compressQuery(this.table, queryJSON);\n    }\n  };\n\n  _createClass(KeyCompressor, [{\n    key: \"table\",\n    get: function get() {\n      var jsonSchema = this.schema.normalized;\n      var table = createCompressionTable(jsonSchema, DEFAULT_COMPRESSION_FLAG, [this.schema.primaryPath, '_rev', '_attachments']);\n      return overwriteGetterForCaching(this, 'table', table);\n    }\n  }]);\n\n  return KeyCompressor;\n}();\nexport function create(schema) {\n  return new KeyCompressor(schema);\n}\nexport var rxdb = true;\nexport var prototypes = {};\nexport var overwritable = {\n  createKeyCompressor: create\n};\nexport var RxDBKeyCompressionPlugin = {\n  name: 'key-compression',\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/key-compression.js"],"names":["_createClass","createCompressionTable","compressObject","decompressObject","compressedPath","compressQuery","_compressQuery","DEFAULT_COMPRESSION_FLAG","overwriteGetterForCaching","KeyCompressor","schema","_proto","prototype","compress","obj","doKeyCompression","table","decompress","compressedObject","transformKey","objectPath","queryJSON","key","get","jsonSchema","normalized","primaryPath","create","rxdb","prototypes","overwritable","createKeyCompressor","RxDBKeyCompressionPlugin","name"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,oCAAzB;AAEA;;;;;AAIA,SAASC,sBAAT,EAAiCC,cAAjC,EAAiDC,gBAAjD,EAAmEC,cAAnE,EAAmFC,aAAa,IAAIC,cAApG,EAAoHC,wBAApH,QAAoJ,4BAApJ;AACA,SAASC,yBAAT,QAA0C,SAA1C;AACA,OAAO,IAAIC,aAAa;AAAG;AAAa,YAAY;AAClD,WAASA,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,SAAKA,MAAL,GAAcA,MAAd;AACD;AACD;;;;;AAKA,MAAIC,MAAM,GAAGF,aAAa,CAACG,SAA3B;AAEA;;;;AAGAD,EAAAA,MAAM,CAACE,QAAP,GAAkB,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACvC,QAAI,CAAC,KAAKJ,MAAL,CAAYK,gBAAZ,EAAL,EAAqC;AACnC,aAAOD,GAAP;AACD,KAFD,MAEO;AACL,aAAOZ,cAAc,CAAC,KAAKc,KAAN,EAAaF,GAAb,CAArB;AACD;AACF,GAND;;AAQAH,EAAAA,MAAM,CAACM,UAAP,GAAoB,SAASA,UAAT,CAAoBC,gBAApB,EAAsC;AACxD,QAAI,CAAC,KAAKR,MAAL,CAAYK,gBAAZ,EAAL,EAAqC;AACnC,aAAOG,gBAAP;AACD,KAFD,MAEO;AACL,aAAOf,gBAAgB,CAAC,KAAKa,KAAN,EAAaE,gBAAb,CAAvB;AACD;AACF;AACD;;;AAPA;;AAYAP,EAAAA,MAAM,CAACQ,YAAP,GAAsB,SAASA,YAAT,CAAsBC,UAAtB,EAAkC;AACtD,WAAOhB,cAAc,CAAC,KAAKY,KAAN,EAAaI,UAAb,CAArB,CADsD,CACP;AAChD;AACD;;;;AAHA;;AASAT,EAAAA,MAAM,CAACN,aAAP,GAAuB,SAASA,aAAT,CAAuBgB,SAAvB,EAAkC;AACvD,QAAI,CAAC,KAAKX,MAAL,CAAYK,gBAAZ,EAAL,EAAqC;AACnC,aAAOM,SAAP;AACD,KAFD,MAEO;AACL,aAAOf,cAAc,CAAC,KAAKU,KAAN,EAAaK,SAAb,CAArB;AACD;AACF,GAND;;AAQArB,EAAAA,YAAY,CAACS,aAAD,EAAgB,CAAC;AAC3Ba,IAAAA,GAAG,EAAE,OADsB;AAE3BC,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,UAAIC,UAAU,GAAG,KAAKd,MAAL,CAAYe,UAA7B;AACA,UAAIT,KAAK,GAAGf,sBAAsB,CAACuB,UAAD,EAAajB,wBAAb,EAAuC,CAAC,KAAKG,MAAL,CAAYgB,WAAb,EAA0B,MAA1B,EAAkC,cAAlC,CAAvC,CAAlC;AACA,aAAOlB,yBAAyB,CAAC,IAAD,EAAO,OAAP,EAAgBQ,KAAhB,CAAhC;AACD;AAN0B,GAAD,CAAhB,CAAZ;;AASA,SAAOP,aAAP;AACD,CA7DuC,EAAjC;AA8DP,OAAO,SAASkB,MAAT,CAAgBjB,MAAhB,EAAwB;AAC7B,SAAO,IAAID,aAAJ,CAAkBC,MAAlB,CAAP;AACD;AACD,OAAO,IAAIkB,IAAI,GAAG,IAAX;AACP,OAAO,IAAIC,UAAU,GAAG,EAAjB;AACP,OAAO,IAAIC,YAAY,GAAG;AACxBC,EAAAA,mBAAmB,EAAEJ;AADG,CAAnB;AAGP,OAAO,IAAIK,wBAAwB,GAAG;AACpCC,EAAAA,IAAI,EAAE,iBAD8B;AAEpCL,EAAAA,IAAI,EAAEA,IAF8B;AAGpCC,EAAAA,UAAU,EAAEA,UAHwB;AAIpCC,EAAAA,YAAY,EAAEA;AAJsB,CAA/B","sourcesContent":["import _createClass from \"@babel/runtime/helpers/createClass\";\n\n/**\n * this plugin adds the keycompression-capabilities to rxdb\n * if you dont use this, ensure that you set disableKeyComression to false in your schema\n */\nimport { createCompressionTable, compressObject, decompressObject, compressedPath, compressQuery as _compressQuery, DEFAULT_COMPRESSION_FLAG } from 'jsonschema-key-compression';\nimport { overwriteGetterForCaching } from '../util';\nexport var KeyCompressor = /*#__PURE__*/function () {\n  function KeyCompressor(schema) {\n    this.schema = schema;\n  }\n  /**\n   * @overwrites itself on the first call\n   */\n\n\n  var _proto = KeyCompressor.prototype;\n\n  /**\n   * compress the keys of an object via the compression-table\n   */\n  _proto.compress = function compress(obj) {\n    if (!this.schema.doKeyCompression()) {\n      return obj;\n    } else {\n      return compressObject(this.table, obj);\n    }\n  };\n\n  _proto.decompress = function decompress(compressedObject) {\n    if (!this.schema.doKeyCompression()) {\n      return compressedObject;\n    } else {\n      return decompressObject(this.table, compressedObject);\n    }\n  }\n  /**\n   * get the full compressed-key-path of a object-path\n   */\n  ;\n\n  _proto.transformKey = function transformKey(objectPath) {\n    return compressedPath(this.table, objectPath); // > '|a.|b'\n  }\n  /**\n   * replace the keys of a query-obj with the compressed keys\n   * @return compressed queryJSON\n   */\n  ;\n\n  _proto.compressQuery = function compressQuery(queryJSON) {\n    if (!this.schema.doKeyCompression()) {\n      return queryJSON;\n    } else {\n      return _compressQuery(this.table, queryJSON);\n    }\n  };\n\n  _createClass(KeyCompressor, [{\n    key: \"table\",\n    get: function get() {\n      var jsonSchema = this.schema.normalized;\n      var table = createCompressionTable(jsonSchema, DEFAULT_COMPRESSION_FLAG, [this.schema.primaryPath, '_rev', '_attachments']);\n      return overwriteGetterForCaching(this, 'table', table);\n    }\n  }]);\n\n  return KeyCompressor;\n}();\nexport function create(schema) {\n  return new KeyCompressor(schema);\n}\nexport var rxdb = true;\nexport var prototypes = {};\nexport var overwritable = {\n  createKeyCompressor: create\n};\nexport var RxDBKeyCompressionPlugin = {\n  name: 'key-compression',\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable\n};\n//# sourceMappingURL=key-compression.js.map"]},"metadata":{},"sourceType":"module"}