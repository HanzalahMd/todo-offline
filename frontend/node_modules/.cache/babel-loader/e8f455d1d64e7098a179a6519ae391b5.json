{"ast":null,"code":"import { pushAtSortPosition } from 'array-push-at-sort-position';\nexport var doNothing = function doNothing(_input) {};\nexport var insertFirst = function insertFirst(input) {\n  input.previousResults.unshift(input.changeEvent.doc);\n\n  if (input.keyDocumentMap) {\n    input.keyDocumentMap.set(input.changeEvent.id, input.changeEvent.doc);\n  }\n};\nexport var insertLast = function insertLast(input) {\n  input.previousResults.push(input.changeEvent.doc);\n\n  if (input.keyDocumentMap) {\n    input.keyDocumentMap.set(input.changeEvent.id, input.changeEvent.doc);\n  }\n};\nexport var removeFirstItem = function removeFirstItem(input) {\n  var first = input.previousResults.shift();\n\n  if (input.keyDocumentMap && first) {\n    input.keyDocumentMap.delete(first[input.queryParams.primaryKey]);\n  }\n};\nexport var removeLastItem = function removeLastItem(input) {\n  var last = input.previousResults.pop();\n\n  if (input.keyDocumentMap && last) {\n    input.keyDocumentMap.delete(last[input.queryParams.primaryKey]);\n  }\n};\nexport var removeFirstInsertLast = function removeFirstInsertLast(input) {\n  removeFirstItem(input);\n  insertLast(input);\n};\nexport var removeLastInsertFirst = function removeLastInsertFirst(input) {\n  removeLastItem(input);\n  insertFirst(input);\n};\nexport var removeExisting = function removeExisting(input) {\n  if (input.keyDocumentMap) {\n    input.keyDocumentMap.delete(input.changeEvent.id);\n  } // find index of document\n\n\n  var primary = input.queryParams.primaryKey;\n  var results = input.previousResults;\n\n  for (var i = 0; i < results.length; i++) {\n    var item = results[i]; // remove\n    // console.dir(item);\n\n    if (item[primary] === input.changeEvent.id) {\n      results.splice(i, 1);\n      break;\n    }\n  }\n};\nexport var replaceExisting = function replaceExisting(input) {\n  // find index of document\n  var doc = input.changeEvent.doc;\n  var primary = input.queryParams.primaryKey;\n  var results = input.previousResults;\n\n  for (var i = 0; i < results.length; i++) {\n    var item = results[i]; // replace\n\n    if (item[primary] === input.changeEvent.id) {\n      results[i] = doc;\n\n      if (input.keyDocumentMap) {\n        input.keyDocumentMap.set(input.changeEvent.id, doc);\n      }\n\n      break;\n    }\n  }\n};\n/**\n * this function always returns wrong results\n * it must be later optimised out\n * otherwise there is something broken\n */\n\nexport var alwaysWrong = function alwaysWrong(input) {\n  var wrongHuman = {\n    _id: 'wrongHuman' + new Date().getTime()\n  };\n  input.previousResults.length = 0; // clear array\n\n  input.previousResults.push(wrongHuman);\n\n  if (input.keyDocumentMap) {\n    input.keyDocumentMap.clear();\n    input.keyDocumentMap.set(wrongHuman._id, wrongHuman);\n  }\n};\nexport var insertAtSortPosition = function insertAtSortPosition(input) {\n  var doc = input.changeEvent.doc;\n\n  if (input.keyDocumentMap) {\n    input.keyDocumentMap.set(input.changeEvent.id, doc);\n  }\n\n  pushAtSortPosition(input.previousResults, doc, input.queryParams.sortComparator, true);\n};\nexport var removeExistingAndInsertAtSortPosition = function removeExistingAndInsertAtSortPosition(input) {\n  removeExisting(input);\n  insertAtSortPosition(input);\n};\nexport var runFullQueryAgain = function runFullQueryAgain(_input) {\n  throw new Error('Action runFullQueryAgain must be implemented by yourself');\n};\nexport var unknownAction = function unknownAction(_input) {\n  throw new Error('Action unknownAction should never be called');\n};","map":{"version":3,"sources":["../../../src/actions/action-functions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { pushAtSortPosition } from 'array-push-at-sort-position';\nexport var doNothing = function (_input) { };\nexport var insertFirst = function (input) {\n    input.previousResults.unshift(input.changeEvent.doc);\n    if (input.keyDocumentMap) {\n        input.keyDocumentMap.set(input.changeEvent.id, input.changeEvent.doc);\n    }\n};\nexport var insertLast = function (input) {\n    input.previousResults.push(input.changeEvent.doc);\n    if (input.keyDocumentMap) {\n        input.keyDocumentMap.set(input.changeEvent.id, input.changeEvent.doc);\n    }\n};\nexport var removeFirstItem = function (input) {\n    var first = input.previousResults.shift();\n    if (input.keyDocumentMap && first) {\n        input.keyDocumentMap.delete(first[input.queryParams.primaryKey]);\n    }\n};\nexport var removeLastItem = function (input) {\n    var last = input.previousResults.pop();\n    if (input.keyDocumentMap && last) {\n        input.keyDocumentMap.delete(last[input.queryParams.primaryKey]);\n    }\n};\nexport var removeFirstInsertLast = function (input) {\n    removeFirstItem(input);\n    insertLast(input);\n};\nexport var removeLastInsertFirst = function (input) {\n    removeLastItem(input);\n    insertFirst(input);\n};\nexport var removeExisting = function (input) {\n    if (input.keyDocumentMap) {\n        input.keyDocumentMap.delete(input.changeEvent.id);\n    }\n    // find index of document\n    var primary = input.queryParams.primaryKey;\n    var results = input.previousResults;\n    for (var i = 0; i < results.length; i++) {\n        var item = results[i];\n        // remove\n        // console.dir(item);\n        if (item[primary] === input.changeEvent.id) {\n            results.splice(i, 1);\n            break;\n        }\n    }\n};\nexport var replaceExisting = function (input) {\n    // find index of document\n    var doc = input.changeEvent.doc;\n    var primary = input.queryParams.primaryKey;\n    var results = input.previousResults;\n    for (var i = 0; i < results.length; i++) {\n        var item = results[i];\n        // replace\n        if (item[primary] === input.changeEvent.id) {\n            results[i] = doc;\n            if (input.keyDocumentMap) {\n                input.keyDocumentMap.set(input.changeEvent.id, doc);\n            }\n            break;\n        }\n    }\n};\n/**\n * this function always returns wrong results\n * it must be later optimised out\n * otherwise there is something broken\n */\nexport var alwaysWrong = function (input) {\n    var wrongHuman = {\n        _id: 'wrongHuman' + new Date().getTime()\n    };\n    input.previousResults.length = 0; // clear array\n    input.previousResults.push(wrongHuman);\n    if (input.keyDocumentMap) {\n        input.keyDocumentMap.clear();\n        input.keyDocumentMap.set(wrongHuman._id, wrongHuman);\n    }\n};\nexport var insertAtSortPosition = function (input) {\n    var doc = input.changeEvent.doc;\n    if (input.keyDocumentMap) {\n        input.keyDocumentMap.set(input.changeEvent.id, doc);\n    }\n    pushAtSortPosition(input.previousResults, doc, input.queryParams.sortComparator, true);\n};\nexport var removeExistingAndInsertAtSortPosition = function (input) {\n    removeExisting(input);\n    insertAtSortPosition(input);\n};\nexport var runFullQueryAgain = function (_input) {\n    throw new Error('Action runFullQueryAgain must be implemented by yourself');\n};\nexport var unknownAction = function (_input) {\n    throw new Error('Action unknownAction should never be called');\n};\n//# sourceMappingURL=action-functions.js.map"]},"metadata":{},"sourceType":"module"}