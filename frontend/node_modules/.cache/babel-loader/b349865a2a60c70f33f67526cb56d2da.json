{"ast":null,"code":"var thisAtob = function thisAtob(str) {\n  return atob(str);\n};\n\nvar thisBtoa = function thisBtoa(str) {\n  return btoa(str);\n}; // Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor (e.g.\n// old QtWebKit versions, Android < 4.4).\n\n\nfunction createBlob(parts, properties) {\n  /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n  parts = parts || [];\n  properties = properties || {};\n\n  try {\n    return new Blob(parts, properties);\n  } catch (e) {\n    if (e.name !== \"TypeError\") {\n      throw e;\n    }\n\n    var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n    var builder = new Builder();\n\n    for (var i = 0; i < parts.length; i += 1) {\n      builder.append(parts[i]);\n    }\n\n    return builder.getBlob(properties.type);\n  }\n} // From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\n\n\nfunction binaryStringToArrayBuffer(bin) {\n  var length = bin.length;\n  var buf = new ArrayBuffer(length);\n  var arr = new Uint8Array(buf);\n\n  for (var i = 0; i < length; i++) {\n    arr[i] = bin.charCodeAt(i);\n  }\n\n  return buf;\n}\n\nfunction binStringToBluffer(binString, type) {\n  return createBlob([binaryStringToArrayBuffer(binString)], {\n    type: type\n  });\n}\n\nfunction b64ToBluffer(b64, type) {\n  return binStringToBluffer(thisAtob(b64), type);\n} //Can't find original post, but this is close\n//http://stackoverflow.com/questions/6965107/ (continues on next line)\n//converting-between-strings-and-arraybuffers\n\n\nfunction arrayBufferToBinaryString(buffer) {\n  var binary = '';\n  var bytes = new Uint8Array(buffer);\n  var length = bytes.byteLength;\n\n  for (var i = 0; i < length; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n\n  return binary;\n} // shim for browsers that don't support it\n\n\nfunction readAsBinaryString(blob, callback) {\n  var reader = new FileReader();\n  var hasBinaryString = typeof reader.readAsBinaryString === 'function';\n\n  reader.onloadend = function (e) {\n    var result = e.target.result || '';\n\n    if (hasBinaryString) {\n      return callback(result);\n    }\n\n    callback(arrayBufferToBinaryString(result));\n  };\n\n  if (hasBinaryString) {\n    reader.readAsBinaryString(blob);\n  } else {\n    reader.readAsArrayBuffer(blob);\n  }\n}\n\nfunction blobToBinaryString(blobOrBuffer, callback) {\n  readAsBinaryString(blobOrBuffer, function (bin) {\n    callback(bin);\n  });\n}\n\nfunction blobToBase64(blobOrBuffer, callback) {\n  blobToBinaryString(blobOrBuffer, function (base64) {\n    callback(thisBtoa(base64));\n  });\n} // simplified API. universal browser support is assumed\n\n\nfunction readAsArrayBuffer(blob, callback) {\n  var reader = new FileReader();\n\n  reader.onloadend = function (e) {\n    var result = e.target.result || new ArrayBuffer(0);\n    callback(result);\n  };\n\n  reader.readAsArrayBuffer(blob);\n} // this is not used in the browser\n\n\nfunction typedBuffer() {}\n\nexport { thisAtob as atob, thisBtoa as btoa, b64ToBluffer as base64StringToBlobOrBuffer, binaryStringToArrayBuffer, binStringToBluffer as binaryStringToBlobOrBuffer, createBlob as blob, blobToBase64 as blobOrBufferToBase64, blobToBinaryString as blobOrBufferToBinaryString, readAsArrayBuffer, readAsBinaryString, typedBuffer };","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/pouchdb-utils/node_modules/pouchdb-binary-utils/lib/index-browser.es.js"],"names":["thisAtob","str","atob","thisBtoa","btoa","createBlob","parts","properties","Blob","e","name","Builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","builder","i","length","append","getBlob","type","binaryStringToArrayBuffer","bin","buf","ArrayBuffer","arr","Uint8Array","charCodeAt","binStringToBluffer","binString","b64ToBluffer","b64","arrayBufferToBinaryString","buffer","binary","bytes","byteLength","String","fromCharCode","readAsBinaryString","blob","callback","reader","FileReader","hasBinaryString","onloadend","result","target","readAsArrayBuffer","blobToBinaryString","blobOrBuffer","blobToBase64","base64","typedBuffer","base64StringToBlobOrBuffer","binaryStringToBlobOrBuffer","blobOrBufferToBase64","blobOrBufferToBinaryString"],"mappings":"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","sourcesContent":["var thisAtob = function (str) {\n  return atob(str);\n};\n\nvar thisBtoa = function (str) {\n  return btoa(str);\n};\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor (e.g.\n// old QtWebKit versions, Android < 4.4).\nfunction createBlob(parts, properties) {\n  /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n  parts = parts || [];\n  properties = properties || {};\n  try {\n    return new Blob(parts, properties);\n  } catch (e) {\n    if (e.name !== \"TypeError\") {\n      throw e;\n    }\n    var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :\n                  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :\n                  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder :\n                  WebKitBlobBuilder;\n    var builder = new Builder();\n    for (var i = 0; i < parts.length; i += 1) {\n      builder.append(parts[i]);\n    }\n    return builder.getBlob(properties.type);\n  }\n}\n\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction binaryStringToArrayBuffer(bin) {\n  var length = bin.length;\n  var buf = new ArrayBuffer(length);\n  var arr = new Uint8Array(buf);\n  for (var i = 0; i < length; i++) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return buf;\n}\n\nfunction binStringToBluffer(binString, type) {\n  return createBlob([binaryStringToArrayBuffer(binString)], {type: type});\n}\n\nfunction b64ToBluffer(b64, type) {\n  return binStringToBluffer(thisAtob(b64), type);\n}\n\n//Can't find original post, but this is close\n//http://stackoverflow.com/questions/6965107/ (continues on next line)\n//converting-between-strings-and-arraybuffers\nfunction arrayBufferToBinaryString(buffer) {\n  var binary = '';\n  var bytes = new Uint8Array(buffer);\n  var length = bytes.byteLength;\n  for (var i = 0; i < length; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return binary;\n}\n\n// shim for browsers that don't support it\nfunction readAsBinaryString(blob, callback) {\n  var reader = new FileReader();\n  var hasBinaryString = typeof reader.readAsBinaryString === 'function';\n  reader.onloadend = function (e) {\n    var result = e.target.result || '';\n    if (hasBinaryString) {\n      return callback(result);\n    }\n    callback(arrayBufferToBinaryString(result));\n  };\n  if (hasBinaryString) {\n    reader.readAsBinaryString(blob);\n  } else {\n    reader.readAsArrayBuffer(blob);\n  }\n}\n\nfunction blobToBinaryString(blobOrBuffer, callback) {\n  readAsBinaryString(blobOrBuffer, function (bin) {\n    callback(bin);\n  });\n}\n\nfunction blobToBase64(blobOrBuffer, callback) {\n  blobToBinaryString(blobOrBuffer, function (base64) {\n    callback(thisBtoa(base64));\n  });\n}\n\n// simplified API. universal browser support is assumed\nfunction readAsArrayBuffer(blob, callback) {\n  var reader = new FileReader();\n  reader.onloadend = function (e) {\n    var result = e.target.result || new ArrayBuffer(0);\n    callback(result);\n  };\n  reader.readAsArrayBuffer(blob);\n}\n\n// this is not used in the browser\nfunction typedBuffer() {\n}\n\nexport { thisAtob as atob, thisBtoa as btoa, b64ToBluffer as base64StringToBlobOrBuffer, binaryStringToArrayBuffer, binStringToBluffer as binaryStringToBlobOrBuffer, createBlob as blob, blobToBase64 as blobOrBufferToBase64, blobToBinaryString as blobOrBufferToBinaryString, readAsArrayBuffer, readAsBinaryString, typedBuffer };\n"]},"metadata":{},"sourceType":"module"}