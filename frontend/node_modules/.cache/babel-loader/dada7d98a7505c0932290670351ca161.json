{"ast":null,"code":"import { calculateActionName, runAction } from 'event-reduce-js';\nexport function getSortFieldsOfQuery(primaryKey, query) {\n  if (!query.sort || query.sort.length === 0) {\n    return [primaryKey];\n  } else {\n    return query.sort.map(function (part) {\n      return Object.keys(part)[0];\n    });\n  }\n}\nexport var RXQUERY_QUERY_PARAMS_CACHE = new WeakMap();\nexport function getQueryParams(rxQuery) {\n  if (!RXQUERY_QUERY_PARAMS_CACHE.has(rxQuery)) {\n    var storage = rxQuery.collection.database.storage;\n    var queryJson = rxQuery.toJSON();\n    var primaryKey = rxQuery.collection.schema.primaryPath;\n    var ret = {\n      primaryKey: rxQuery.collection.schema.primaryPath,\n      skip: queryJson.skip,\n      limit: queryJson.limit,\n      sortFields: getSortFieldsOfQuery(primaryKey, queryJson),\n      sortComparator: storage.getSortComparator(primaryKey, queryJson),\n      queryMatcher: storage.getQueryMatcher(primaryKey, queryJson)\n    };\n    RXQUERY_QUERY_PARAMS_CACHE.set(rxQuery, ret);\n    return ret;\n  } else {\n    return RXQUERY_QUERY_PARAMS_CACHE.get(rxQuery);\n  }\n}\nexport function calculateNewResults(rxQuery, rxChangeEvents) {\n  if (!rxQuery.collection.database.eventReduce) {\n    return {\n      runFullQueryAgain: true\n    };\n  }\n\n  var queryParams = getQueryParams(rxQuery);\n\n  var previousResults = rxQuery._resultsData.slice();\n\n  var previousResultsMap = rxQuery._resultsDataMap;\n  var changed = false;\n  var foundNonOptimizeable = rxChangeEvents.find(function (cE) {\n    var eventReduceEvent = cE.toEventReduceChangeEvent();\n    var actionName = calculateActionName({\n      queryParams: queryParams,\n      changeEvent: eventReduceEvent,\n      previousResults: previousResults,\n      keyDocumentMap: previousResultsMap\n    });\n\n    if (actionName === 'runFullQueryAgain') {\n      return true;\n    } else if (actionName !== 'doNothing') {\n      changed = true;\n      runAction(actionName, queryParams, eventReduceEvent, previousResults, previousResultsMap);\n      return false;\n    }\n  });\n\n  if (foundNonOptimizeable) {\n    return {\n      runFullQueryAgain: true\n    };\n  } else {\n    return {\n      runFullQueryAgain: false,\n      changed: changed,\n      newResults: previousResults\n    };\n  }\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/event-reduce.js"],"names":["calculateActionName","runAction","getSortFieldsOfQuery","primaryKey","query","sort","length","map","part","Object","keys","RXQUERY_QUERY_PARAMS_CACHE","WeakMap","getQueryParams","rxQuery","has","storage","collection","database","queryJson","toJSON","schema","primaryPath","ret","skip","limit","sortFields","sortComparator","getSortComparator","queryMatcher","getQueryMatcher","set","get","calculateNewResults","rxChangeEvents","eventReduce","runFullQueryAgain","queryParams","previousResults","_resultsData","slice","previousResultsMap","_resultsDataMap","changed","foundNonOptimizeable","find","cE","eventReduceEvent","toEventReduceChangeEvent","actionName","changeEvent","keyDocumentMap","newResults"],"mappings":"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","sourcesContent":["import { calculateActionName, runAction } from 'event-reduce-js';\nexport function getSortFieldsOfQuery(primaryKey, query) {\n  if (!query.sort || query.sort.length === 0) {\n    return [primaryKey];\n  } else {\n    return query.sort.map(function (part) {\n      return Object.keys(part)[0];\n    });\n  }\n}\nexport var RXQUERY_QUERY_PARAMS_CACHE = new WeakMap();\nexport function getQueryParams(rxQuery) {\n  if (!RXQUERY_QUERY_PARAMS_CACHE.has(rxQuery)) {\n    var storage = rxQuery.collection.database.storage;\n    var queryJson = rxQuery.toJSON();\n    var primaryKey = rxQuery.collection.schema.primaryPath;\n    var ret = {\n      primaryKey: rxQuery.collection.schema.primaryPath,\n      skip: queryJson.skip,\n      limit: queryJson.limit,\n      sortFields: getSortFieldsOfQuery(primaryKey, queryJson),\n      sortComparator: storage.getSortComparator(primaryKey, queryJson),\n      queryMatcher: storage.getQueryMatcher(primaryKey, queryJson)\n    };\n    RXQUERY_QUERY_PARAMS_CACHE.set(rxQuery, ret);\n    return ret;\n  } else {\n    return RXQUERY_QUERY_PARAMS_CACHE.get(rxQuery);\n  }\n}\nexport function calculateNewResults(rxQuery, rxChangeEvents) {\n  if (!rxQuery.collection.database.eventReduce) {\n    return {\n      runFullQueryAgain: true\n    };\n  }\n\n  var queryParams = getQueryParams(rxQuery);\n\n  var previousResults = rxQuery._resultsData.slice();\n\n  var previousResultsMap = rxQuery._resultsDataMap;\n  var changed = false;\n  var foundNonOptimizeable = rxChangeEvents.find(function (cE) {\n    var eventReduceEvent = cE.toEventReduceChangeEvent();\n    var actionName = calculateActionName({\n      queryParams: queryParams,\n      changeEvent: eventReduceEvent,\n      previousResults: previousResults,\n      keyDocumentMap: previousResultsMap\n    });\n\n    if (actionName === 'runFullQueryAgain') {\n      return true;\n    } else if (actionName !== 'doNothing') {\n      changed = true;\n      runAction(actionName, queryParams, eventReduceEvent, previousResults, previousResultsMap);\n      return false;\n    }\n  });\n\n  if (foundNonOptimizeable) {\n    return {\n      runFullQueryAgain: true\n    };\n  } else {\n    return {\n      runFullQueryAgain: false,\n      changed: changed,\n      newResults: previousResults\n    };\n  }\n}\n//# sourceMappingURL=event-reduce.js.map"]},"metadata":{},"sourceType":"module"}