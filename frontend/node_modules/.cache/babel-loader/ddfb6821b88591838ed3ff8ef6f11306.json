{"ast":null,"code":"import { createQueryBuilder, OTHER_MANGO_ATTRIBUTES, OTHER_MANGO_OPERATORS } from './mquery/nosql-query-builder';\nimport { RxQueryBase, tunnelQueryCache } from '../../rx-query';\nimport { clone } from '../../util'; // if the query-builder plugin is used, we have to save it's last path\n\nvar RXQUERY_OTHER_FLAG = 'queryBuilderPath';\nexport function runBuildingStep(rxQuery, functionName, value) {\n  var queryBuilder = createQueryBuilder(clone(rxQuery.mangoQuery));\n\n  if (rxQuery.other[RXQUERY_OTHER_FLAG]) {\n    queryBuilder._path = rxQuery.other[RXQUERY_OTHER_FLAG];\n  }\n\n  queryBuilder[functionName](value); // run\n\n  var queryBuilderJson = queryBuilder.toJSON();\n  var newQuery = new RxQueryBase(rxQuery.op, queryBuilderJson.query, rxQuery.collection);\n\n  if (queryBuilderJson.path) {\n    newQuery.other[RXQUERY_OTHER_FLAG] = queryBuilderJson.path;\n  }\n\n  var tunneled = tunnelQueryCache(newQuery);\n  return tunneled;\n}\nexport function applyBuildingStep(proto, functionName) {\n  proto[functionName] = function (value) {\n    return runBuildingStep(this, functionName, value);\n  };\n}\nexport * from './mquery/nosql-query-builder';\nexport var RxDBQueryBuilderPlugin = {\n  name: 'query-builder',\n  rxdb: true,\n  prototypes: {\n    RxQuery: function RxQuery(proto) {\n      ['where', 'equals', 'eq', 'or', 'nor', 'and', 'mod', 'exists', 'elemMatch', 'sort'].forEach(function (attribute) {\n        applyBuildingStep(proto, attribute);\n      });\n      OTHER_MANGO_ATTRIBUTES.forEach(function (attribute) {\n        applyBuildingStep(proto, attribute);\n      });\n      OTHER_MANGO_OPERATORS.forEach(function (operator) {\n        applyBuildingStep(proto, operator);\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/query-builder/index.js"],"names":["createQueryBuilder","OTHER_MANGO_ATTRIBUTES","OTHER_MANGO_OPERATORS","RxQueryBase","tunnelQueryCache","clone","RXQUERY_OTHER_FLAG","runBuildingStep","rxQuery","functionName","value","queryBuilder","mangoQuery","other","_path","queryBuilderJson","toJSON","newQuery","op","query","collection","path","tunneled","applyBuildingStep","proto","RxDBQueryBuilderPlugin","name","rxdb","prototypes","RxQuery","forEach","attribute","operator"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,sBAA7B,EAAqDC,qBAArD,QAAkF,8BAAlF;AACA,SAASC,WAAT,EAAsBC,gBAAtB,QAA8C,gBAA9C;AACA,SAASC,KAAT,QAAsB,YAAtB,C,CAAoC;;AAEpC,IAAIC,kBAAkB,GAAG,kBAAzB;AACA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,YAAlC,EAAgDC,KAAhD,EAAuD;AAC5D,MAAIC,YAAY,GAAGX,kBAAkB,CAACK,KAAK,CAACG,OAAO,CAACI,UAAT,CAAN,CAArC;;AAEA,MAAIJ,OAAO,CAACK,KAAR,CAAcP,kBAAd,CAAJ,EAAuC;AACrCK,IAAAA,YAAY,CAACG,KAAb,GAAqBN,OAAO,CAACK,KAAR,CAAcP,kBAAd,CAArB;AACD;;AAEDK,EAAAA,YAAY,CAACF,YAAD,CAAZ,CAA2BC,KAA3B,EAP4D,CAOzB;;AAEnC,MAAIK,gBAAgB,GAAGJ,YAAY,CAACK,MAAb,EAAvB;AACA,MAAIC,QAAQ,GAAG,IAAId,WAAJ,CAAgBK,OAAO,CAACU,EAAxB,EAA4BH,gBAAgB,CAACI,KAA7C,EAAoDX,OAAO,CAACY,UAA5D,CAAf;;AAEA,MAAIL,gBAAgB,CAACM,IAArB,EAA2B;AACzBJ,IAAAA,QAAQ,CAACJ,KAAT,CAAeP,kBAAf,IAAqCS,gBAAgB,CAACM,IAAtD;AACD;;AAED,MAAIC,QAAQ,GAAGlB,gBAAgB,CAACa,QAAD,CAA/B;AACA,SAAOK,QAAP;AACD;AACD,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCf,YAAlC,EAAgD;AACrDe,EAAAA,KAAK,CAACf,YAAD,CAAL,GAAsB,UAAUC,KAAV,EAAiB;AACrC,WAAOH,eAAe,CAAC,IAAD,EAAOE,YAAP,EAAqBC,KAArB,CAAtB;AACD,GAFD;AAGD;AACD,cAAc,8BAAd;AACA,OAAO,IAAIe,sBAAsB,GAAG;AAClCC,EAAAA,IAAI,EAAE,eAD4B;AAElCC,EAAAA,IAAI,EAAE,IAF4B;AAGlCC,EAAAA,UAAU,EAAE;AACVC,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBL,KAAjB,EAAwB;AAC/B,OAAC,OAAD,EAAU,QAAV,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,KAAhC,EAAuC,KAAvC,EAA8C,KAA9C,EAAqD,QAArD,EAA+D,WAA/D,EAA4E,MAA5E,EAAoFM,OAApF,CAA4F,UAAUC,SAAV,EAAqB;AAC/GR,QAAAA,iBAAiB,CAACC,KAAD,EAAQO,SAAR,CAAjB;AACD,OAFD;AAGA9B,MAAAA,sBAAsB,CAAC6B,OAAvB,CAA+B,UAAUC,SAAV,EAAqB;AAClDR,QAAAA,iBAAiB,CAACC,KAAD,EAAQO,SAAR,CAAjB;AACD,OAFD;AAGA7B,MAAAA,qBAAqB,CAAC4B,OAAtB,CAA8B,UAAUE,QAAV,EAAoB;AAChDT,QAAAA,iBAAiB,CAACC,KAAD,EAAQQ,QAAR,CAAjB;AACD,OAFD;AAGD;AAXS;AAHsB,CAA7B","sourcesContent":["import { createQueryBuilder, OTHER_MANGO_ATTRIBUTES, OTHER_MANGO_OPERATORS } from './mquery/nosql-query-builder';\nimport { RxQueryBase, tunnelQueryCache } from '../../rx-query';\nimport { clone } from '../../util'; // if the query-builder plugin is used, we have to save it's last path\n\nvar RXQUERY_OTHER_FLAG = 'queryBuilderPath';\nexport function runBuildingStep(rxQuery, functionName, value) {\n  var queryBuilder = createQueryBuilder(clone(rxQuery.mangoQuery));\n\n  if (rxQuery.other[RXQUERY_OTHER_FLAG]) {\n    queryBuilder._path = rxQuery.other[RXQUERY_OTHER_FLAG];\n  }\n\n  queryBuilder[functionName](value); // run\n\n  var queryBuilderJson = queryBuilder.toJSON();\n  var newQuery = new RxQueryBase(rxQuery.op, queryBuilderJson.query, rxQuery.collection);\n\n  if (queryBuilderJson.path) {\n    newQuery.other[RXQUERY_OTHER_FLAG] = queryBuilderJson.path;\n  }\n\n  var tunneled = tunnelQueryCache(newQuery);\n  return tunneled;\n}\nexport function applyBuildingStep(proto, functionName) {\n  proto[functionName] = function (value) {\n    return runBuildingStep(this, functionName, value);\n  };\n}\nexport * from './mquery/nosql-query-builder';\nexport var RxDBQueryBuilderPlugin = {\n  name: 'query-builder',\n  rxdb: true,\n  prototypes: {\n    RxQuery: function RxQuery(proto) {\n      ['where', 'equals', 'eq', 'or', 'nor', 'and', 'mod', 'exists', 'elemMatch', 'sort'].forEach(function (attribute) {\n        applyBuildingStep(proto, attribute);\n      });\n      OTHER_MANGO_ATTRIBUTES.forEach(function (attribute) {\n        applyBuildingStep(proto, attribute);\n      });\n      OTHER_MANGO_OPERATORS.forEach(function (operator) {\n        applyBuildingStep(proto, operator);\n      });\n    }\n  }\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}