{"ast":null,"code":"import { filterInMemoryFields, massageSelector } from 'pouchdb-selector-core';\nimport { flatClone, adapterObject } from './util';\nimport { runPluginHooks } from './hooks';\nimport { PouchDB } from './pouch-db';\nimport { newRxError } from './rx-error';\nexport var RxStoragePouchDbClass =\n/*#__PURE__*/\nfunction () {\n  function RxStoragePouchDbClass(adapter) {\n    var pouchSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.name = 'pouchdb';\n    this.adapter = adapter;\n    this.pouchSettings = pouchSettings;\n  }\n\n  var _proto = RxStoragePouchDbClass.prototype;\n\n  _proto.getSortComparator = function getSortComparator(primaryKey, query) {\n    var _ref;\n\n    var sortOptions = query.sort ? query.sort : [(_ref = {}, _ref[primaryKey] = 'asc', _ref)];\n    var massagedSelector = massageSelector(query.selector);\n    var inMemoryFields = Object.keys(query.selector);\n\n    var fun = function fun(a, b) {\n      // TODO use createFieldSorter\n      // TODO make a performance test\n      var rows = [a, b].map(function (doc) {\n        // swap primary to _id\n        var cloned = flatClone(doc);\n        var primaryValue = cloned[primaryKey];\n        delete cloned[primaryKey];\n        cloned._id = primaryValue;\n        return {\n          doc: cloned\n        };\n      });\n      var sortedRows = filterInMemoryFields(rows, {\n        selector: massagedSelector,\n        sort: sortOptions\n      }, inMemoryFields);\n\n      if (sortedRows[0].doc._id === rows[0].doc._id) {\n        return -1;\n      } else {\n        return 1;\n      }\n    };\n\n    return fun;\n  }\n  /**\n   * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n   */\n  ;\n\n  _proto.getQueryMatcher = function getQueryMatcher(primaryKey, query) {\n    var massagedSelector = massageSelector(query.selector);\n\n    var fun = function fun(doc) {\n      // swap primary to _id\n      var cloned = flatClone(doc);\n      var primaryValue = cloned[primaryKey];\n      delete cloned[primaryKey];\n      cloned._id = primaryValue;\n      var row = {\n        doc: cloned\n      };\n      var rowsMatched = filterInMemoryFields([row], {\n        selector: massagedSelector\n      }, Object.keys(query.selector));\n      return rowsMatched && rowsMatched.length === 1;\n    };\n\n    return fun;\n  };\n\n  _proto.createStorageInstance = function createStorageInstance(databaseName, collectionName, schemaVersion) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    if (!options.pouchSettings) {\n      options.pouchSettings = {};\n    }\n\n    var pouchLocation = getPouchLocation(databaseName, collectionName, schemaVersion);\n    var pouchDbParameters = {\n      location: pouchLocation,\n      adapter: adapterObject(this.adapter),\n      settings: options.pouchSettings\n    };\n    var pouchDBOptions = Object.assign({}, pouchDbParameters.adapter, this.pouchSettings, pouchDbParameters.settings);\n    runPluginHooks('preCreatePouchDb', pouchDbParameters);\n    return new PouchDB(pouchDbParameters.location, pouchDBOptions);\n  };\n\n  _proto.createInternalStorageInstance = function createInternalStorageInstance(databaseName, _options) {\n    var storageInstance = this.createStorageInstance(databaseName, '_rxdb_internal', 0, {\n      pouchSettings: {\n        // no compaction because this only stores local documents\n        auto_compaction: false,\n        revs_limit: 1\n      }\n    });\n    return Promise.resolve(storageInstance);\n  }\n  /**\n   * pouchdb has many bugs and strange behaviors\n   * this functions takes a normal mango query\n   * and transforms it to one that fits for pouchdb\n   */\n  ;\n\n  _proto.prepareQuery = function prepareQuery(rxQuery, mutateableQuery) {\n    var primPath = rxQuery.collection.schema.primaryPath;\n    var query = mutateableQuery;\n    /**\n     * because sort wont work on unused keys we have to workaround\n     * so we add the key to the selector if necessary\n     * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n     */\n\n    if (query.sort) {\n      query.sort.forEach(function (sortPart) {\n        var key = Object.keys(sortPart)[0];\n        var comparisonOperators = ['$gt', '$gte', '$lt', '$lte'];\n        var keyUsed = query.selector[key] && Object.keys(query.selector[key]).some(function (op) {\n          return comparisonOperators.includes(op);\n        }) || false;\n\n        if (!keyUsed) {\n          var schemaObj = rxQuery.collection.schema.getSchemaByObjectPath(key);\n\n          if (!schemaObj) {\n            throw newRxError('QU5', {\n              key: key\n            });\n          }\n\n          if (!query.selector[key]) {\n            query.selector[key] = {};\n          }\n\n          switch (schemaObj.type) {\n            case 'number':\n            case 'integer':\n              // TODO change back to -Infinity when issue resolved\n              // @link https://github.com/pouchdb/pouchdb/issues/6454\n              // -Infinity does not work since pouchdb 6.2.0\n              query.selector[key].$gt = -9999999999999999999999999999;\n              break;\n\n            case 'string':\n              /**\n               * strings need an empty string, see\n               * @link https://github.com/pubkey/rxdb/issues/585\n               */\n              if (typeof query.selector[key] !== 'string') {\n                query.selector[key].$gt = '';\n              }\n\n              break;\n\n            default:\n              query.selector[key].$gt = null;\n              break;\n          }\n        }\n      });\n    } // regex does not work over the primary key\n    // TODO move this to dev mode\n\n\n    if (query.selector[primPath] && query.selector[primPath].$regex) {\n      throw newRxError('QU4', {\n        path: primPath,\n        query: rxQuery.mangoQuery\n      });\n    } // primary-swap sorting\n\n\n    if (query.sort) {\n      var sortArray = query.sort.map(function (part) {\n        var _newPart;\n\n        var key = Object.keys(part)[0];\n        var direction = Object.values(part)[0];\n        var useKey = key === primPath ? '_id' : key;\n        var newPart = (_newPart = {}, _newPart[useKey] = direction, _newPart);\n        return newPart;\n      });\n      query.sort = sortArray;\n    } // strip empty selectors\n\n\n    Object.entries(query.selector).forEach(function (_ref2) {\n      var k = _ref2[0],\n          v = _ref2[1];\n\n      if (typeof v === 'object' && v !== null && !Array.isArray(v) && Object.keys(v).length === 0) {\n        delete query.selector[k];\n      }\n    });\n\n    if (primPath !== '_id') {\n      query.selector = primarySwapPouchDbQuerySelector(query.selector, primPath);\n    }\n\n    return query;\n  };\n\n  return RxStoragePouchDbClass;\n}();\n/**\n * Runs a primary swap with transform all custom primaryKey occurences\n * into '_id'\n * @recursive\n */\n\nexport function primarySwapPouchDbQuerySelector(selector, primaryKey) {\n  if (Array.isArray(selector)) {\n    return selector.map(function (item) {\n      return primarySwapPouchDbQuerySelector(item, primaryKey);\n    });\n  } else if (typeof selector === 'object') {\n    var ret = {};\n    Object.entries(selector).forEach(function (_ref3) {\n      var k = _ref3[0],\n          v = _ref3[1];\n\n      if (k === primaryKey) {\n        ret._id = v;\n      } else {\n        if (k.startsWith('$')) {\n          ret[k] = primarySwapPouchDbQuerySelector(v, primaryKey);\n        } else {\n          ret[k] = v;\n        }\n      }\n    });\n    return ret;\n  } else {\n    return selector;\n  }\n}\n/**\n * returns the pouchdb-database-name\n */\n\nexport function getPouchLocation(dbName, collectionName, schemaVersion) {\n  var prefix = dbName + '-rxdb-' + schemaVersion + '-';\n\n  if (!collectionName.includes('/')) {\n    return prefix + collectionName;\n  } else {\n    // if collectionName is a path, we have to prefix the last part only\n    var split = collectionName.split('/');\n    var last = split.pop();\n    var ret = split.join('/');\n    ret += '/' + prefix + last;\n    return ret;\n  }\n}\nexport function getRxStoragePouchDb(adapter, pouchSettings) {\n  if (!adapter) {\n    throw new Error('adapter missing');\n  }\n\n  return new RxStoragePouchDbClass(adapter, pouchSettings);\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/rx-storage-pouchdb.js"],"names":["filterInMemoryFields","massageSelector","flatClone","adapterObject","runPluginHooks","PouchDB","newRxError","RxStoragePouchDbClass","adapter","pouchSettings","arguments","length","undefined","name","_proto","prototype","getSortComparator","primaryKey","query","_ref","sortOptions","sort","massagedSelector","selector","inMemoryFields","Object","keys","fun","a","b","rows","map","doc","cloned","primaryValue","_id","sortedRows","getQueryMatcher","row","rowsMatched","createStorageInstance","databaseName","collectionName","schemaVersion","options","pouchLocation","getPouchLocation","pouchDbParameters","location","settings","pouchDBOptions","assign","createInternalStorageInstance","_options","storageInstance","auto_compaction","revs_limit","Promise","resolve","prepareQuery","rxQuery","mutateableQuery","primPath","collection","schema","primaryPath","forEach","sortPart","key","comparisonOperators","keyUsed","some","op","includes","schemaObj","getSchemaByObjectPath","type","$gt","$regex","path","mangoQuery","sortArray","part","_newPart","direction","values","useKey","newPart","entries","_ref2","k","v","Array","isArray","primarySwapPouchDbQuerySelector","item","ret","_ref3","startsWith","dbName","prefix","split","last","pop","join","getRxStoragePouchDb","Error"],"mappings":"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","sourcesContent":["import { filterInMemoryFields, massageSelector } from 'pouchdb-selector-core';\nimport { flatClone, adapterObject } from './util';\nimport { runPluginHooks } from './hooks';\nimport { PouchDB } from './pouch-db';\nimport { newRxError } from './rx-error';\nexport var RxStoragePouchDbClass = /*#__PURE__*/function () {\n  function RxStoragePouchDbClass(adapter) {\n    var pouchSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.name = 'pouchdb';\n    this.adapter = adapter;\n    this.pouchSettings = pouchSettings;\n  }\n\n  var _proto = RxStoragePouchDbClass.prototype;\n\n  _proto.getSortComparator = function getSortComparator(primaryKey, query) {\n    var _ref;\n\n    var sortOptions = query.sort ? query.sort : [(_ref = {}, _ref[primaryKey] = 'asc', _ref)];\n    var massagedSelector = massageSelector(query.selector);\n    var inMemoryFields = Object.keys(query.selector);\n\n    var fun = function fun(a, b) {\n      // TODO use createFieldSorter\n      // TODO make a performance test\n      var rows = [a, b].map(function (doc) {\n        // swap primary to _id\n        var cloned = flatClone(doc);\n        var primaryValue = cloned[primaryKey];\n        delete cloned[primaryKey];\n        cloned._id = primaryValue;\n        return {\n          doc: cloned\n        };\n      });\n      var sortedRows = filterInMemoryFields(rows, {\n        selector: massagedSelector,\n        sort: sortOptions\n      }, inMemoryFields);\n\n      if (sortedRows[0].doc._id === rows[0].doc._id) {\n        return -1;\n      } else {\n        return 1;\n      }\n    };\n\n    return fun;\n  }\n  /**\n   * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n   */\n  ;\n\n  _proto.getQueryMatcher = function getQueryMatcher(primaryKey, query) {\n    var massagedSelector = massageSelector(query.selector);\n\n    var fun = function fun(doc) {\n      // swap primary to _id\n      var cloned = flatClone(doc);\n      var primaryValue = cloned[primaryKey];\n      delete cloned[primaryKey];\n      cloned._id = primaryValue;\n      var row = {\n        doc: cloned\n      };\n      var rowsMatched = filterInMemoryFields([row], {\n        selector: massagedSelector\n      }, Object.keys(query.selector));\n      return rowsMatched && rowsMatched.length === 1;\n    };\n\n    return fun;\n  };\n\n  _proto.createStorageInstance = function createStorageInstance(databaseName, collectionName, schemaVersion) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    if (!options.pouchSettings) {\n      options.pouchSettings = {};\n    }\n\n    var pouchLocation = getPouchLocation(databaseName, collectionName, schemaVersion);\n    var pouchDbParameters = {\n      location: pouchLocation,\n      adapter: adapterObject(this.adapter),\n      settings: options.pouchSettings\n    };\n    var pouchDBOptions = Object.assign({}, pouchDbParameters.adapter, this.pouchSettings, pouchDbParameters.settings);\n    runPluginHooks('preCreatePouchDb', pouchDbParameters);\n    return new PouchDB(pouchDbParameters.location, pouchDBOptions);\n  };\n\n  _proto.createInternalStorageInstance = function createInternalStorageInstance(databaseName, _options) {\n    var storageInstance = this.createStorageInstance(databaseName, '_rxdb_internal', 0, {\n      pouchSettings: {\n        // no compaction because this only stores local documents\n        auto_compaction: false,\n        revs_limit: 1\n      }\n    });\n    return Promise.resolve(storageInstance);\n  }\n  /**\n   * pouchdb has many bugs and strange behaviors\n   * this functions takes a normal mango query\n   * and transforms it to one that fits for pouchdb\n   */\n  ;\n\n  _proto.prepareQuery = function prepareQuery(rxQuery, mutateableQuery) {\n    var primPath = rxQuery.collection.schema.primaryPath;\n    var query = mutateableQuery;\n    /**\n     * because sort wont work on unused keys we have to workaround\n     * so we add the key to the selector if necessary\n     * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n     */\n\n    if (query.sort) {\n      query.sort.forEach(function (sortPart) {\n        var key = Object.keys(sortPart)[0];\n        var comparisonOperators = ['$gt', '$gte', '$lt', '$lte'];\n        var keyUsed = query.selector[key] && Object.keys(query.selector[key]).some(function (op) {\n          return comparisonOperators.includes(op);\n        }) || false;\n\n        if (!keyUsed) {\n          var schemaObj = rxQuery.collection.schema.getSchemaByObjectPath(key);\n\n          if (!schemaObj) {\n            throw newRxError('QU5', {\n              key: key\n            });\n          }\n\n          if (!query.selector[key]) {\n            query.selector[key] = {};\n          }\n\n          switch (schemaObj.type) {\n            case 'number':\n            case 'integer':\n              // TODO change back to -Infinity when issue resolved\n              // @link https://github.com/pouchdb/pouchdb/issues/6454\n              // -Infinity does not work since pouchdb 6.2.0\n              query.selector[key].$gt = -9999999999999999999999999999;\n              break;\n\n            case 'string':\n              /**\n               * strings need an empty string, see\n               * @link https://github.com/pubkey/rxdb/issues/585\n               */\n              if (typeof query.selector[key] !== 'string') {\n                query.selector[key].$gt = '';\n              }\n\n              break;\n\n            default:\n              query.selector[key].$gt = null;\n              break;\n          }\n        }\n      });\n    } // regex does not work over the primary key\n    // TODO move this to dev mode\n\n\n    if (query.selector[primPath] && query.selector[primPath].$regex) {\n      throw newRxError('QU4', {\n        path: primPath,\n        query: rxQuery.mangoQuery\n      });\n    } // primary-swap sorting\n\n\n    if (query.sort) {\n      var sortArray = query.sort.map(function (part) {\n        var _newPart;\n\n        var key = Object.keys(part)[0];\n        var direction = Object.values(part)[0];\n        var useKey = key === primPath ? '_id' : key;\n        var newPart = (_newPart = {}, _newPart[useKey] = direction, _newPart);\n        return newPart;\n      });\n      query.sort = sortArray;\n    } // strip empty selectors\n\n\n    Object.entries(query.selector).forEach(function (_ref2) {\n      var k = _ref2[0],\n          v = _ref2[1];\n\n      if (typeof v === 'object' && v !== null && !Array.isArray(v) && Object.keys(v).length === 0) {\n        delete query.selector[k];\n      }\n    });\n\n    if (primPath !== '_id') {\n      query.selector = primarySwapPouchDbQuerySelector(query.selector, primPath);\n    }\n\n    return query;\n  };\n\n  return RxStoragePouchDbClass;\n}();\n/**\n * Runs a primary swap with transform all custom primaryKey occurences\n * into '_id'\n * @recursive\n */\n\nexport function primarySwapPouchDbQuerySelector(selector, primaryKey) {\n  if (Array.isArray(selector)) {\n    return selector.map(function (item) {\n      return primarySwapPouchDbQuerySelector(item, primaryKey);\n    });\n  } else if (typeof selector === 'object') {\n    var ret = {};\n    Object.entries(selector).forEach(function (_ref3) {\n      var k = _ref3[0],\n          v = _ref3[1];\n\n      if (k === primaryKey) {\n        ret._id = v;\n      } else {\n        if (k.startsWith('$')) {\n          ret[k] = primarySwapPouchDbQuerySelector(v, primaryKey);\n        } else {\n          ret[k] = v;\n        }\n      }\n    });\n    return ret;\n  } else {\n    return selector;\n  }\n}\n/**\n * returns the pouchdb-database-name\n */\n\nexport function getPouchLocation(dbName, collectionName, schemaVersion) {\n  var prefix = dbName + '-rxdb-' + schemaVersion + '-';\n\n  if (!collectionName.includes('/')) {\n    return prefix + collectionName;\n  } else {\n    // if collectionName is a path, we have to prefix the last part only\n    var split = collectionName.split('/');\n    var last = split.pop();\n    var ret = split.join('/');\n    ret += '/' + prefix + last;\n    return ret;\n  }\n}\nexport function getRxStoragePouchDb(adapter, pouchSettings) {\n  if (!adapter) {\n    throw new Error('adapter missing');\n  }\n\n  return new RxStoragePouchDbClass(adapter, pouchSettings);\n}\n//# sourceMappingURL=rx-storage-pouchdb.js.map"]},"metadata":{},"sourceType":"module"}