{"ast":null,"code":"import { generateId } from './util';\nimport { newRxError } from './rx-error';\n/**\n * wrappers for Pouch.put/get to handle keycompression etc\n */\n\nexport function _handleToPouch(col, data) {\n  data = col._crypter.encrypt(data);\n  data = col.schema.swapPrimaryToId(data);\n  if (col.schema.doKeyCompression()) data = col._keyCompressor.compress(data);\n  return data;\n}\nexport function _handleFromPouch(col, data) {\n  var noDecrypt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  data = col.schema.swapIdToPrimary(data);\n  if (col.schema.doKeyCompression()) data = col._keyCompressor.decompress(data);\n  if (noDecrypt) return data;\n  data = col._crypter.decrypt(data);\n  return data;\n}\n/**\n * fills in the _id and the\n * default data.\n * This also clones the data\n */\n\nexport function fillObjectDataBeforeInsert(collection, data) {\n  var useJson = collection.schema.fillObjectWithDefaults(data);\n\n  if (useJson._id && collection.schema.primaryPath !== '_id') {\n    throw newRxError('COL2', {\n      data: data\n    });\n  } // fill _id\n\n\n  if (collection.schema.primaryPath === '_id' && !useJson._id) {\n    useJson._id = generateId();\n  }\n\n  return useJson;\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/rx-collection-helper.js"],"names":["generateId","newRxError","_handleToPouch","col","data","_crypter","encrypt","schema","swapPrimaryToId","doKeyCompression","_keyCompressor","compress","_handleFromPouch","noDecrypt","arguments","length","undefined","swapIdToPrimary","decompress","decrypt","fillObjectDataBeforeInsert","collection","useJson","fillObjectWithDefaults","_id","primaryPath"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA;;;;AAIA,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAA6BC,IAA7B,EAAmC;AACxCA,EAAAA,IAAI,GAAGD,GAAG,CAACE,QAAJ,CAAaC,OAAb,CAAqBF,IAArB,CAAP;AACAA,EAAAA,IAAI,GAAGD,GAAG,CAACI,MAAJ,CAAWC,eAAX,CAA2BJ,IAA3B,CAAP;AACA,MAAID,GAAG,CAACI,MAAJ,CAAWE,gBAAX,EAAJ,EAAmCL,IAAI,GAAGD,GAAG,CAACO,cAAJ,CAAmBC,QAAnB,CAA4BP,IAA5B,CAAP;AACnC,SAAOA,IAAP;AACD;AACD,OAAO,SAASQ,gBAAT,CAA0BT,GAA1B,EAA+BC,IAA/B,EAAqC;AAC1C,MAAIS,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAApF;AACAV,EAAAA,IAAI,GAAGD,GAAG,CAACI,MAAJ,CAAWU,eAAX,CAA2Bb,IAA3B,CAAP;AACA,MAAID,GAAG,CAACI,MAAJ,CAAWE,gBAAX,EAAJ,EAAmCL,IAAI,GAAGD,GAAG,CAACO,cAAJ,CAAmBQ,UAAnB,CAA8Bd,IAA9B,CAAP;AACnC,MAAIS,SAAJ,EAAe,OAAOT,IAAP;AACfA,EAAAA,IAAI,GAAGD,GAAG,CAACE,QAAJ,CAAac,OAAb,CAAqBf,IAArB,CAAP;AACA,SAAOA,IAAP;AACD;AACD;;;;;;AAMA,OAAO,SAASgB,0BAAT,CAAoCC,UAApC,EAAgDjB,IAAhD,EAAsD;AAC3D,MAAIkB,OAAO,GAAGD,UAAU,CAACd,MAAX,CAAkBgB,sBAAlB,CAAyCnB,IAAzC,CAAd;;AAEA,MAAIkB,OAAO,CAACE,GAAR,IAAeH,UAAU,CAACd,MAAX,CAAkBkB,WAAlB,KAAkC,KAArD,EAA4D;AAC1D,UAAMxB,UAAU,CAAC,MAAD,EAAS;AACvBG,MAAAA,IAAI,EAAEA;AADiB,KAAT,CAAhB;AAGD,GAP0D,CAOzD;;;AAGF,MAAIiB,UAAU,CAACd,MAAX,CAAkBkB,WAAlB,KAAkC,KAAlC,IAA2C,CAACH,OAAO,CAACE,GAAxD,EAA6D;AAC3DF,IAAAA,OAAO,CAACE,GAAR,GAAcxB,UAAU,EAAxB;AACD;;AAED,SAAOsB,OAAP;AACD","sourcesContent":["import { generateId } from './util';\nimport { newRxError } from './rx-error';\n/**\n * wrappers for Pouch.put/get to handle keycompression etc\n */\n\nexport function _handleToPouch(col, data) {\n  data = col._crypter.encrypt(data);\n  data = col.schema.swapPrimaryToId(data);\n  if (col.schema.doKeyCompression()) data = col._keyCompressor.compress(data);\n  return data;\n}\nexport function _handleFromPouch(col, data) {\n  var noDecrypt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  data = col.schema.swapIdToPrimary(data);\n  if (col.schema.doKeyCompression()) data = col._keyCompressor.decompress(data);\n  if (noDecrypt) return data;\n  data = col._crypter.decrypt(data);\n  return data;\n}\n/**\n * fills in the _id and the\n * default data.\n * This also clones the data\n */\n\nexport function fillObjectDataBeforeInsert(collection, data) {\n  var useJson = collection.schema.fillObjectWithDefaults(data);\n\n  if (useJson._id && collection.schema.primaryPath !== '_id') {\n    throw newRxError('COL2', {\n      data: data\n    });\n  } // fill _id\n\n\n  if (collection.schema.primaryPath === '_id' && !useJson._id) {\n    useJson._id = generateId();\n  }\n\n  return useJson;\n}\n//# sourceMappingURL=rx-collection-helper.js.map"]},"metadata":{},"sourceType":"module"}