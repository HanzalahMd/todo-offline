{"ast":null,"code":"/**\n * this handles how plugins are added to rxdb\n * basically it changes the internal prototypes\n * by passing them to the plugins-functions\n */\nimport { RxSchema } from './rx-schema';\nimport Crypter from './crypter';\nimport { basePrototype as RxDocumentPrototype } from './rx-document';\nimport { RxQueryBase } from './rx-query';\nimport { RxCollectionBase } from './rx-collection';\nimport { RxDatabaseBase } from './rx-database';\nimport { PouchDB } from './pouch-db';\nimport overwritable from './overwritable';\nimport { HOOKS } from './hooks';\n/**\n * prototypes that can be manipulated with a plugin\n */\n\nvar PROTOTYPES = {\n  RxSchema: RxSchema.prototype,\n  Crypter: Crypter.Crypter.prototype,\n  RxDocument: RxDocumentPrototype,\n  RxQuery: RxQueryBase.prototype,\n  RxCollection: RxCollectionBase.prototype,\n  RxDatabase: RxDatabaseBase.prototype\n};\nvar ADDED_PLUGINS = new Set();\nexport default function addPlugin(plugin) {\n  // do nothing if added before\n  if (ADDED_PLUGINS.has(plugin)) return;else ADDED_PLUGINS.add(plugin);\n\n  if (!plugin.rxdb) {\n    // pouchdb-plugin\n    if (typeof plugin === 'object' && plugin[\"default\"]) plugin = plugin[\"default\"];\n    PouchDB.plugin(plugin);\n    return;\n  }\n\n  var rxPlugin = plugin; // prototype-overwrites\n\n  if (rxPlugin.prototypes) {\n    Object.entries(plugin.prototypes).forEach(function (_ref) {\n      var name = _ref[0],\n          fun = _ref[1];\n      return fun(PROTOTYPES[name]);\n    });\n  } // overwritable-overwrites\n\n\n  if (rxPlugin.overwritable) {\n    Object.entries(plugin.overwritable).forEach(function (_ref2) {\n      var name = _ref2[0],\n          fun = _ref2[1];\n      return overwritable[name] = fun;\n    });\n  } // extend-hooks\n\n\n  if (rxPlugin.hooks) {\n    Object.entries(plugin.hooks).forEach(function (_ref3) {\n      var name = _ref3[0],\n          fun = _ref3[1];\n      return HOOKS[name].push(fun);\n    });\n  }\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugin.js"],"names":["RxSchema","Crypter","basePrototype","RxDocumentPrototype","RxQueryBase","RxCollectionBase","RxDatabaseBase","PouchDB","overwritable","HOOKS","PROTOTYPES","prototype","RxDocument","RxQuery","RxCollection","RxDatabase","ADDED_PLUGINS","Set","addPlugin","plugin","has","add","rxdb","rxPlugin","prototypes","Object","entries","forEach","_ref","name","fun","_ref2","hooks","_ref3","push"],"mappings":"AAAA;;;;;AAKA,SAASA,QAAT,QAAyB,aAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,aAAa,IAAIC,mBAA1B,QAAqD,eAArD;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA;;;;AAIA,IAAIC,UAAU,GAAG;AACfV,EAAAA,QAAQ,EAAEA,QAAQ,CAACW,SADJ;AAEfV,EAAAA,OAAO,EAAEA,OAAO,CAACA,OAAR,CAAgBU,SAFV;AAGfC,EAAAA,UAAU,EAAET,mBAHG;AAIfU,EAAAA,OAAO,EAAET,WAAW,CAACO,SAJN;AAKfG,EAAAA,YAAY,EAAET,gBAAgB,CAACM,SALhB;AAMfI,EAAAA,UAAU,EAAET,cAAc,CAACK;AANZ,CAAjB;AAQA,IAAIK,aAAa,GAAG,IAAIC,GAAJ,EAApB;AACA,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACxC;AACA,MAAIH,aAAa,CAACI,GAAd,CAAkBD,MAAlB,CAAJ,EAA+B,OAA/B,KAA2CH,aAAa,CAACK,GAAd,CAAkBF,MAAlB;;AAE3C,MAAI,CAACA,MAAM,CAACG,IAAZ,EAAkB;AAChB;AACA,QAAI,OAAOH,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAAC,SAAD,CAAxC,EAAqDA,MAAM,GAAGA,MAAM,CAAC,SAAD,CAAf;AACrDZ,IAAAA,OAAO,CAACY,MAAR,CAAeA,MAAf;AACA;AACD;;AAED,MAAII,QAAQ,GAAGJ,MAAf,CAXwC,CAWjB;;AAEvB,MAAII,QAAQ,CAACC,UAAb,EAAyB;AACvBC,IAAAA,MAAM,CAACC,OAAP,CAAeP,MAAM,CAACK,UAAtB,EAAkCG,OAAlC,CAA0C,UAAUC,IAAV,EAAgB;AACxD,UAAIC,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAf;AAAA,UACIE,GAAG,GAAGF,IAAI,CAAC,CAAD,CADd;AAEA,aAAOE,GAAG,CAACpB,UAAU,CAACmB,IAAD,CAAX,CAAV;AACD,KAJD;AAKD,GAnBuC,CAmBtC;;;AAGF,MAAIN,QAAQ,CAACf,YAAb,EAA2B;AACzBiB,IAAAA,MAAM,CAACC,OAAP,CAAeP,MAAM,CAACX,YAAtB,EAAoCmB,OAApC,CAA4C,UAAUI,KAAV,EAAiB;AAC3D,UAAIF,IAAI,GAAGE,KAAK,CAAC,CAAD,CAAhB;AAAA,UACID,GAAG,GAAGC,KAAK,CAAC,CAAD,CADf;AAEA,aAAOvB,YAAY,CAACqB,IAAD,CAAZ,GAAqBC,GAA5B;AACD,KAJD;AAKD,GA5BuC,CA4BtC;;;AAGF,MAAIP,QAAQ,CAACS,KAAb,EAAoB;AAClBP,IAAAA,MAAM,CAACC,OAAP,CAAeP,MAAM,CAACa,KAAtB,EAA6BL,OAA7B,CAAqC,UAAUM,KAAV,EAAiB;AACpD,UAAIJ,IAAI,GAAGI,KAAK,CAAC,CAAD,CAAhB;AAAA,UACIH,GAAG,GAAGG,KAAK,CAAC,CAAD,CADf;AAEA,aAAOxB,KAAK,CAACoB,IAAD,CAAL,CAAYK,IAAZ,CAAiBJ,GAAjB,CAAP;AACD,KAJD;AAKD;AACF","sourcesContent":["/**\n * this handles how plugins are added to rxdb\n * basically it changes the internal prototypes\n * by passing them to the plugins-functions\n */\nimport { RxSchema } from './rx-schema';\nimport Crypter from './crypter';\nimport { basePrototype as RxDocumentPrototype } from './rx-document';\nimport { RxQueryBase } from './rx-query';\nimport { RxCollectionBase } from './rx-collection';\nimport { RxDatabaseBase } from './rx-database';\nimport { PouchDB } from './pouch-db';\nimport overwritable from './overwritable';\nimport { HOOKS } from './hooks';\n/**\n * prototypes that can be manipulated with a plugin\n */\n\nvar PROTOTYPES = {\n  RxSchema: RxSchema.prototype,\n  Crypter: Crypter.Crypter.prototype,\n  RxDocument: RxDocumentPrototype,\n  RxQuery: RxQueryBase.prototype,\n  RxCollection: RxCollectionBase.prototype,\n  RxDatabase: RxDatabaseBase.prototype\n};\nvar ADDED_PLUGINS = new Set();\nexport default function addPlugin(plugin) {\n  // do nothing if added before\n  if (ADDED_PLUGINS.has(plugin)) return;else ADDED_PLUGINS.add(plugin);\n\n  if (!plugin.rxdb) {\n    // pouchdb-plugin\n    if (typeof plugin === 'object' && plugin[\"default\"]) plugin = plugin[\"default\"];\n    PouchDB.plugin(plugin);\n    return;\n  }\n\n  var rxPlugin = plugin; // prototype-overwrites\n\n  if (rxPlugin.prototypes) {\n    Object.entries(plugin.prototypes).forEach(function (_ref) {\n      var name = _ref[0],\n          fun = _ref[1];\n      return fun(PROTOTYPES[name]);\n    });\n  } // overwritable-overwrites\n\n\n  if (rxPlugin.overwritable) {\n    Object.entries(plugin.overwritable).forEach(function (_ref2) {\n      var name = _ref2[0],\n          fun = _ref2[1];\n      return overwritable[name] = fun;\n    });\n  } // extend-hooks\n\n\n  if (rxPlugin.hooks) {\n    Object.entries(plugin.hooks).forEach(function (_ref3) {\n      var name = _ref3[0],\n          fun = _ref3[1];\n      return HOOKS[name].push(fun);\n    });\n  }\n}\n//# sourceMappingURL=plugin.js.map"]},"metadata":{},"sourceType":"module"}