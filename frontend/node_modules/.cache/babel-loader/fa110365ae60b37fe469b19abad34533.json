{"ast":null,"code":"/**\n * this plugin adds the json export/import capabilities to RxDB\n */\nimport { hash } from '../util';\nimport { createRxQuery } from '../rx-query';\nimport { newRxError } from '../rx-error';\nimport { createChangeEvent } from '../rx-change-event';\n\nfunction dumpRxDatabase() {\n  var _this = this;\n\n  var decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var collections = arguments.length > 1 ? arguments[1] : undefined;\n  var json = {\n    name: this.name,\n    instanceToken: this.token,\n    encrypted: false,\n    passwordHash: null,\n    collections: []\n  };\n\n  if (this.password) {\n    json.passwordHash = hash(this.password);\n    if (decrypted) json.encrypted = false;else json.encrypted = true;\n  }\n\n  var useCollections = Object.keys(this.collections).filter(function (colName) {\n    return !collections || collections.includes(colName);\n  }).filter(function (colName) {\n    return colName.charAt(0) !== '_';\n  }).map(function (colName) {\n    return _this.collections[colName];\n  });\n  return Promise.all(useCollections.map(function (col) {\n    return col.dump(decrypted);\n  })).then(function (cols) {\n    json.collections = cols;\n    return json;\n  });\n}\n\nvar importDumpRxDatabase = function importDumpRxDatabase(dump) {\n  var _this2 = this;\n  /**\n   * collections must be created before the import\n   * because we do not know about the other collection-settings here\n   */\n\n\n  var missingCollections = dump.collections.filter(function (col) {\n    return !_this2.collections[col.name];\n  }).map(function (col) {\n    return col.name;\n  });\n\n  if (missingCollections.length > 0) {\n    throw newRxError('JD1', {\n      missingCollections: missingCollections\n    });\n  }\n\n  return Promise.all(dump.collections.map(function (colDump) {\n    return _this2.collections[colDump.name].importDump(colDump);\n  }));\n};\n\nvar dumpRxCollection = function dumpRxCollection() {\n  var decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var encrypted = !decrypted;\n  var json = {\n    name: this.name,\n    schemaHash: this.schema.hash,\n    encrypted: false,\n    passwordHash: null,\n    docs: []\n  };\n\n  if (this.database.password && encrypted) {\n    json.passwordHash = hash(this.database.password);\n    json.encrypted = true;\n  }\n\n  var query = createRxQuery('find', {}, this);\n  return this._pouchFind(query, undefined, encrypted).then(function (docs) {\n    json.docs = docs.map(function (docData) {\n      delete docData._rev;\n      delete docData._attachments;\n      return docData;\n    });\n    return json;\n  });\n};\n\nfunction importDumpRxCollection(exportedJSON) {\n  var _this3 = this; // check schemaHash\n\n\n  if (exportedJSON.schemaHash !== this.schema.hash) {\n    throw newRxError('JD2', {\n      schemaHash: exportedJSON.schemaHash,\n      own: this.schema.hash\n    });\n  } // check if passwordHash matches own\n\n\n  if (exportedJSON.encrypted && exportedJSON.passwordHash !== hash(this.database.password)) {\n    throw newRxError('JD3', {\n      passwordHash: exportedJSON.passwordHash,\n      own: hash(this.database.password)\n    });\n  }\n\n  var docs = exportedJSON.docs // decrypt\n  .map(function (doc) {\n    return _this3._crypter.decrypt(doc);\n  }) // validate schema\n  .map(function (doc) {\n    return _this3.schema.validate(doc);\n  }) // transform\n  .map(function (doc) {\n    return _this3._handleToPouch(doc);\n  });\n  return this.database.lockedRun( // write to disc\n  function () {\n    return _this3.pouch.bulkDocs(docs);\n  }).then(function () {\n    docs.forEach(function (doc) {\n      // emit change events\n      var primary = doc[_this3.schema.primaryPath];\n      var emitEvent = createChangeEvent('INSERT', _this3.database, _this3, null, doc);\n      emitEvent.data.doc = primary;\n\n      _this3.$emit(emitEvent);\n    });\n  });\n}\n\nexport var rxdb = true;\nexport var prototypes = {\n  RxDatabase: function RxDatabase(proto) {\n    proto.dump = dumpRxDatabase;\n    proto.importDump = importDumpRxDatabase;\n  },\n  RxCollection: function RxCollection(proto) {\n    proto.dump = dumpRxCollection;\n    proto.importDump = importDumpRxCollection;\n  }\n};\nexport var overwritable = {};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/json-dump.js"],"names":["hash","createRxQuery","newRxError","createChangeEvent","dumpRxDatabase","_this","decrypted","arguments","length","undefined","collections","json","name","instanceToken","token","encrypted","passwordHash","password","useCollections","Object","keys","filter","colName","includes","charAt","map","Promise","all","col","dump","then","cols","importDumpRxDatabase","_this2","missingCollections","colDump","importDump","dumpRxCollection","schemaHash","schema","docs","database","query","_pouchFind","docData","_rev","_attachments","importDumpRxCollection","exportedJSON","_this3","own","doc","_crypter","decrypt","validate","_handleToPouch","lockedRun","pouch","bulkDocs","forEach","primary","primaryPath","emitEvent","data","$emit","rxdb","prototypes","RxDatabase","proto","RxCollection","overwritable"],"mappings":"AAAA;;;AAGA,SAASA,IAAT,QAAqB,SAArB;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,iBAAT,QAAkC,oBAAlC;;AAEA,SAASC,cAAT,GAA0B;AACxB,MAAIC,KAAK,GAAG,IAAZ;;AAEA,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAApF;AACA,MAAIG,WAAW,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAxD;AACA,MAAIE,IAAI,GAAG;AACTC,IAAAA,IAAI,EAAE,KAAKA,IADF;AAETC,IAAAA,aAAa,EAAE,KAAKC,KAFX;AAGTC,IAAAA,SAAS,EAAE,KAHF;AAITC,IAAAA,YAAY,EAAE,IAJL;AAKTN,IAAAA,WAAW,EAAE;AALJ,GAAX;;AAQA,MAAI,KAAKO,QAAT,EAAmB;AACjBN,IAAAA,IAAI,CAACK,YAAL,GAAoBhB,IAAI,CAAC,KAAKiB,QAAN,CAAxB;AACA,QAAIX,SAAJ,EAAeK,IAAI,CAACI,SAAL,GAAiB,KAAjB,CAAf,KAA2CJ,IAAI,CAACI,SAAL,GAAiB,IAAjB;AAC5C;;AAED,MAAIG,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKV,WAAjB,EAA8BW,MAA9B,CAAqC,UAAUC,OAAV,EAAmB;AAC3E,WAAO,CAACZ,WAAD,IAAgBA,WAAW,CAACa,QAAZ,CAAqBD,OAArB,CAAvB;AACD,GAFoB,EAElBD,MAFkB,CAEX,UAAUC,OAAV,EAAmB;AAC3B,WAAOA,OAAO,CAACE,MAAR,CAAe,CAAf,MAAsB,GAA7B;AACD,GAJoB,EAIlBC,GAJkB,CAId,UAAUH,OAAV,EAAmB;AACxB,WAAOjB,KAAK,CAACK,WAAN,CAAkBY,OAAlB,CAAP;AACD,GANoB,CAArB;AAOA,SAAOI,OAAO,CAACC,GAAR,CAAYT,cAAc,CAACO,GAAf,CAAmB,UAAUG,GAAV,EAAe;AACnD,WAAOA,GAAG,CAACC,IAAJ,CAASvB,SAAT,CAAP;AACD,GAFkB,CAAZ,EAEHwB,IAFG,CAEE,UAAUC,IAAV,EAAgB;AACvBpB,IAAAA,IAAI,CAACD,WAAL,GAAmBqB,IAAnB;AACA,WAAOpB,IAAP;AACD,GALM,CAAP;AAMD;;AAED,IAAIqB,oBAAoB,GAAG,SAASA,oBAAT,CAA8BH,IAA9B,EAAoC;AAC7D,MAAII,MAAM,GAAG,IAAb;AAEA;;;;;;AAIA,MAAIC,kBAAkB,GAAGL,IAAI,CAACnB,WAAL,CAAiBW,MAAjB,CAAwB,UAAUO,GAAV,EAAe;AAC9D,WAAO,CAACK,MAAM,CAACvB,WAAP,CAAmBkB,GAAG,CAAChB,IAAvB,CAAR;AACD,GAFwB,EAEtBa,GAFsB,CAElB,UAAUG,GAAV,EAAe;AACpB,WAAOA,GAAG,CAAChB,IAAX;AACD,GAJwB,CAAzB;;AAMA,MAAIsB,kBAAkB,CAAC1B,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,UAAMN,UAAU,CAAC,KAAD,EAAQ;AACtBgC,MAAAA,kBAAkB,EAAEA;AADE,KAAR,CAAhB;AAGD;;AAED,SAAOR,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACnB,WAAL,CAAiBe,GAAjB,CAAqB,UAAUU,OAAV,EAAmB;AACzD,WAAOF,MAAM,CAACvB,WAAP,CAAmByB,OAAO,CAACvB,IAA3B,EAAiCwB,UAAjC,CAA4CD,OAA5C,CAAP;AACD,GAFkB,CAAZ,CAAP;AAGD,CAtBD;;AAwBA,IAAIE,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;AACjD,MAAI/B,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAApF;AACA,MAAIQ,SAAS,GAAG,CAACT,SAAjB;AACA,MAAIK,IAAI,GAAG;AACTC,IAAAA,IAAI,EAAE,KAAKA,IADF;AAET0B,IAAAA,UAAU,EAAE,KAAKC,MAAL,CAAYvC,IAFf;AAGTe,IAAAA,SAAS,EAAE,KAHF;AAITC,IAAAA,YAAY,EAAE,IAJL;AAKTwB,IAAAA,IAAI,EAAE;AALG,GAAX;;AAQA,MAAI,KAAKC,QAAL,CAAcxB,QAAd,IAA0BF,SAA9B,EAAyC;AACvCJ,IAAAA,IAAI,CAACK,YAAL,GAAoBhB,IAAI,CAAC,KAAKyC,QAAL,CAAcxB,QAAf,CAAxB;AACAN,IAAAA,IAAI,CAACI,SAAL,GAAiB,IAAjB;AACD;;AAED,MAAI2B,KAAK,GAAGzC,aAAa,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,CAAzB;AACA,SAAO,KAAK0C,UAAL,CAAgBD,KAAhB,EAAuBjC,SAAvB,EAAkCM,SAAlC,EAA6Ce,IAA7C,CAAkD,UAAUU,IAAV,EAAgB;AACvE7B,IAAAA,IAAI,CAAC6B,IAAL,GAAYA,IAAI,CAACf,GAAL,CAAS,UAAUmB,OAAV,EAAmB;AACtC,aAAOA,OAAO,CAACC,IAAf;AACA,aAAOD,OAAO,CAACE,YAAf;AACA,aAAOF,OAAP;AACD,KAJW,CAAZ;AAKA,WAAOjC,IAAP;AACD,GAPM,CAAP;AAQD,CAzBD;;AA2BA,SAASoC,sBAAT,CAAgCC,YAAhC,EAA8C;AAC5C,MAAIC,MAAM,GAAG,IAAb,CAD4C,CAG5C;;;AACA,MAAID,YAAY,CAACV,UAAb,KAA4B,KAAKC,MAAL,CAAYvC,IAA5C,EAAkD;AAChD,UAAME,UAAU,CAAC,KAAD,EAAQ;AACtBoC,MAAAA,UAAU,EAAEU,YAAY,CAACV,UADH;AAEtBY,MAAAA,GAAG,EAAE,KAAKX,MAAL,CAAYvC;AAFK,KAAR,CAAhB;AAID,GAT2C,CAS1C;;;AAGF,MAAIgD,YAAY,CAACjC,SAAb,IAA0BiC,YAAY,CAAChC,YAAb,KAA8BhB,IAAI,CAAC,KAAKyC,QAAL,CAAcxB,QAAf,CAAhE,EAA0F;AACxF,UAAMf,UAAU,CAAC,KAAD,EAAQ;AACtBc,MAAAA,YAAY,EAAEgC,YAAY,CAAChC,YADL;AAEtBkC,MAAAA,GAAG,EAAElD,IAAI,CAAC,KAAKyC,QAAL,CAAcxB,QAAf;AAFa,KAAR,CAAhB;AAID;;AAED,MAAIuB,IAAI,GAAGQ,YAAY,CAACR,IAAb,CAAkB;AAAlB,GACVf,GADU,CACN,UAAU0B,GAAV,EAAe;AAClB,WAAOF,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwBF,GAAxB,CAAP;AACD,GAHU,EAGR;AAHQ,GAIV1B,GAJU,CAIN,UAAU0B,GAAV,EAAe;AAClB,WAAOF,MAAM,CAACV,MAAP,CAAce,QAAd,CAAuBH,GAAvB,CAAP;AACD,GANU,EAMR;AANQ,GAOV1B,GAPU,CAON,UAAU0B,GAAV,EAAe;AAClB,WAAOF,MAAM,CAACM,cAAP,CAAsBJ,GAAtB,CAAP;AACD,GATU,CAAX;AAUA,SAAO,KAAKV,QAAL,CAAce,SAAd,EAAyB;AAChC,cAAY;AACV,WAAOP,MAAM,CAACQ,KAAP,CAAaC,QAAb,CAAsBlB,IAAtB,CAAP;AACD,GAHM,EAGJV,IAHI,CAGC,YAAY;AAClBU,IAAAA,IAAI,CAACmB,OAAL,CAAa,UAAUR,GAAV,EAAe;AAC1B;AACA,UAAIS,OAAO,GAAGT,GAAG,CAACF,MAAM,CAACV,MAAP,CAAcsB,WAAf,CAAjB;AACA,UAAIC,SAAS,GAAG3D,iBAAiB,CAAC,QAAD,EAAW8C,MAAM,CAACR,QAAlB,EAA4BQ,MAA5B,EAAoC,IAApC,EAA0CE,GAA1C,CAAjC;AACAW,MAAAA,SAAS,CAACC,IAAV,CAAeZ,GAAf,GAAqBS,OAArB;;AAEAX,MAAAA,MAAM,CAACe,KAAP,CAAaF,SAAb;AACD,KAPD;AAQD,GAZM,CAAP;AAaD;;AAED,OAAO,IAAIG,IAAI,GAAG,IAAX;AACP,OAAO,IAAIC,UAAU,GAAG;AACtBC,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AACrCA,IAAAA,KAAK,CAACvC,IAAN,GAAazB,cAAb;AACAgE,IAAAA,KAAK,CAAChC,UAAN,GAAmBJ,oBAAnB;AACD,GAJqB;AAKtBqC,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBD,KAAtB,EAA6B;AACzCA,IAAAA,KAAK,CAACvC,IAAN,GAAaQ,gBAAb;AACA+B,IAAAA,KAAK,CAAChC,UAAN,GAAmBW,sBAAnB;AACD;AARqB,CAAjB;AAUP,OAAO,IAAIuB,YAAY,GAAG,EAAnB;AACP,eAAe;AACbL,EAAAA,IAAI,EAAEA,IADO;AAEbC,EAAAA,UAAU,EAAEA,UAFC;AAGbI,EAAAA,YAAY,EAAEA;AAHD,CAAf","sourcesContent":["/**\n * this plugin adds the json export/import capabilities to RxDB\n */\nimport { hash } from '../util';\nimport { createRxQuery } from '../rx-query';\nimport { newRxError } from '../rx-error';\nimport { createChangeEvent } from '../rx-change-event';\n\nfunction dumpRxDatabase() {\n  var _this = this;\n\n  var decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var collections = arguments.length > 1 ? arguments[1] : undefined;\n  var json = {\n    name: this.name,\n    instanceToken: this.token,\n    encrypted: false,\n    passwordHash: null,\n    collections: []\n  };\n\n  if (this.password) {\n    json.passwordHash = hash(this.password);\n    if (decrypted) json.encrypted = false;else json.encrypted = true;\n  }\n\n  var useCollections = Object.keys(this.collections).filter(function (colName) {\n    return !collections || collections.includes(colName);\n  }).filter(function (colName) {\n    return colName.charAt(0) !== '_';\n  }).map(function (colName) {\n    return _this.collections[colName];\n  });\n  return Promise.all(useCollections.map(function (col) {\n    return col.dump(decrypted);\n  })).then(function (cols) {\n    json.collections = cols;\n    return json;\n  });\n}\n\nvar importDumpRxDatabase = function importDumpRxDatabase(dump) {\n  var _this2 = this;\n\n  /**\n   * collections must be created before the import\n   * because we do not know about the other collection-settings here\n   */\n  var missingCollections = dump.collections.filter(function (col) {\n    return !_this2.collections[col.name];\n  }).map(function (col) {\n    return col.name;\n  });\n\n  if (missingCollections.length > 0) {\n    throw newRxError('JD1', {\n      missingCollections: missingCollections\n    });\n  }\n\n  return Promise.all(dump.collections.map(function (colDump) {\n    return _this2.collections[colDump.name].importDump(colDump);\n  }));\n};\n\nvar dumpRxCollection = function dumpRxCollection() {\n  var decrypted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var encrypted = !decrypted;\n  var json = {\n    name: this.name,\n    schemaHash: this.schema.hash,\n    encrypted: false,\n    passwordHash: null,\n    docs: []\n  };\n\n  if (this.database.password && encrypted) {\n    json.passwordHash = hash(this.database.password);\n    json.encrypted = true;\n  }\n\n  var query = createRxQuery('find', {}, this);\n  return this._pouchFind(query, undefined, encrypted).then(function (docs) {\n    json.docs = docs.map(function (docData) {\n      delete docData._rev;\n      delete docData._attachments;\n      return docData;\n    });\n    return json;\n  });\n};\n\nfunction importDumpRxCollection(exportedJSON) {\n  var _this3 = this;\n\n  // check schemaHash\n  if (exportedJSON.schemaHash !== this.schema.hash) {\n    throw newRxError('JD2', {\n      schemaHash: exportedJSON.schemaHash,\n      own: this.schema.hash\n    });\n  } // check if passwordHash matches own\n\n\n  if (exportedJSON.encrypted && exportedJSON.passwordHash !== hash(this.database.password)) {\n    throw newRxError('JD3', {\n      passwordHash: exportedJSON.passwordHash,\n      own: hash(this.database.password)\n    });\n  }\n\n  var docs = exportedJSON.docs // decrypt\n  .map(function (doc) {\n    return _this3._crypter.decrypt(doc);\n  }) // validate schema\n  .map(function (doc) {\n    return _this3.schema.validate(doc);\n  }) // transform\n  .map(function (doc) {\n    return _this3._handleToPouch(doc);\n  });\n  return this.database.lockedRun( // write to disc\n  function () {\n    return _this3.pouch.bulkDocs(docs);\n  }).then(function () {\n    docs.forEach(function (doc) {\n      // emit change events\n      var primary = doc[_this3.schema.primaryPath];\n      var emitEvent = createChangeEvent('INSERT', _this3.database, _this3, null, doc);\n      emitEvent.data.doc = primary;\n\n      _this3.$emit(emitEvent);\n    });\n  });\n}\n\nexport var rxdb = true;\nexport var prototypes = {\n  RxDatabase: function RxDatabase(proto) {\n    proto.dump = dumpRxDatabase;\n    proto.importDump = importDumpRxDatabase;\n  },\n  RxCollection: function RxCollection(proto) {\n    proto.dump = dumpRxCollection;\n    proto.importDump = importDumpRxCollection;\n  }\n};\nexport var overwritable = {};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable\n};\n//# sourceMappingURL=json-dump.js.map"]},"metadata":{},"sourceType":"module"}