{"ast":null,"code":"/**\n * RxChangeEvents a emitted when something in the database changes\n * they can be grabbed by the observables of database, collection and document\n */\nexport var RxChangeEvent =\n/*#__PURE__*/\nfunction () {\n  function RxChangeEvent(operation, documentId, documentData, databaseToken, collectionName, isLocal, startTime, endTime, previousData, rxDocument) {\n    this.operation = operation;\n    this.documentId = documentId;\n    this.documentData = documentData;\n    this.databaseToken = databaseToken;\n    this.collectionName = collectionName;\n    this.isLocal = isLocal;\n    this.startTime = startTime;\n    this.endTime = endTime;\n    this.previousData = previousData;\n    this.rxDocument = rxDocument;\n  }\n\n  var _proto = RxChangeEvent.prototype;\n\n  _proto.isIntern = function isIntern() {\n    if (this.collectionName && this.collectionName.charAt(0) === '_') {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto.toJSON = function toJSON() {\n    var ret = {\n      operation: this.operation,\n      documentId: this.documentId,\n      documentData: this.documentData,\n      previousData: this.previousData ? this.previousData : undefined,\n      databaseToken: this.databaseToken,\n      collectionName: this.collectionName,\n      isLocal: this.isLocal,\n      startTime: this.startTime,\n      endTime: this.endTime\n    };\n    return ret;\n  };\n\n  _proto.toEventReduceChangeEvent = function toEventReduceChangeEvent() {\n    switch (this.operation) {\n      case 'INSERT':\n        return {\n          operation: this.operation,\n          id: this.documentId,\n          doc: this.documentData,\n          previous: null\n        };\n\n      case 'UPDATE':\n        return {\n          operation: this.operation,\n          id: this.documentId,\n          doc: this.documentData,\n          previous: this.previousData ? this.previousData : 'UNKNOWN'\n        };\n\n      case 'DELETE':\n        return {\n          operation: this.operation,\n          id: this.documentId,\n          doc: null,\n          previous: this.previousData\n        };\n    }\n  };\n\n  return RxChangeEvent;\n}();\nexport function changeEventfromPouchChange(changeDoc, collection, startTime, // time when the event was streamed out of pouchdb\nendTime) {\n  var operation = changeDoc._rev.startsWith('1-') ? 'INSERT' : 'UPDATE';\n\n  if (changeDoc._deleted) {\n    operation = 'DELETE';\n  } // decompress / primarySwap\n\n\n  var doc = collection._handleFromPouch(changeDoc);\n\n  var documentId = doc[collection.schema.primaryPath];\n  var cE = new RxChangeEvent(operation, documentId, doc, collection.database.token, collection.name, false, startTime, endTime);\n  return cE;\n}\nexport function createInsertEvent(collection, docData, startTime, endTime, doc) {\n  var ret = new RxChangeEvent('INSERT', docData[collection.schema.primaryPath], docData, collection.database.token, collection.name, false, startTime, endTime, null, doc);\n  return ret;\n}\nexport function createUpdateEvent(collection, docData, previous, startTime, endTime, rxDocument) {\n  return new RxChangeEvent('UPDATE', docData[collection.schema.primaryPath], docData, collection.database.token, collection.name, false, startTime, endTime, previous, rxDocument);\n}\nexport function createDeleteEvent(collection, docData, previous, startTime, endTime, rxDocument) {\n  return new RxChangeEvent('DELETE', docData[collection.schema.primaryPath], docData, collection.database.token, collection.name, false, startTime, endTime, previous, rxDocument);\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxChangeEvent;\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/rx-change-event.js"],"names":["RxChangeEvent","operation","documentId","documentData","databaseToken","collectionName","isLocal","startTime","endTime","previousData","rxDocument","_proto","prototype","isIntern","charAt","toJSON","ret","undefined","toEventReduceChangeEvent","id","doc","previous","changeEventfromPouchChange","changeDoc","collection","_rev","startsWith","_deleted","_handleFromPouch","schema","primaryPath","cE","database","token","name","createInsertEvent","docData","createUpdateEvent","createDeleteEvent","isInstanceOf","obj"],"mappings":"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","sourcesContent":["/**\n * RxChangeEvents a emitted when something in the database changes\n * they can be grabbed by the observables of database, collection and document\n */\nexport var RxChangeEvent = /*#__PURE__*/function () {\n  function RxChangeEvent(operation, documentId, documentData, databaseToken, collectionName, isLocal, startTime, endTime, previousData, rxDocument) {\n    this.operation = operation;\n    this.documentId = documentId;\n    this.documentData = documentData;\n    this.databaseToken = databaseToken;\n    this.collectionName = collectionName;\n    this.isLocal = isLocal;\n    this.startTime = startTime;\n    this.endTime = endTime;\n    this.previousData = previousData;\n    this.rxDocument = rxDocument;\n  }\n\n  var _proto = RxChangeEvent.prototype;\n\n  _proto.isIntern = function isIntern() {\n    if (this.collectionName && this.collectionName.charAt(0) === '_') {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto.toJSON = function toJSON() {\n    var ret = {\n      operation: this.operation,\n      documentId: this.documentId,\n      documentData: this.documentData,\n      previousData: this.previousData ? this.previousData : undefined,\n      databaseToken: this.databaseToken,\n      collectionName: this.collectionName,\n      isLocal: this.isLocal,\n      startTime: this.startTime,\n      endTime: this.endTime\n    };\n    return ret;\n  };\n\n  _proto.toEventReduceChangeEvent = function toEventReduceChangeEvent() {\n    switch (this.operation) {\n      case 'INSERT':\n        return {\n          operation: this.operation,\n          id: this.documentId,\n          doc: this.documentData,\n          previous: null\n        };\n\n      case 'UPDATE':\n        return {\n          operation: this.operation,\n          id: this.documentId,\n          doc: this.documentData,\n          previous: this.previousData ? this.previousData : 'UNKNOWN'\n        };\n\n      case 'DELETE':\n        return {\n          operation: this.operation,\n          id: this.documentId,\n          doc: null,\n          previous: this.previousData\n        };\n    }\n  };\n\n  return RxChangeEvent;\n}();\nexport function changeEventfromPouchChange(changeDoc, collection, startTime, // time when the event was streamed out of pouchdb\nendTime) {\n  var operation = changeDoc._rev.startsWith('1-') ? 'INSERT' : 'UPDATE';\n\n  if (changeDoc._deleted) {\n    operation = 'DELETE';\n  } // decompress / primarySwap\n\n\n  var doc = collection._handleFromPouch(changeDoc);\n\n  var documentId = doc[collection.schema.primaryPath];\n  var cE = new RxChangeEvent(operation, documentId, doc, collection.database.token, collection.name, false, startTime, endTime);\n  return cE;\n}\nexport function createInsertEvent(collection, docData, startTime, endTime, doc) {\n  var ret = new RxChangeEvent('INSERT', docData[collection.schema.primaryPath], docData, collection.database.token, collection.name, false, startTime, endTime, null, doc);\n  return ret;\n}\nexport function createUpdateEvent(collection, docData, previous, startTime, endTime, rxDocument) {\n  return new RxChangeEvent('UPDATE', docData[collection.schema.primaryPath], docData, collection.database.token, collection.name, false, startTime, endTime, previous, rxDocument);\n}\nexport function createDeleteEvent(collection, docData, previous, startTime, endTime, rxDocument) {\n  return new RxChangeEvent('DELETE', docData[collection.schema.primaryPath], docData, collection.database.token, collection.name, false, startTime, endTime, previous, rxDocument);\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof RxChangeEvent;\n}\n//# sourceMappingURL=rx-change-event.js.map"]},"metadata":{},"sourceType":"module"}