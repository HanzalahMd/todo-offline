{"ast":null,"code":"import { getStateSet } from './states';\nimport { actionFunctions, orderedActionList } from './actions';\nimport { resolveInput } from './bdd/bdd.generated';\nexport * from './types';\nexport * from './states';\nexport * from './util';\nexport function calculateActionFromMap(stateSetToActionMap, input) {\n  var stateSet = getStateSet(input);\n  var actionName = stateSetToActionMap.get(stateSet);\n\n  if (!actionName) {\n    return {\n      action: 'runFullQueryAgain',\n      stateSet: stateSet\n    };\n  } else {\n    return {\n      action: actionName,\n      stateSet: stateSet\n    };\n  }\n}\nexport function calculateActionName(input) {\n  var resolvedActionId = resolveInput(input);\n  return orderedActionList[resolvedActionId];\n}\nexport function calculateActionFunction(input) {\n  var actionName = calculateActionName(input);\n  return actionFunctions[actionName];\n}\n/**\n * for performance reasons,\n * @mutates the input\n * @returns the new results\n */\n\nexport function runAction(action, queryParams, changeEvent, previousResults, keyDocumentMap) {\n  var fn = actionFunctions[action];\n  fn({\n    queryParams: queryParams,\n    changeEvent: changeEvent,\n    previousResults: previousResults,\n    keyDocumentMap: keyDocumentMap\n  });\n  return previousResults;\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAUA,SAAS,WAAT,QAA4B,UAA5B;AACA,SAAS,eAAT,EAA0B,iBAA1B,QAAmD,WAAnD;AACA,SAAS,YAAT,QAA6B,qBAA7B;AAEA,cAAc,SAAd;AACA,cAAc,UAAd;AACA,cAAc,QAAd;AAEA,OAAM,SAAU,sBAAV,CACF,mBADE,EAEF,KAFE,EAEuC;AAKzC,MAAM,QAAQ,GAAa,WAAW,CAAC,KAAD,CAAtC;AACA,MAAM,UAAU,GAAG,mBAAmB,CAAC,GAApB,CAAwB,QAAxB,CAAnB;;AACA,MAAI,CAAC,UAAL,EAAiB;AACb,WAAO;AACH,MAAA,MAAM,EAAE,mBADL;AAEH,MAAA,QAAQ,EAAA;AAFL,KAAP;AAIH,GALD,MAKO;AACH,WAAO;AACH,MAAA,MAAM,EAAE,UADL;AAEH,MAAA,QAAQ,EAAA;AAFL,KAAP;AAIH;AACJ;AAED,OAAM,SAAU,mBAAV,CACF,KADE,EACuC;AAEzC,MAAM,gBAAgB,GAAG,YAAY,CACjC,KADiC,CAArC;AAGA,SAAO,iBAAiB,CAAC,gBAAD,CAAxB;AACH;AAED,OAAM,SAAU,uBAAV,CACF,KADE,EACuC;AAEzC,MAAM,UAAU,GAAG,mBAAmB,CAAC,KAAD,CAAtC;AACA,SAAO,eAAe,CAAC,UAAD,CAAtB;AACH;AAED;;;;;;AAKA,OAAM,SAAU,SAAV,CACF,MADE,EAEF,WAFE,EAGF,WAHE,EAIF,eAJE,EAKF,cALE,EAK4C;AAE9C,MAAM,EAAE,GAA4B,eAAe,CAAC,MAAD,CAAnD;AACA,EAAA,EAAE,CAAC;AACC,IAAA,WAAW,EAAA,WADZ;AAEC,IAAA,WAAW,EAAA,WAFZ;AAGC,IAAA,eAAe,EAAA,eAHhB;AAIC,IAAA,cAAc,EAAA;AAJf,GAAD,CAAF;AAMA,SAAO,eAAP;AACH","sourceRoot":"","sourcesContent":["import { getStateSet } from './states';\nimport { actionFunctions, orderedActionList } from './actions';\nimport { resolveInput } from './bdd/bdd.generated';\nexport * from './types';\nexport * from './states';\nexport * from './util';\nexport function calculateActionFromMap(stateSetToActionMap, input) {\n    var stateSet = getStateSet(input);\n    var actionName = stateSetToActionMap.get(stateSet);\n    if (!actionName) {\n        return {\n            action: 'runFullQueryAgain',\n            stateSet: stateSet\n        };\n    }\n    else {\n        return {\n            action: actionName,\n            stateSet: stateSet\n        };\n    }\n}\nexport function calculateActionName(input) {\n    var resolvedActionId = resolveInput(input);\n    return orderedActionList[resolvedActionId];\n}\nexport function calculateActionFunction(input) {\n    var actionName = calculateActionName(input);\n    return actionFunctions[actionName];\n}\n/**\n * for performance reasons,\n * @mutates the input\n * @returns the new results\n */\nexport function runAction(action, queryParams, changeEvent, previousResults, keyDocumentMap) {\n    var fn = actionFunctions[action];\n    fn({\n        queryParams: queryParams,\n        changeEvent: changeEvent,\n        previousResults: previousResults,\n        keyDocumentMap: keyDocumentMap\n    });\n    return previousResults;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}