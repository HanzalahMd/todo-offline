{"ast":null,"code":"/*\nlet t = 0;\nwhile (t < 10000) {\n    const char = String.fromCharCode(t);\n    console.log(t + ' : ' + char);\n    t++;\n}\n*/\n\n/*\n\nTo have a really small string representation, we have to hack some stuff\nwhich makes is complicated but effective.\n\nRules for the string:\n- The string starts with a number like '23' that defines how many leaf-nodes we have\n- leaf nodes consist of two chars like 'ab'\n    - the first char is the id\n    - the second the value is a number you can get via String.charCodeAt()\n- Internal nodes have four chars like 'abcd'\n    - the first char is the id\n    - the second char is the id of the 0-branch\n    - the third char is the id of the 1-branch\n    - the last char is the id of the boolean-function (= level)\n- The last 3 chars of the string is the root node like 'abc'\n    - it looks like the internal-node but without the id (first char)\n\n*/\n// we use this because 39 is the quotes which causes problems\nexport var CHAR_CODE_OFFSET = 40; // String.fromCharCode(33) === ')'\n\nexport function getCharOfLevel(level) {\n  var charCode = CHAR_CODE_OFFSET + level;\n  return String.fromCharCode(charCode);\n}\nexport function getNumberOfChar(char) {\n  var charCode = char.charCodeAt(0);\n  return charCode - CHAR_CODE_OFFSET;\n}\nexport function getCharOfValue(value) {\n  var charCode = CHAR_CODE_OFFSET + value;\n  return String.fromCharCode(charCode);\n}\nexport var FIRST_CHAR_CODE_FOR_ID = 97; // String.fromCharCode(97) === 'a'\n\nexport function getNextCharId(lastCode) {\n  // jump these codes because they look strange\n  if (lastCode >= 128 && lastCode <= 160) {\n    lastCode = 161;\n  }\n\n  var char = String.fromCharCode(lastCode);\n  return {\n    char: char,\n    nextCode: lastCode + 1\n  };\n}","map":{"version":3,"sources":["../../../src/minimal-string/string-format.ts"],"names":[],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;AAoBA;AACA,OAAO,IAAM,gBAAgB,GAAG,EAAzB,C,CAA6B;;AAGpC,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAsC;AACxC,MAAM,QAAQ,GAAG,gBAAgB,GAAG,KAApC;AACA,SAAO,MAAM,CAAC,YAAP,CAAoB,QAApB,CAAP;AACH;AAED,OAAM,SAAU,eAAV,CAA0B,IAA1B,EAAsC;AACxC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAL,CAAgB,CAAhB,CAAjB;AACA,SAAO,QAAQ,GAAG,gBAAlB;AACH;AAED,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAsC;AACxC,MAAM,QAAQ,GAAG,gBAAgB,GAAG,KAApC;AACA,SAAO,MAAM,CAAC,YAAP,CAAoB,QAApB,CAAP;AACH;AAGD,OAAO,IAAM,sBAAsB,GAAG,EAA/B,C,CAAmC;;AAE1C,OAAM,SAAU,aAAV,CAAwB,QAAxB,EAAwC;AAK1C;AACA,MAAI,QAAQ,IAAI,GAAZ,IAAmB,QAAQ,IAAI,GAAnC,EAAwC;AACpC,IAAA,QAAQ,GAAG,GAAX;AACH;;AAED,MAAM,IAAI,GAAG,MAAM,CAAC,YAAP,CAAoB,QAApB,CAAb;AACA,SAAO;AACH,IAAA,IAAI,EAAA,IADD;AAEH,IAAA,QAAQ,EAAE,QAAQ,GAAG;AAFlB,GAAP;AAIH","sourceRoot":"","sourcesContent":["/*\nlet t = 0;\nwhile (t < 10000) {\n    const char = String.fromCharCode(t);\n    console.log(t + ' : ' + char);\n    t++;\n}\n*/\n/*\n\nTo have a really small string representation, we have to hack some stuff\nwhich makes is complicated but effective.\n\nRules for the string:\n- The string starts with a number like '23' that defines how many leaf-nodes we have\n- leaf nodes consist of two chars like 'ab'\n    - the first char is the id\n    - the second the value is a number you can get via String.charCodeAt()\n- Internal nodes have four chars like 'abcd'\n    - the first char is the id\n    - the second char is the id of the 0-branch\n    - the third char is the id of the 1-branch\n    - the last char is the id of the boolean-function (= level)\n- The last 3 chars of the string is the root node like 'abc'\n    - it looks like the internal-node but without the id (first char)\n\n*/\n// we use this because 39 is the quotes which causes problems\nexport var CHAR_CODE_OFFSET = 40; // String.fromCharCode(33) === ')'\nexport function getCharOfLevel(level) {\n    var charCode = CHAR_CODE_OFFSET + level;\n    return String.fromCharCode(charCode);\n}\nexport function getNumberOfChar(char) {\n    var charCode = char.charCodeAt(0);\n    return charCode - CHAR_CODE_OFFSET;\n}\nexport function getCharOfValue(value) {\n    var charCode = CHAR_CODE_OFFSET + value;\n    return String.fromCharCode(charCode);\n}\nexport var FIRST_CHAR_CODE_FOR_ID = 97; // String.fromCharCode(97) === 'a'\nexport function getNextCharId(lastCode) {\n    // jump these codes because they look strange\n    if (lastCode >= 128 && lastCode <= 160) {\n        lastCode = 161;\n    }\n    var char = String.fromCharCode(lastCode);\n    return {\n        char: char,\n        nextCode: lastCode + 1\n    };\n}\n//# sourceMappingURL=string-format.js.map"]},"metadata":{},"sourceType":"module"}