{"ast":null,"code":"import { btoa, readAsArrayBuffer } from 'pouchdb-binary-utils';\nimport Md5 from 'spark-md5';\nvar setImmediateShim = self.setImmediate || self.setTimeout;\nvar MD5_CHUNK_SIZE = 32768;\n\nfunction rawToBase64(raw) {\n  return btoa(raw);\n}\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  }\n\n  return blob.slice(start, end);\n}\n\nfunction appendBlob(buffer, blob, start, end, callback) {\n  if (start > 0 || end < blob.size) {\n    // only slice blob if we really need to\n    blob = sliceBlob(blob, start, end);\n  }\n\n  readAsArrayBuffer(blob, function (arrayBuffer) {\n    buffer.append(arrayBuffer);\n    callback();\n  });\n}\n\nfunction appendString(buffer, string, start, end, callback) {\n  if (start > 0 || end < string.length) {\n    // only create a substring if we really need to\n    string = string.substring(start, end);\n  }\n\n  buffer.appendBinary(string);\n  callback();\n}\n\nfunction binaryMd5(data, callback) {\n  var inputIsString = typeof data === 'string';\n  var len = inputIsString ? data.length : data.size;\n  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);\n  var chunks = Math.ceil(len / chunkSize);\n  var currentChunk = 0;\n  var buffer = inputIsString ? new Md5() : new Md5.ArrayBuffer();\n  var append = inputIsString ? appendString : appendBlob;\n\n  function next() {\n    setImmediateShim(loadNextChunk);\n  }\n\n  function done() {\n    var raw = buffer.end(true);\n    var base64 = rawToBase64(raw);\n    callback(base64);\n    buffer.destroy();\n  }\n\n  function loadNextChunk() {\n    var start = currentChunk * chunkSize;\n    var end = start + chunkSize;\n    currentChunk++;\n\n    if (currentChunk < chunks) {\n      append(buffer, data, start, end, next);\n    } else {\n      append(buffer, data, start, end, done);\n    }\n  }\n\n  loadNextChunk();\n}\n\nfunction stringMd5(string) {\n  return Md5.hash(string);\n}\n\nexport { binaryMd5, stringMd5 };","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/pouchdb-md5/lib/index-browser.es.js"],"names":["btoa","readAsArrayBuffer","Md5","setImmediateShim","self","setImmediate","setTimeout","MD5_CHUNK_SIZE","rawToBase64","raw","sliceBlob","blob","start","end","webkitSlice","slice","appendBlob","buffer","callback","size","arrayBuffer","append","appendString","string","length","substring","appendBinary","binaryMd5","data","inputIsString","len","chunkSize","Math","min","chunks","ceil","currentChunk","ArrayBuffer","next","loadNextChunk","done","base64","destroy","stringMd5","hash"],"mappings":"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","sourcesContent":["import { btoa, readAsArrayBuffer } from 'pouchdb-binary-utils';\nimport Md5 from 'spark-md5';\n\nvar setImmediateShim = self.setImmediate || self.setTimeout;\nvar MD5_CHUNK_SIZE = 32768;\n\nfunction rawToBase64(raw) {\n  return btoa(raw);\n}\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  }\n  return blob.slice(start, end);\n}\n\nfunction appendBlob(buffer, blob, start, end, callback) {\n  if (start > 0 || end < blob.size) {\n    // only slice blob if we really need to\n    blob = sliceBlob(blob, start, end);\n  }\n  readAsArrayBuffer(blob, function (arrayBuffer) {\n    buffer.append(arrayBuffer);\n    callback();\n  });\n}\n\nfunction appendString(buffer, string, start, end, callback) {\n  if (start > 0 || end < string.length) {\n    // only create a substring if we really need to\n    string = string.substring(start, end);\n  }\n  buffer.appendBinary(string);\n  callback();\n}\n\nfunction binaryMd5(data, callback) {\n  var inputIsString = typeof data === 'string';\n  var len = inputIsString ? data.length : data.size;\n  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);\n  var chunks = Math.ceil(len / chunkSize);\n  var currentChunk = 0;\n  var buffer = inputIsString ? new Md5() : new Md5.ArrayBuffer();\n\n  var append = inputIsString ? appendString : appendBlob;\n\n  function next() {\n    setImmediateShim(loadNextChunk);\n  }\n\n  function done() {\n    var raw = buffer.end(true);\n    var base64 = rawToBase64(raw);\n    callback(base64);\n    buffer.destroy();\n  }\n\n  function loadNextChunk() {\n    var start = currentChunk * chunkSize;\n    var end = start + chunkSize;\n    currentChunk++;\n    if (currentChunk < chunks) {\n      append(buffer, data, start, end, next);\n    } else {\n      append(buffer, data, start, end, done);\n    }\n  }\n  loadNextChunk();\n}\n\nfunction stringMd5(string) {\n  return Md5.hash(string);\n}\n\nexport { binaryMd5, stringMd5 };\n"]},"metadata":{},"sourceType":"module"}