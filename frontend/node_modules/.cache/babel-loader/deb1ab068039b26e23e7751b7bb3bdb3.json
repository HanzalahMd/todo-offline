{"ast":null,"code":"/**\n * this plugin adds the leader-election-capabilities to rxdb\n */\nimport { createLeaderElection } from 'broadcast-channel';\nvar LEADER_ELECTORS_OF_DB = new WeakMap();\nexport var LeaderElector =\n/*#__PURE__*/\nfunction () {\n  function LeaderElector(database) {\n    this.destroyed = false;\n    this.isLeader = false;\n    this.isDead = false;\n    this.database = database;\n    this.elector = createLeaderElection(database.broadcastChannel);\n  }\n\n  var _proto = LeaderElector.prototype;\n\n  _proto.die = function die() {\n    return this.elector.die();\n  };\n\n  _proto.waitForLeadership = function waitForLeadership() {\n    var _this = this;\n\n    return this.elector.awaitLeadership().then(function () {\n      _this.isLeader = true;\n      return true;\n    });\n  };\n\n  _proto.destroy = function destroy() {\n    if (this.destroyed) return;\n    this.destroyed = true;\n    this.isDead = true;\n    return this.die();\n  };\n\n  return LeaderElector;\n}();\nexport function getForDatabase() {\n  if (!LEADER_ELECTORS_OF_DB.has(this)) {\n    LEADER_ELECTORS_OF_DB.set(this, new LeaderElector(this));\n  }\n\n  return LEADER_ELECTORS_OF_DB.get(this);\n}\nexport function isLeader() {\n  if (!this.multiInstance) {\n    return true;\n  }\n\n  return this.leaderElector().isLeader;\n}\nexport function waitForLeadership() {\n  if (!this.multiInstance) {\n    return Promise.resolve(true);\n  } else {\n    return this.leaderElector().waitForLeadership();\n  }\n}\n/**\n * runs when the database gets destroyed\n */\n\nexport function onDestroy(db) {\n  var has = LEADER_ELECTORS_OF_DB.get(db);\n\n  if (has) {\n    has.destroy();\n  }\n}\nexport var rxdb = true;\nexport var prototypes = {\n  RxDatabase: function RxDatabase(proto) {\n    proto.leaderElector = getForDatabase;\n    proto.isLeader = isLeader;\n    proto.waitForLeadership = waitForLeadership;\n  }\n};\nexport var RxDBLeaderElectionPlugin = {\n  name: 'leader-election',\n  rxdb: rxdb,\n  prototypes: prototypes,\n  hooks: {\n    preDestroyRxDatabase: onDestroy\n  }\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/leader-election.js"],"names":["createLeaderElection","LEADER_ELECTORS_OF_DB","WeakMap","LeaderElector","database","destroyed","isLeader","isDead","elector","broadcastChannel","_proto","prototype","die","waitForLeadership","_this","awaitLeadership","then","destroy","getForDatabase","has","set","get","multiInstance","leaderElector","Promise","resolve","onDestroy","db","rxdb","prototypes","RxDatabase","proto","RxDBLeaderElectionPlugin","name","hooks","preDestroyRxDatabase"],"mappings":"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","sourcesContent":["/**\n * this plugin adds the leader-election-capabilities to rxdb\n */\nimport { createLeaderElection } from 'broadcast-channel';\nvar LEADER_ELECTORS_OF_DB = new WeakMap();\nexport var LeaderElector = /*#__PURE__*/function () {\n  function LeaderElector(database) {\n    this.destroyed = false;\n    this.isLeader = false;\n    this.isDead = false;\n    this.database = database;\n    this.elector = createLeaderElection(database.broadcastChannel);\n  }\n\n  var _proto = LeaderElector.prototype;\n\n  _proto.die = function die() {\n    return this.elector.die();\n  };\n\n  _proto.waitForLeadership = function waitForLeadership() {\n    var _this = this;\n\n    return this.elector.awaitLeadership().then(function () {\n      _this.isLeader = true;\n      return true;\n    });\n  };\n\n  _proto.destroy = function destroy() {\n    if (this.destroyed) return;\n    this.destroyed = true;\n    this.isDead = true;\n    return this.die();\n  };\n\n  return LeaderElector;\n}();\nexport function getForDatabase() {\n  if (!LEADER_ELECTORS_OF_DB.has(this)) {\n    LEADER_ELECTORS_OF_DB.set(this, new LeaderElector(this));\n  }\n\n  return LEADER_ELECTORS_OF_DB.get(this);\n}\nexport function isLeader() {\n  if (!this.multiInstance) {\n    return true;\n  }\n\n  return this.leaderElector().isLeader;\n}\nexport function waitForLeadership() {\n  if (!this.multiInstance) {\n    return Promise.resolve(true);\n  } else {\n    return this.leaderElector().waitForLeadership();\n  }\n}\n/**\n * runs when the database gets destroyed\n */\n\nexport function onDestroy(db) {\n  var has = LEADER_ELECTORS_OF_DB.get(db);\n\n  if (has) {\n    has.destroy();\n  }\n}\nexport var rxdb = true;\nexport var prototypes = {\n  RxDatabase: function RxDatabase(proto) {\n    proto.leaderElector = getForDatabase;\n    proto.isLeader = isLeader;\n    proto.waitForLeadership = waitForLeadership;\n  }\n};\nexport var RxDBLeaderElectionPlugin = {\n  name: 'leader-election',\n  rxdb: rxdb,\n  prototypes: prototypes,\n  hooks: {\n    preDestroyRxDatabase: onDestroy\n  }\n};\n//# sourceMappingURL=leader-election.js.map"]},"metadata":{},"sourceType":"module"}