{"ast":null,"code":"/**\n * this handles the pouchdb-instance\n * to easy add modules and manipulate things\n * Adapters can be found here:\n * @link https://github.com/pouchdb/pouchdb/tree/master/packages/node_modules\n */\nimport PouchDBCore from 'pouchdb-core'; // pouchdb-find\n\nimport PouchDBFind from 'pouchdb-find';\nimport { binaryMd5 } from 'pouchdb-md5';\nPouchDBCore.plugin(PouchDBFind);\n/*\n// comment in to debug\nconst pouchdbDebug = require('pouchdb-debug');\nPouchDB.plugin(pouchdbDebug);\nPouchDB.debug.enable('*');\n*/\n\nimport { newRxError, newRxTypeError } from './rx-error';\nimport { isFolderPath } from './util';\n/**\n * get the number of all undeleted documents\n */\n\nexport function countAllUndeleted(pouchdb) {\n  return pouchdb.allDocs({\n    include_docs: false,\n    attachments: false\n  }).then(function (docs) {\n    return docs.rows.filter(function (row) {\n      return !row.id.startsWith('_design/');\n    }).length;\n  });\n}\n/**\n * get a batch of documents from the pouch-instance\n */\n\nexport function getBatch(pouchdb, limit) {\n  if (limit <= 1) {\n    throw newRxError('P1', {\n      limit: limit\n    });\n  }\n\n  return pouchdb.allDocs({\n    include_docs: true,\n    attachments: false,\n    limit: limit\n  }).then(function (docs) {\n    return docs.rows.map(function (row) {\n      return row.doc;\n    }).filter(function (doc) {\n      return !doc._id.startsWith('_design');\n    });\n  });\n}\n/**\n * check if the given module is a leveldown-adapter\n * throws if not\n */\n\nexport function isLevelDown(adapter) {\n  if (!adapter || typeof adapter.super_ !== 'function') {\n    throw newRxError('UT4', {\n      adapter: adapter\n    });\n  }\n}\nvar validCouchDBStringRegexStr = '^[a-z][_$a-z0-9]*$';\nvar validCouchDBStringRegex = new RegExp(validCouchDBStringRegexStr);\n/**\n * validates that a given string is ok to be used with couchdb-collection-names\n * @link https://wiki.apache.org/couchdb/HTTP_database_API\n * @throws  {Error}\n */\n\nexport function validateCouchDBString(name) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw newRxTypeError('UT1', {\n      name: name\n    });\n  } // do not check, if foldername is given\n\n\n  if (isFolderPath(name)) {\n    return true;\n  }\n\n  if (!name.match(validCouchDBStringRegex)) {\n    throw newRxError('UT2', {\n      regex: validCouchDBStringRegexStr,\n      givenName: name\n    });\n  }\n\n  return true;\n}\n/**\n * get the correct function-name for pouchdb-replication\n */\n\nexport function pouchReplicationFunction(pouch, _ref) {\n  var _ref$pull = _ref.pull,\n      pull = _ref$pull === void 0 ? true : _ref$pull,\n      _ref$push = _ref.push,\n      push = _ref$push === void 0 ? true : _ref$push;\n  if (pull && push) return pouch.sync.bind(pouch);\n  if (!pull && push) return pouch.replicate.to.bind(pouch);\n  if (pull && !push) return pouch.replicate.from.bind(pouch);\n\n  if (!pull && !push) {\n    throw newRxError('UT3', {\n      pull: pull,\n      push: push\n    });\n  }\n}\n/**\n * create the same diggest as an attachment with that data\n * would have\n */\n\nexport function pouchAttachmentBinaryHash(data) {\n  return new Promise(function (res) {\n    binaryMd5(data, function (d) {\n      res('md5-' + d);\n    });\n  });\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof PouchDBCore;\n}\nexport var PouchDB = PouchDBCore;","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/pouch-db.js"],"names":["PouchDBCore","PouchDBFind","binaryMd5","plugin","newRxError","newRxTypeError","isFolderPath","countAllUndeleted","pouchdb","allDocs","include_docs","attachments","then","docs","rows","filter","row","id","startsWith","length","getBatch","limit","map","doc","_id","isLevelDown","adapter","super_","validCouchDBStringRegexStr","validCouchDBStringRegex","RegExp","validateCouchDBString","name","match","regex","givenName","pouchReplicationFunction","pouch","_ref","_ref$pull","pull","_ref$push","push","sync","bind","replicate","to","from","pouchAttachmentBinaryHash","data","Promise","res","d","isInstanceOf","obj","PouchDB"],"mappings":"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","sourcesContent":["/**\n * this handles the pouchdb-instance\n * to easy add modules and manipulate things\n * Adapters can be found here:\n * @link https://github.com/pouchdb/pouchdb/tree/master/packages/node_modules\n */\nimport PouchDBCore from 'pouchdb-core'; // pouchdb-find\n\nimport PouchDBFind from 'pouchdb-find';\nimport { binaryMd5 } from 'pouchdb-md5';\nPouchDBCore.plugin(PouchDBFind);\n/*\n// comment in to debug\nconst pouchdbDebug = require('pouchdb-debug');\nPouchDB.plugin(pouchdbDebug);\nPouchDB.debug.enable('*');\n*/\n\nimport { newRxError, newRxTypeError } from './rx-error';\nimport { isFolderPath } from './util';\n/**\n * get the number of all undeleted documents\n */\n\nexport function countAllUndeleted(pouchdb) {\n  return pouchdb.allDocs({\n    include_docs: false,\n    attachments: false\n  }).then(function (docs) {\n    return docs.rows.filter(function (row) {\n      return !row.id.startsWith('_design/');\n    }).length;\n  });\n}\n/**\n * get a batch of documents from the pouch-instance\n */\n\nexport function getBatch(pouchdb, limit) {\n  if (limit <= 1) {\n    throw newRxError('P1', {\n      limit: limit\n    });\n  }\n\n  return pouchdb.allDocs({\n    include_docs: true,\n    attachments: false,\n    limit: limit\n  }).then(function (docs) {\n    return docs.rows.map(function (row) {\n      return row.doc;\n    }).filter(function (doc) {\n      return !doc._id.startsWith('_design');\n    });\n  });\n}\n/**\n * check if the given module is a leveldown-adapter\n * throws if not\n */\n\nexport function isLevelDown(adapter) {\n  if (!adapter || typeof adapter.super_ !== 'function') {\n    throw newRxError('UT4', {\n      adapter: adapter\n    });\n  }\n}\nvar validCouchDBStringRegexStr = '^[a-z][_$a-z0-9]*$';\nvar validCouchDBStringRegex = new RegExp(validCouchDBStringRegexStr);\n/**\n * validates that a given string is ok to be used with couchdb-collection-names\n * @link https://wiki.apache.org/couchdb/HTTP_database_API\n * @throws  {Error}\n */\n\nexport function validateCouchDBString(name) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw newRxTypeError('UT1', {\n      name: name\n    });\n  } // do not check, if foldername is given\n\n\n  if (isFolderPath(name)) {\n    return true;\n  }\n\n  if (!name.match(validCouchDBStringRegex)) {\n    throw newRxError('UT2', {\n      regex: validCouchDBStringRegexStr,\n      givenName: name\n    });\n  }\n\n  return true;\n}\n/**\n * get the correct function-name for pouchdb-replication\n */\n\nexport function pouchReplicationFunction(pouch, _ref) {\n  var _ref$pull = _ref.pull,\n      pull = _ref$pull === void 0 ? true : _ref$pull,\n      _ref$push = _ref.push,\n      push = _ref$push === void 0 ? true : _ref$push;\n  if (pull && push) return pouch.sync.bind(pouch);\n  if (!pull && push) return pouch.replicate.to.bind(pouch);\n  if (pull && !push) return pouch.replicate.from.bind(pouch);\n\n  if (!pull && !push) {\n    throw newRxError('UT3', {\n      pull: pull,\n      push: push\n    });\n  }\n}\n/**\n * create the same diggest as an attachment with that data\n * would have\n */\n\nexport function pouchAttachmentBinaryHash(data) {\n  return new Promise(function (res) {\n    binaryMd5(data, function (d) {\n      res('md5-' + d);\n    });\n  });\n}\nexport function isInstanceOf(obj) {\n  return obj instanceof PouchDBCore;\n}\nexport var PouchDB = PouchDBCore;\n//# sourceMappingURL=pouch-db.js.map"]},"metadata":{},"sourceType":"module"}