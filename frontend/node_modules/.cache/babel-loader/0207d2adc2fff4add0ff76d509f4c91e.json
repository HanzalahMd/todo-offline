{"ast":null,"code":"import { ERROR_MESSAGES } from './error-messages';\nimport { checkSchema } from './check-schema';\nimport { checkOrmMethods } from './check-orm';\nimport { checkMigrationStrategies } from './check-migration-strategies';\nimport { ensureCollectionNameValid, ensureDatabaseNameIsValid } from './unallowed-properties';\nimport { checkQuery } from './check-query';\nimport { newRxError } from '../../rx-error';\nexport * from './check-schema';\nvar DEV_MODE_PLUGIN_NAME = 'dev-mode';\nexport var RxDBDevModePlugin = {\n  name: DEV_MODE_PLUGIN_NAME,\n  rxdb: true,\n  overwritable: {\n    isDevMode: function isDevMode() {\n      return true;\n    },\n    tunnelErrorMessage: function tunnelErrorMessage(code) {\n      if (!ERROR_MESSAGES[code]) {\n        console.error('RxDB: Error-Code not known: ' + code);\n        throw new Error('Error-Code ' + code + ' not known, contact the maintainer');\n      }\n\n      return ERROR_MESSAGES[code];\n    }\n  },\n  hooks: {\n    preAddRxPlugin: function preAddRxPlugin(args) {\n      /**\n       * throw when dev mode is added multiple times\n       * because there is no way that this was done intentional.\n       * Likely the developer has mixed core and default usage of RxDB.\n       */\n      if (args.plugin.name === DEV_MODE_PLUGIN_NAME) {\n        throw newRxError('DEV1', {\n          plugins: args.plugins\n        });\n      }\n    },\n    preCreateRxSchema: checkSchema,\n    preCreateRxDatabase: function preCreateRxDatabase(args) {\n      ensureDatabaseNameIsValid(args);\n    },\n    preCreateRxCollection: function preCreateRxCollection(args) {\n      ensureCollectionNameValid(args);\n\n      if (args.name.charAt(0) === '_') {\n        throw newRxError('DB2', {\n          name: args.name\n        });\n      }\n\n      if (!args.schema) {\n        throw newRxError('DB4', {\n          name: args.name,\n          args: args\n        });\n      }\n    },\n    preCreateRxQuery: function preCreateRxQuery(args) {\n      checkQuery(args);\n    },\n    createRxCollection: function createRxCollection(args) {\n      // check ORM-methods\n      checkOrmMethods(args.statics);\n      checkOrmMethods(args.methods);\n      checkOrmMethods(args.attachments); // check migration strategies\n\n      if (args.schema && args.migrationStrategies) {\n        checkMigrationStrategies(args.schema, args.migrationStrategies);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/dev-mode/index.js"],"names":["ERROR_MESSAGES","checkSchema","checkOrmMethods","checkMigrationStrategies","ensureCollectionNameValid","ensureDatabaseNameIsValid","checkQuery","newRxError","DEV_MODE_PLUGIN_NAME","RxDBDevModePlugin","name","rxdb","overwritable","isDevMode","tunnelErrorMessage","code","console","error","Error","hooks","preAddRxPlugin","args","plugin","plugins","preCreateRxSchema","preCreateRxDatabase","preCreateRxCollection","charAt","schema","preCreateRxQuery","createRxCollection","statics","methods","attachments","migrationStrategies"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,wBAAT,QAAyC,8BAAzC;AACA,SAASC,yBAAT,EAAoCC,yBAApC,QAAqE,wBAArE;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,cAAc,gBAAd;AACA,IAAIC,oBAAoB,GAAG,UAA3B;AACA,OAAO,IAAIC,iBAAiB,GAAG;AAC7BC,EAAAA,IAAI,EAAEF,oBADuB;AAE7BG,EAAAA,IAAI,EAAE,IAFuB;AAG7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,aAAO,IAAP;AACD,KAHW;AAIZC,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AACpD,UAAI,CAACf,cAAc,CAACe,IAAD,CAAnB,EAA2B;AACzBC,QAAAA,OAAO,CAACC,KAAR,CAAc,iCAAiCF,IAA/C;AACA,cAAM,IAAIG,KAAJ,CAAU,gBAAgBH,IAAhB,GAAuB,oCAAjC,CAAN;AACD;;AAED,aAAOf,cAAc,CAACe,IAAD,CAArB;AACD;AAXW,GAHe;AAgB7BI,EAAAA,KAAK,EAAE;AACLC,IAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AAC5C;;;;;AAKA,UAAIA,IAAI,CAACC,MAAL,CAAYZ,IAAZ,KAAqBF,oBAAzB,EAA+C;AAC7C,cAAMD,UAAU,CAAC,MAAD,EAAS;AACvBgB,UAAAA,OAAO,EAAEF,IAAI,CAACE;AADS,SAAT,CAAhB;AAGD;AACF,KAZI;AAaLC,IAAAA,iBAAiB,EAAEvB,WAbd;AAcLwB,IAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BJ,IAA7B,EAAmC;AACtDhB,MAAAA,yBAAyB,CAACgB,IAAD,CAAzB;AACD,KAhBI;AAiBLK,IAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BL,IAA/B,EAAqC;AAC1DjB,MAAAA,yBAAyB,CAACiB,IAAD,CAAzB;;AAEA,UAAIA,IAAI,CAACX,IAAL,CAAUiB,MAAV,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B,cAAMpB,UAAU,CAAC,KAAD,EAAQ;AACtBG,UAAAA,IAAI,EAAEW,IAAI,CAACX;AADW,SAAR,CAAhB;AAGD;;AAED,UAAI,CAACW,IAAI,CAACO,MAAV,EAAkB;AAChB,cAAMrB,UAAU,CAAC,KAAD,EAAQ;AACtBG,UAAAA,IAAI,EAAEW,IAAI,CAACX,IADW;AAEtBW,UAAAA,IAAI,EAAEA;AAFgB,SAAR,CAAhB;AAID;AACF,KAhCI;AAiCLQ,IAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BR,IAA1B,EAAgC;AAChDf,MAAAA,UAAU,CAACe,IAAD,CAAV;AACD,KAnCI;AAoCLS,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BT,IAA5B,EAAkC;AACpD;AACAnB,MAAAA,eAAe,CAACmB,IAAI,CAACU,OAAN,CAAf;AACA7B,MAAAA,eAAe,CAACmB,IAAI,CAACW,OAAN,CAAf;AACA9B,MAAAA,eAAe,CAACmB,IAAI,CAACY,WAAN,CAAf,CAJoD,CAIjB;;AAEnC,UAAIZ,IAAI,CAACO,MAAL,IAAeP,IAAI,CAACa,mBAAxB,EAA6C;AAC3C/B,QAAAA,wBAAwB,CAACkB,IAAI,CAACO,MAAN,EAAcP,IAAI,CAACa,mBAAnB,CAAxB;AACD;AACF;AA7CI;AAhBsB,CAAxB","sourcesContent":["import { ERROR_MESSAGES } from './error-messages';\nimport { checkSchema } from './check-schema';\nimport { checkOrmMethods } from './check-orm';\nimport { checkMigrationStrategies } from './check-migration-strategies';\nimport { ensureCollectionNameValid, ensureDatabaseNameIsValid } from './unallowed-properties';\nimport { checkQuery } from './check-query';\nimport { newRxError } from '../../rx-error';\nexport * from './check-schema';\nvar DEV_MODE_PLUGIN_NAME = 'dev-mode';\nexport var RxDBDevModePlugin = {\n  name: DEV_MODE_PLUGIN_NAME,\n  rxdb: true,\n  overwritable: {\n    isDevMode: function isDevMode() {\n      return true;\n    },\n    tunnelErrorMessage: function tunnelErrorMessage(code) {\n      if (!ERROR_MESSAGES[code]) {\n        console.error('RxDB: Error-Code not known: ' + code);\n        throw new Error('Error-Code ' + code + ' not known, contact the maintainer');\n      }\n\n      return ERROR_MESSAGES[code];\n    }\n  },\n  hooks: {\n    preAddRxPlugin: function preAddRxPlugin(args) {\n      /**\n       * throw when dev mode is added multiple times\n       * because there is no way that this was done intentional.\n       * Likely the developer has mixed core and default usage of RxDB.\n       */\n      if (args.plugin.name === DEV_MODE_PLUGIN_NAME) {\n        throw newRxError('DEV1', {\n          plugins: args.plugins\n        });\n      }\n    },\n    preCreateRxSchema: checkSchema,\n    preCreateRxDatabase: function preCreateRxDatabase(args) {\n      ensureDatabaseNameIsValid(args);\n    },\n    preCreateRxCollection: function preCreateRxCollection(args) {\n      ensureCollectionNameValid(args);\n\n      if (args.name.charAt(0) === '_') {\n        throw newRxError('DB2', {\n          name: args.name\n        });\n      }\n\n      if (!args.schema) {\n        throw newRxError('DB4', {\n          name: args.name,\n          args: args\n        });\n      }\n    },\n    preCreateRxQuery: function preCreateRxQuery(args) {\n      checkQuery(args);\n    },\n    createRxCollection: function createRxCollection(args) {\n      // check ORM-methods\n      checkOrmMethods(args.statics);\n      checkOrmMethods(args.methods);\n      checkOrmMethods(args.attachments); // check migration strategies\n\n      if (args.schema && args.migrationStrategies) {\n        checkMigrationStrategies(args.schema, args.migrationStrategies);\n      }\n    }\n  }\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}