{"ast":null,"code":"/**\n * this is based on\n * @link https://github.com/aheckmann/mquery/blob/master/lib/mquery.js\n */\nimport { isObject, merge as _merge, mergeClone } from './mquery_utils';\nimport { newRxTypeError, newRxError } from '../rx-error';\nimport { clone as _clone } from '../util';\nexport var MQueryBase =\n/*#__PURE__*/\nfunction () {\n  /**\n   * MQuery constructor used for building queries.\n   *\n   * ####Example:\n   *     var query = new MQuery({ name: 'mquery' });\n   *     query.where('age').gte(21).exec(callback);\n   *\n   */\n  function MQueryBase(criteria) {\n    this.options = {};\n    this._conditions = {};\n    if (criteria) this.find(criteria);\n  }\n  /**\n   * returns a cloned version of the query\n   */\n\n\n  var _proto = MQueryBase.prototype;\n\n  _proto.clone = function clone() {\n    var same = new MQueryBase();\n    Object.entries(this).forEach(function (_ref) {\n      var k = _ref[0],\n          v = _ref[1];\n      return same[k] = _clone(v);\n    });\n    return same;\n  }\n  /**\n   * Specifies a `path` for use with chaining.\n   */\n  ;\n\n  _proto.where = function where(_path, _val) {\n    if (!arguments.length) return this;\n    var type = typeof arguments[0];\n\n    if ('string' === type) {\n      this._path = arguments[0];\n      if (2 === arguments.length) this._conditions[this._path] = arguments[1];\n      return this;\n    }\n\n    if ('object' === type && !Array.isArray(arguments[0])) return this.merge(arguments[0]);\n    throw newRxTypeError('MQ1', {\n      path: arguments[0]\n    });\n  }\n  /**\n   * Specifies the complementary comparison value for paths specified with `where()`\n   * ####Example\n   *     User.where('age').equals(49);\n   */\n  ;\n\n  _proto.equals = function equals(val) {\n    this._ensurePath('equals');\n\n    var path = this._path;\n    this._conditions[path] = val;\n    return this;\n  }\n  /**\n   * Specifies the complementary comparison value for paths specified with `where()`\n   * This is alias of `equals`\n   */\n  ;\n\n  _proto.eq = function eq(val) {\n    this._ensurePath('eq');\n\n    var path = this._path;\n    this._conditions[path] = val;\n    return this;\n  }\n  /**\n   * Specifies arguments for an `$or` condition.\n   * ####Example\n   *     query.or([{ color: 'red' }, { status: 'emergency' }])\n   */\n  ;\n\n  _proto.or = function or(array) {\n    var or = this._conditions.$or || (this._conditions.$or = []);\n    if (!Array.isArray(array)) array = [array];\n    or.push.apply(or, array);\n    return this;\n  }\n  /**\n   * Specifies arguments for a `$nor` condition.\n   * ####Example\n   *     query.nor([{ color: 'green' }, { status: 'ok' }])\n   */\n  ;\n\n  _proto.nor = function nor(array) {\n    var nor = this._conditions.$nor || (this._conditions.$nor = []);\n    if (!Array.isArray(array)) array = [array];\n    nor.push.apply(nor, array);\n    return this;\n  }\n  /**\n   * Specifies arguments for a `$and` condition.\n   * ####Example\n   *     query.and([{ color: 'green' }, { status: 'ok' }])\n   * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n   */\n  ;\n\n  _proto.and = function and(array) {\n    var and = this._conditions.$and || (this._conditions.$and = []);\n    if (!Array.isArray(array)) array = [array];\n    and.push.apply(and, array);\n    return this;\n  }\n  /**\n   * Specifies a `$mod` condition\n   */\n  ;\n\n  _proto.mod = function mod(_path, _val) {\n    var val;\n    var path;\n\n    if (1 === arguments.length) {\n      this._ensurePath('mod');\n\n      val = arguments[0];\n      path = this._path;\n    } else if (2 === arguments.length && !Array.isArray(arguments[1])) {\n      this._ensurePath('mod');\n\n      val = arguments.slice();\n      path = this._path;\n    } else if (3 === arguments.length) {\n      val = arguments.slice(1);\n      path = arguments[0];\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$mod = val;\n    return this;\n  }\n  /**\n   * Specifies an `$exists` condition\n   * ####Example\n   *     // { name: { $exists: true }}\n   *     Thing.where('name').exists()\n   *     Thing.where('name').exists(true)\n   *     Thing.find().exists('name')\n   */\n  ;\n\n  _proto.exists = function exists(_path, _val) {\n    var path;\n    var val;\n\n    if (0 === arguments.length) {\n      this._ensurePath('exists');\n\n      path = this._path;\n      val = true;\n    } else if (1 === arguments.length) {\n      if ('boolean' === typeof arguments[0]) {\n        this._ensurePath('exists');\n\n        path = this._path;\n        val = arguments[0];\n      } else {\n        path = arguments[0];\n        val = true;\n      }\n    } else if (2 === arguments.length) {\n      path = arguments[0];\n      val = arguments[1];\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$exists = val;\n    return this;\n  }\n  /**\n   * Specifies an `$elemMatch` condition\n   * ####Example\n   *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n   *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n   *     query.elemMatch('comment', function (elem) {\n   *       elem.where('author').equals('autobot');\n   *       elem.where('votes').gte(5);\n   *     })\n   *     query.where('comment').elemMatch(function (elem) {\n   *       elem.where({ author: 'autobot' });\n   *       elem.where('votes').gte(5);\n   *     })\n   */\n  ;\n\n  _proto.elemMatch = function elemMatch(_path, _criteria) {\n    if (null === arguments[0]) throw newRxTypeError('MQ2');\n    var fn;\n    var path;\n    var criteria;\n\n    if ('function' === typeof arguments[0]) {\n      this._ensurePath('elemMatch');\n\n      path = this._path;\n      fn = arguments[0];\n    } else if (isObject(arguments[0])) {\n      this._ensurePath('elemMatch');\n\n      path = this._path;\n      criteria = arguments[0];\n    } else if ('function' === typeof arguments[1]) {\n      path = arguments[0];\n      fn = arguments[1];\n    } else if (arguments[1] && isObject(arguments[1])) {\n      path = arguments[0];\n      criteria = arguments[1];\n    } else throw newRxTypeError('MQ2');\n\n    if (fn) {\n      criteria = new MQueryBase();\n      fn(criteria);\n      criteria = criteria._conditions;\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$elemMatch = criteria;\n    return this;\n  }\n  /**\n   * Sets the sort order\n   * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n   * If a string is passed, it must be a space delimited list of path names.\n   * The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n   * ####Example\n   *     query.sort({ field: 'asc', test: -1 });\n   *     query.sort('field -test');\n   *     query.sort([['field', 1], ['test', -1]]);\n   */\n  ;\n\n  _proto.sort = function sort(arg) {\n    var _this = this;\n\n    if (!arg) return this;\n    var len;\n    var type = typeof arg; // .sort([['field', 1], ['test', -1]])\n\n    if (Array.isArray(arg)) {\n      len = arg.length;\n\n      for (var i = 0; i < arg.length; ++i) {\n        _pushArr(this.options, arg[i][0], arg[i][1]);\n      }\n\n      return this;\n    } // .sort('field -test')\n\n\n    if (1 === arguments.length && 'string' === type) {\n      arg = arg.split(/\\s+/);\n      len = arg.length;\n\n      for (var _i = 0; _i < len; ++_i) {\n        var field = arg[_i];\n        if (!field) continue;\n        var ascend = '-' === field[0] ? -1 : 1;\n        if (ascend === -1) field = field.substring(1);\n        push(this.options, field, ascend);\n      }\n\n      return this;\n    } // .sort({ field: 1, test: -1 })\n\n\n    if (isObject(arg)) {\n      var keys = Object.keys(arg);\n      keys.forEach(function (field) {\n        return push(_this.options, field, arg[field]);\n      });\n      return this;\n    }\n\n    throw newRxTypeError('MQ3', {\n      args: arguments\n    });\n  }\n  /**\n   * Merges another MQuery or conditions object into this one.\n   *\n   * When a MQuery is passed, conditions, field selection and options are merged.\n   *\n   */\n  ;\n\n  _proto.merge = function merge(source) {\n    if (!source) return this;\n\n    if (!canMerge(source)) {\n      throw newRxTypeError('MQ4', {\n        source: source\n      });\n    }\n\n    if (source instanceof MQueryBase) {\n      // if source has a feature, apply it to ourselves\n      if (source._conditions) _merge(this._conditions, source._conditions);\n\n      if (source._fields) {\n        if (!this._fields) this._fields = {};\n\n        _merge(this._fields, source._fields);\n      }\n\n      if (source.options) {\n        if (!this.options) this.options = {};\n\n        _merge(this.options, source.options);\n      }\n\n      if (source._update) {\n        if (!this._update) this._update = {};\n        mergeClone(this._update, source._update);\n      }\n\n      if (source._distinct) this._distinct = source._distinct;\n      return this;\n    } // plain object\n\n\n    _merge(this._conditions, source);\n\n    return this;\n  }\n  /**\n   * Finds documents.\n   * ####Example\n   *     query.find()\n   *     query.find({ name: 'Burning Lights' })\n   */\n  ;\n\n  _proto.find = function find(criteria) {\n    if (canMerge(criteria)) this.merge(criteria);\n    return this;\n  }\n  /**\n   * Make sure _path is set.\n   *\n   * @parmam {String} method\n   */\n  ;\n\n  _proto._ensurePath = function _ensurePath(method) {\n    if (!this._path) {\n      throw newRxError('MQ5', {\n        method: method\n      });\n    }\n  };\n\n  return MQueryBase;\n}();\nexport function createMQuery(criteria) {\n  return new MQueryBase(criteria);\n}\n/**\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n\n['limit', 'skip', 'maxScan', 'batchSize', 'comment'].forEach(function (method) {\n  MQueryBase.prototype[method] = function (v) {\n    this.options[method] = v;\n    return this;\n  };\n});\n/**\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\n['gt', 'gte', 'lt', 'lte', 'ne', 'in', 'nin', 'all', 'regex', 'size'].forEach(function ($conditional) {\n  MQueryBase.prototype[$conditional] = function () {\n    var path;\n    var val;\n\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ? this._conditions[path] : this._conditions[path] = {};\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n/*!\n * @ignore\n */\n\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw newRxTypeError('MQ6', {\n      opts: opts,\n      field: field,\n      value: value\n    });\n  }\n\n  if (value && value.$meta) {\n    var sort = opts.sort || (opts.sort = {});\n    sort[field] = {\n      $meta: value.$meta\n    };\n    return;\n  }\n\n  var val = String(value || 1).toLowerCase();\n\n  if (!/^(?:ascending|asc|descending|desc|1|-1)$/.test(val)) {\n    if (Array.isArray(value)) value = '[' + value + ']';\n    throw newRxTypeError('MQ7', {\n      field: field,\n      value: value\n    });\n  } // store `sort` in a sane format\n\n\n  var s = opts.sort || (opts.sort = {});\n  var valueStr = value.toString().replace('asc', '1').replace('ascending', '1').replace('desc', '-1').replace('descending', '-1');\n  s[field] = parseInt(valueStr, 10);\n}\n\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n\n  if (!Array.isArray(opts.sort)) {\n    throw newRxTypeError('MQ8', {\n      opts: opts,\n      field: field,\n      value: value\n    });\n  }\n  /*    const valueStr = value.toString()\n          .replace('asc', '1')\n          .replace('ascending', '1')\n          .replace('desc', '-1')\n          .replace('descending', '-1');*/\n\n\n  opts.sort.push([field, value]);\n}\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n */\n\n\nexport function canMerge(conds) {\n  return conds instanceof MQueryBase || isObject(conds);\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/mquery/mquery.js"],"names":["isObject","merge","_merge","mergeClone","newRxTypeError","newRxError","clone","_clone","MQueryBase","criteria","options","_conditions","find","_proto","prototype","same","Object","entries","forEach","_ref","k","v","where","_path","_val","arguments","length","type","Array","isArray","path","equals","val","_ensurePath","eq","or","array","$or","push","apply","nor","$nor","and","$and","mod","slice","conds","$mod","exists","$exists","elemMatch","_criteria","fn","$elemMatch","sort","arg","_this","len","i","_pushArr","split","_i","field","ascend","substring","keys","args","source","canMerge","_fields","_update","_distinct","method","createMQuery","$conditional","opts","value","$meta","String","toLowerCase","test","s","valueStr","toString","replace","parseInt"],"mappings":"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","sourcesContent":["/**\n * this is based on\n * @link https://github.com/aheckmann/mquery/blob/master/lib/mquery.js\n */\nimport { isObject, merge as _merge, mergeClone } from './mquery_utils';\nimport { newRxTypeError, newRxError } from '../rx-error';\nimport { clone as _clone } from '../util';\nexport var MQueryBase = /*#__PURE__*/function () {\n  /**\n   * MQuery constructor used for building queries.\n   *\n   * ####Example:\n   *     var query = new MQuery({ name: 'mquery' });\n   *     query.where('age').gte(21).exec(callback);\n   *\n   */\n  function MQueryBase(criteria) {\n    this.options = {};\n    this._conditions = {};\n    if (criteria) this.find(criteria);\n  }\n  /**\n   * returns a cloned version of the query\n   */\n\n\n  var _proto = MQueryBase.prototype;\n\n  _proto.clone = function clone() {\n    var same = new MQueryBase();\n    Object.entries(this).forEach(function (_ref) {\n      var k = _ref[0],\n          v = _ref[1];\n      return same[k] = _clone(v);\n    });\n    return same;\n  }\n  /**\n   * Specifies a `path` for use with chaining.\n   */\n  ;\n\n  _proto.where = function where(_path, _val) {\n    if (!arguments.length) return this;\n    var type = typeof arguments[0];\n\n    if ('string' === type) {\n      this._path = arguments[0];\n      if (2 === arguments.length) this._conditions[this._path] = arguments[1];\n      return this;\n    }\n\n    if ('object' === type && !Array.isArray(arguments[0])) return this.merge(arguments[0]);\n    throw newRxTypeError('MQ1', {\n      path: arguments[0]\n    });\n  }\n  /**\n   * Specifies the complementary comparison value for paths specified with `where()`\n   * ####Example\n   *     User.where('age').equals(49);\n   */\n  ;\n\n  _proto.equals = function equals(val) {\n    this._ensurePath('equals');\n\n    var path = this._path;\n    this._conditions[path] = val;\n    return this;\n  }\n  /**\n   * Specifies the complementary comparison value for paths specified with `where()`\n   * This is alias of `equals`\n   */\n  ;\n\n  _proto.eq = function eq(val) {\n    this._ensurePath('eq');\n\n    var path = this._path;\n    this._conditions[path] = val;\n    return this;\n  }\n  /**\n   * Specifies arguments for an `$or` condition.\n   * ####Example\n   *     query.or([{ color: 'red' }, { status: 'emergency' }])\n   */\n  ;\n\n  _proto.or = function or(array) {\n    var or = this._conditions.$or || (this._conditions.$or = []);\n    if (!Array.isArray(array)) array = [array];\n    or.push.apply(or, array);\n    return this;\n  }\n  /**\n   * Specifies arguments for a `$nor` condition.\n   * ####Example\n   *     query.nor([{ color: 'green' }, { status: 'ok' }])\n   */\n  ;\n\n  _proto.nor = function nor(array) {\n    var nor = this._conditions.$nor || (this._conditions.$nor = []);\n    if (!Array.isArray(array)) array = [array];\n    nor.push.apply(nor, array);\n    return this;\n  }\n  /**\n   * Specifies arguments for a `$and` condition.\n   * ####Example\n   *     query.and([{ color: 'green' }, { status: 'ok' }])\n   * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n   */\n  ;\n\n  _proto.and = function and(array) {\n    var and = this._conditions.$and || (this._conditions.$and = []);\n    if (!Array.isArray(array)) array = [array];\n    and.push.apply(and, array);\n    return this;\n  }\n  /**\n   * Specifies a `$mod` condition\n   */\n  ;\n\n  _proto.mod = function mod(_path, _val) {\n    var val;\n    var path;\n\n    if (1 === arguments.length) {\n      this._ensurePath('mod');\n\n      val = arguments[0];\n      path = this._path;\n    } else if (2 === arguments.length && !Array.isArray(arguments[1])) {\n      this._ensurePath('mod');\n\n      val = arguments.slice();\n      path = this._path;\n    } else if (3 === arguments.length) {\n      val = arguments.slice(1);\n      path = arguments[0];\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$mod = val;\n    return this;\n  }\n  /**\n   * Specifies an `$exists` condition\n   * ####Example\n   *     // { name: { $exists: true }}\n   *     Thing.where('name').exists()\n   *     Thing.where('name').exists(true)\n   *     Thing.find().exists('name')\n   */\n  ;\n\n  _proto.exists = function exists(_path, _val) {\n    var path;\n    var val;\n\n    if (0 === arguments.length) {\n      this._ensurePath('exists');\n\n      path = this._path;\n      val = true;\n    } else if (1 === arguments.length) {\n      if ('boolean' === typeof arguments[0]) {\n        this._ensurePath('exists');\n\n        path = this._path;\n        val = arguments[0];\n      } else {\n        path = arguments[0];\n        val = true;\n      }\n    } else if (2 === arguments.length) {\n      path = arguments[0];\n      val = arguments[1];\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$exists = val;\n    return this;\n  }\n  /**\n   * Specifies an `$elemMatch` condition\n   * ####Example\n   *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n   *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n   *     query.elemMatch('comment', function (elem) {\n   *       elem.where('author').equals('autobot');\n   *       elem.where('votes').gte(5);\n   *     })\n   *     query.where('comment').elemMatch(function (elem) {\n   *       elem.where({ author: 'autobot' });\n   *       elem.where('votes').gte(5);\n   *     })\n   */\n  ;\n\n  _proto.elemMatch = function elemMatch(_path, _criteria) {\n    if (null === arguments[0]) throw newRxTypeError('MQ2');\n    var fn;\n    var path;\n    var criteria;\n\n    if ('function' === typeof arguments[0]) {\n      this._ensurePath('elemMatch');\n\n      path = this._path;\n      fn = arguments[0];\n    } else if (isObject(arguments[0])) {\n      this._ensurePath('elemMatch');\n\n      path = this._path;\n      criteria = arguments[0];\n    } else if ('function' === typeof arguments[1]) {\n      path = arguments[0];\n      fn = arguments[1];\n    } else if (arguments[1] && isObject(arguments[1])) {\n      path = arguments[0];\n      criteria = arguments[1];\n    } else throw newRxTypeError('MQ2');\n\n    if (fn) {\n      criteria = new MQueryBase();\n      fn(criteria);\n      criteria = criteria._conditions;\n    }\n\n    var conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$elemMatch = criteria;\n    return this;\n  }\n  /**\n   * Sets the sort order\n   * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n   * If a string is passed, it must be a space delimited list of path names.\n   * The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n   * ####Example\n   *     query.sort({ field: 'asc', test: -1 });\n   *     query.sort('field -test');\n   *     query.sort([['field', 1], ['test', -1]]);\n   */\n  ;\n\n  _proto.sort = function sort(arg) {\n    var _this = this;\n\n    if (!arg) return this;\n    var len;\n    var type = typeof arg; // .sort([['field', 1], ['test', -1]])\n\n    if (Array.isArray(arg)) {\n      len = arg.length;\n\n      for (var i = 0; i < arg.length; ++i) {\n        _pushArr(this.options, arg[i][0], arg[i][1]);\n      }\n\n      return this;\n    } // .sort('field -test')\n\n\n    if (1 === arguments.length && 'string' === type) {\n      arg = arg.split(/\\s+/);\n      len = arg.length;\n\n      for (var _i = 0; _i < len; ++_i) {\n        var field = arg[_i];\n        if (!field) continue;\n        var ascend = '-' === field[0] ? -1 : 1;\n        if (ascend === -1) field = field.substring(1);\n        push(this.options, field, ascend);\n      }\n\n      return this;\n    } // .sort({ field: 1, test: -1 })\n\n\n    if (isObject(arg)) {\n      var keys = Object.keys(arg);\n      keys.forEach(function (field) {\n        return push(_this.options, field, arg[field]);\n      });\n      return this;\n    }\n\n    throw newRxTypeError('MQ3', {\n      args: arguments\n    });\n  }\n  /**\n   * Merges another MQuery or conditions object into this one.\n   *\n   * When a MQuery is passed, conditions, field selection and options are merged.\n   *\n   */\n  ;\n\n  _proto.merge = function merge(source) {\n    if (!source) return this;\n\n    if (!canMerge(source)) {\n      throw newRxTypeError('MQ4', {\n        source: source\n      });\n    }\n\n    if (source instanceof MQueryBase) {\n      // if source has a feature, apply it to ourselves\n      if (source._conditions) _merge(this._conditions, source._conditions);\n\n      if (source._fields) {\n        if (!this._fields) this._fields = {};\n\n        _merge(this._fields, source._fields);\n      }\n\n      if (source.options) {\n        if (!this.options) this.options = {};\n\n        _merge(this.options, source.options);\n      }\n\n      if (source._update) {\n        if (!this._update) this._update = {};\n        mergeClone(this._update, source._update);\n      }\n\n      if (source._distinct) this._distinct = source._distinct;\n      return this;\n    } // plain object\n\n\n    _merge(this._conditions, source);\n\n    return this;\n  }\n  /**\n   * Finds documents.\n   * ####Example\n   *     query.find()\n   *     query.find({ name: 'Burning Lights' })\n   */\n  ;\n\n  _proto.find = function find(criteria) {\n    if (canMerge(criteria)) this.merge(criteria);\n    return this;\n  }\n  /**\n   * Make sure _path is set.\n   *\n   * @parmam {String} method\n   */\n  ;\n\n  _proto._ensurePath = function _ensurePath(method) {\n    if (!this._path) {\n      throw newRxError('MQ5', {\n        method: method\n      });\n    }\n  };\n\n  return MQueryBase;\n}();\nexport function createMQuery(criteria) {\n  return new MQueryBase(criteria);\n}\n\n/**\n * limit, skip, maxScan, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */\n['limit', 'skip', 'maxScan', 'batchSize', 'comment'].forEach(function (method) {\n  MQueryBase.prototype[method] = function (v) {\n    this.options[method] = v;\n    return this;\n  };\n});\n/**\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */\n\n['gt', 'gte', 'lt', 'lte', 'ne', 'in', 'nin', 'all', 'regex', 'size'].forEach(function ($conditional) {\n  MQueryBase.prototype[$conditional] = function () {\n    var path;\n    var val;\n\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n\n    var conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ? this._conditions[path] : this._conditions[path] = {};\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n/*!\n * @ignore\n */\n\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw newRxTypeError('MQ6', {\n      opts: opts,\n      field: field,\n      value: value\n    });\n  }\n\n  if (value && value.$meta) {\n    var sort = opts.sort || (opts.sort = {});\n    sort[field] = {\n      $meta: value.$meta\n    };\n    return;\n  }\n\n  var val = String(value || 1).toLowerCase();\n\n  if (!/^(?:ascending|asc|descending|desc|1|-1)$/.test(val)) {\n    if (Array.isArray(value)) value = '[' + value + ']';\n    throw newRxTypeError('MQ7', {\n      field: field,\n      value: value\n    });\n  } // store `sort` in a sane format\n\n\n  var s = opts.sort || (opts.sort = {});\n  var valueStr = value.toString().replace('asc', '1').replace('ascending', '1').replace('desc', '-1').replace('descending', '-1');\n  s[field] = parseInt(valueStr, 10);\n}\n\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n\n  if (!Array.isArray(opts.sort)) {\n    throw newRxTypeError('MQ8', {\n      opts: opts,\n      field: field,\n      value: value\n    });\n  }\n  /*    const valueStr = value.toString()\n          .replace('asc', '1')\n          .replace('ascending', '1')\n          .replace('desc', '-1')\n          .replace('descending', '-1');*/\n\n\n  opts.sort.push([field, value]);\n}\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n */\n\n\nexport function canMerge(conds) {\n  return conds instanceof MQueryBase || isObject(conds);\n}\n//# sourceMappingURL=mquery.js.map"]},"metadata":{},"sourceType":"module"}