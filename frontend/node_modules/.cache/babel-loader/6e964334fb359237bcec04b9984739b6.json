{"ast":null,"code":"/**\n * represents the branches of a single node\n */\nvar Branches =\n/** @class */\nfunction () {\n  function Branches(node) {\n    this.node = node;\n    this.deleted = false;\n    this.branches = {};\n  }\n\n  Branches.prototype.setBranch = function (which, branchNode) {\n    var previous = this.branches[which];\n\n    if (previous === branchNode) {\n      return;\n    } // set new branch\n\n\n    this.branches[which] = branchNode;\n    branchNode.parents.add(this.node);\n  };\n\n  Branches.prototype.getKeyOfNode = function (node) {\n    if (this.getBranch('0') === node) {\n      return '0';\n    } else if (this.getBranch('1') === node) {\n      return '1';\n    } else {\n      throw new Error('none matched');\n    }\n  };\n\n  Branches.prototype.getBranch = function (which) {\n    return this.branches[which];\n  };\n\n  Branches.prototype.getBothBranches = function () {\n    return [this.getBranch('0'), this.getBranch('1')];\n  };\n\n  Branches.prototype.hasBranchAsNode = function (node) {\n    if (this.getBranch('0') === node || this.getBranch('1') === node) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  Branches.prototype.hasNodeIdAsBranch = function (id) {\n    if (this.getBranch('0').id === id || this.getBranch('1').id === id) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  Branches.prototype.areBranchesStrictEqual = function () {\n    return this.branches['0'] === this.branches['1'];\n  };\n\n  Branches.prototype.hasEqualBranches = function () {\n    return JSON.stringify(this.branches['0']) === JSON.stringify(this.branches['1']);\n  };\n\n  return Branches;\n}();\n\nexport { Branches };\nexport function ensureNodesNotStrictEqual(node1, node2) {\n  if (node1 === node2) {\n    throw new Error('cannot have two strict equal branches');\n  }\n}","map":{"version":3,"sources":["../../src/branches.ts"],"names":[],"mappings":"AAIA;;;AAGA,IAAA,QAAA;AAAA;AAAA,YAAA;AAMI,WAAA,QAAA,CACY,IADZ,EAC6B;AAAjB,SAAA,IAAA,GAAA,IAAA;AANL,SAAA,OAAA,GAAmB,KAAnB;AACC,SAAA,QAAA,GAEJ,EAFI;AAMH;;AAEE,EAAA,QAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,KAAjB,EAAuC,UAAvC,EAA8D;AAC1D,QAAM,QAAQ,GAAG,KAAK,QAAL,CAAc,KAAd,CAAjB;;AACA,QAAI,QAAQ,KAAK,UAAjB,EAA6B;AACzB;AACH,KAJyD,CAM1D;;;AACA,SAAK,QAAL,CAAc,KAAd,IAAuB,UAAvB;AACA,IAAA,UAAU,CAAC,OAAX,CAAmB,GAAnB,CAAuB,KAAK,IAA5B;AACH,GATM;;AAWA,EAAA,QAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,IAApB,EAAqC;AACjC,QAAI,KAAK,SAAL,CAAe,GAAf,MAAwB,IAA5B,EAAkC;AAC9B,aAAO,GAAP;AACH,KAFD,MAEO,IAAI,KAAK,SAAL,CAAe,GAAf,MAAwB,IAA5B,EAAkC;AACrC,aAAO,GAAP;AACH,KAFM,MAEA;AACH,YAAM,IAAI,KAAJ,CAAU,cAAV,CAAN;AACH;AACJ,GARM;;AAUA,EAAA,QAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,KAAjB,EAAqC;AACjC,WAAO,KAAK,QAAL,CAAc,KAAd,CAAP;AACH,GAFM;;AAIA,EAAA,QAAA,CAAA,SAAA,CAAA,eAAA,GAAP,YAAA;AACI,WAAO,CACH,KAAK,SAAL,CAAe,GAAf,CADG,EAEH,KAAK,SAAL,CAAe,GAAf,CAFG,CAAP;AAIH,GALM;;AAOA,EAAA,QAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,IAAvB,EAAyC;AACrC,QACI,KAAK,SAAL,CAAe,GAAf,MAAwB,IAAxB,IACA,KAAK,SAAL,CAAe,GAAf,MAAwB,IAF5B,EAGE;AACE,aAAO,IAAP;AACH,KALD,MAKO;AACH,aAAO,KAAP;AACH;AACJ,GATM;;AAWA,EAAA,QAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,EAAzB,EAAmC;AAC/B,QACI,KAAK,SAAL,CAAe,GAAf,EAAoB,EAApB,KAA2B,EAA3B,IACA,KAAK,SAAL,CAAe,GAAf,EAAoB,EAApB,KAA2B,EAF/B,EAGE;AACE,aAAO,IAAP;AACH,KALD,MAKO;AACH,aAAO,KAAP;AACH;AACJ,GATM;;AAWA,EAAA,QAAA,CAAA,SAAA,CAAA,sBAAA,GAAP,YAAA;AACI,WAAO,KAAK,QAAL,CAAc,GAAd,MAAuB,KAAK,QAAL,CAAc,GAAd,CAA9B;AACH,GAFM;;AAIA,EAAA,QAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,YAAA;AACI,WAAO,IAAI,CAAC,SAAL,CAAe,KAAK,QAAL,CAAc,GAAd,CAAf,MACH,IAAI,CAAC,SAAL,CAAe,KAAK,QAAL,CAAc,GAAd,CAAf,CADJ;AAEH,GAHM;;AAIX,SAAA,QAAA;AAAC,CAxED,EAAA;;;AA0EA,OAAM,SAAU,yBAAV,CACF,KADE,EAEF,KAFE,EAEgB;AAElB,MAAI,KAAK,KAAK,KAAd,EAAqB;AACjB,UAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACH;AACJ","sourceRoot":"","sourcesContent":["/**\n * represents the branches of a single node\n */\nvar Branches = /** @class */ (function () {\n    function Branches(node) {\n        this.node = node;\n        this.deleted = false;\n        this.branches = {};\n    }\n    Branches.prototype.setBranch = function (which, branchNode) {\n        var previous = this.branches[which];\n        if (previous === branchNode) {\n            return;\n        }\n        // set new branch\n        this.branches[which] = branchNode;\n        branchNode.parents.add(this.node);\n    };\n    Branches.prototype.getKeyOfNode = function (node) {\n        if (this.getBranch('0') === node) {\n            return '0';\n        }\n        else if (this.getBranch('1') === node) {\n            return '1';\n        }\n        else {\n            throw new Error('none matched');\n        }\n    };\n    Branches.prototype.getBranch = function (which) {\n        return this.branches[which];\n    };\n    Branches.prototype.getBothBranches = function () {\n        return [\n            this.getBranch('0'),\n            this.getBranch('1')\n        ];\n    };\n    Branches.prototype.hasBranchAsNode = function (node) {\n        if (this.getBranch('0') === node ||\n            this.getBranch('1') === node) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    Branches.prototype.hasNodeIdAsBranch = function (id) {\n        if (this.getBranch('0').id === id ||\n            this.getBranch('1').id === id) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    Branches.prototype.areBranchesStrictEqual = function () {\n        return this.branches['0'] === this.branches['1'];\n    };\n    Branches.prototype.hasEqualBranches = function () {\n        return JSON.stringify(this.branches['0']) ===\n            JSON.stringify(this.branches['1']);\n    };\n    return Branches;\n}());\nexport { Branches };\nexport function ensureNodesNotStrictEqual(node1, node2) {\n    if (node1 === node2) {\n        throw new Error('cannot have two strict equal branches');\n    }\n}\n//# sourceMappingURL=branches.js.map"]},"metadata":{},"sourceType":"module"}