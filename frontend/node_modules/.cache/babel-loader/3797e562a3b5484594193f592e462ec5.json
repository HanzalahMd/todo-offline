{"ast":null,"code":"/**\n * stores the hooks that where added by the plugins\n */\n\n/**\n * hook-functions that can be extended by the plugin\n */\nexport var HOOKS = {\n  /**\n   * Runs before a plugin is added.\n   * Use this to block the usage of non-compatible plugins.\n   */\n  preAddRxPlugin: [],\n\n  /**\n   * functions that run before the database is created\n   */\n  preCreateRxDatabase: [],\n\n  /**\n   * runs after the database is created and prepared\n   * but before the instance is returned to the user\n   * @async\n   */\n  createRxDatabase: [],\n  preCreateRxCollection: [],\n  createRxCollection: [],\n\n  /**\n   * functions that get the json-schema as input\n   * to do additionally checks/manipulation\n   */\n  preCreateRxSchema: [],\n\n  /**\n   * functions that run after the RxSchema is created\n   * gets RxSchema as attribute\n   */\n  createRxSchema: [],\n  preCreateRxQuery: [],\n  createRxQuery: [],\n  createRxDocument: [],\n\n  /**\n   * runs after a RxDocument is created,\n   * cannot be async\n   */\n  postCreateRxDocument: [],\n\n  /**\n   * runs before a pouchdb-instance is created\n   * gets pouchParameters as attribute so you can manipulate them\n   * {\n   *   location: string,\n   *   adapter: any,\n   *   settings: object\n   * }\n   */\n  preCreatePouchDb: [],\n\n  /**\n   * runs on the document-data before the document is migrated\n   * {\n   *   doc: Object, // originam doc-data\n   *   migrated: // migrated doc-data after run throught migration-strategies\n   * }\n   */\n  preMigrateDocument: [],\n\n  /**\n   * runs after the migration of a document has been done\n   */\n  postMigrateDocument: [],\n\n  /**\n   * runs at the beginning of the destroy-process of a database\n   */\n  preDestroyRxDatabase: []\n};\nexport function runPluginHooks(hookKey, obj) {\n  HOOKS[hookKey].forEach(function (fun) {\n    return fun(obj);\n  });\n}\nexport function runAsyncPluginHooks(hookKey, obj) {\n  return Promise.all(HOOKS[hookKey].map(function (fun) {\n    return fun(obj);\n  }));\n}\n/**\n * used in tests to remove hooks\n */\n\nexport function _clearHook(type, fun) {\n  HOOKS[type] = HOOKS[type].filter(function (h) {\n    return h !== fun;\n  });\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/hooks.js"],"names":["HOOKS","preAddRxPlugin","preCreateRxDatabase","createRxDatabase","preCreateRxCollection","createRxCollection","preCreateRxSchema","createRxSchema","preCreateRxQuery","createRxQuery","createRxDocument","postCreateRxDocument","preCreatePouchDb","preMigrateDocument","postMigrateDocument","preDestroyRxDatabase","runPluginHooks","hookKey","obj","forEach","fun","runAsyncPluginHooks","Promise","all","map","_clearHook","type","filter","h"],"mappings":"AAAA;;;;AAIA;;;AAGA,OAAO,IAAIA,KAAK,GAAG;AACjB;;;;AAIAC,EAAAA,cAAc,EAAE,EALC;;AAOjB;;;AAGAC,EAAAA,mBAAmB,EAAE,EAVJ;;AAYjB;;;;;AAKAC,EAAAA,gBAAgB,EAAE,EAjBD;AAkBjBC,EAAAA,qBAAqB,EAAE,EAlBN;AAmBjBC,EAAAA,kBAAkB,EAAE,EAnBH;;AAqBjB;;;;AAIAC,EAAAA,iBAAiB,EAAE,EAzBF;;AA2BjB;;;;AAIAC,EAAAA,cAAc,EAAE,EA/BC;AAgCjBC,EAAAA,gBAAgB,EAAE,EAhCD;AAiCjBC,EAAAA,aAAa,EAAE,EAjCE;AAkCjBC,EAAAA,gBAAgB,EAAE,EAlCD;;AAoCjB;;;;AAIAC,EAAAA,oBAAoB,EAAE,EAxCL;;AA0CjB;;;;;;;;;AASAC,EAAAA,gBAAgB,EAAE,EAnDD;;AAqDjB;;;;;;;AAOAC,EAAAA,kBAAkB,EAAE,EA5DH;;AA8DjB;;;AAGAC,EAAAA,mBAAmB,EAAE,EAjEJ;;AAmEjB;;;AAGAC,EAAAA,oBAAoB,EAAE;AAtEL,CAAZ;AAwEP,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,GAAjC,EAAsC;AAC3ClB,EAAAA,KAAK,CAACiB,OAAD,CAAL,CAAeE,OAAf,CAAuB,UAAUC,GAAV,EAAe;AACpC,WAAOA,GAAG,CAACF,GAAD,CAAV;AACD,GAFD;AAGD;AACD,OAAO,SAASG,mBAAT,CAA6BJ,OAA7B,EAAsCC,GAAtC,EAA2C;AAChD,SAAOI,OAAO,CAACC,GAAR,CAAYvB,KAAK,CAACiB,OAAD,CAAL,CAAeO,GAAf,CAAmB,UAAUJ,GAAV,EAAe;AACnD,WAAOA,GAAG,CAACF,GAAD,CAAV;AACD,GAFkB,CAAZ,CAAP;AAGD;AACD;;;;AAIA,OAAO,SAASO,UAAT,CAAoBC,IAApB,EAA0BN,GAA1B,EAA+B;AACpCpB,EAAAA,KAAK,CAAC0B,IAAD,CAAL,GAAc1B,KAAK,CAAC0B,IAAD,CAAL,CAAYC,MAAZ,CAAmB,UAAUC,CAAV,EAAa;AAC5C,WAAOA,CAAC,KAAKR,GAAb;AACD,GAFa,CAAd;AAGD","sourcesContent":["/**\n * stores the hooks that where added by the plugins\n */\n\n/**\n * hook-functions that can be extended by the plugin\n */\nexport var HOOKS = {\n  /**\n   * Runs before a plugin is added.\n   * Use this to block the usage of non-compatible plugins.\n   */\n  preAddRxPlugin: [],\n\n  /**\n   * functions that run before the database is created\n   */\n  preCreateRxDatabase: [],\n\n  /**\n   * runs after the database is created and prepared\n   * but before the instance is returned to the user\n   * @async\n   */\n  createRxDatabase: [],\n  preCreateRxCollection: [],\n  createRxCollection: [],\n\n  /**\n   * functions that get the json-schema as input\n   * to do additionally checks/manipulation\n   */\n  preCreateRxSchema: [],\n\n  /**\n   * functions that run after the RxSchema is created\n   * gets RxSchema as attribute\n   */\n  createRxSchema: [],\n  preCreateRxQuery: [],\n  createRxQuery: [],\n  createRxDocument: [],\n\n  /**\n   * runs after a RxDocument is created,\n   * cannot be async\n   */\n  postCreateRxDocument: [],\n\n  /**\n   * runs before a pouchdb-instance is created\n   * gets pouchParameters as attribute so you can manipulate them\n   * {\n   *   location: string,\n   *   adapter: any,\n   *   settings: object\n   * }\n   */\n  preCreatePouchDb: [],\n\n  /**\n   * runs on the document-data before the document is migrated\n   * {\n   *   doc: Object, // originam doc-data\n   *   migrated: // migrated doc-data after run throught migration-strategies\n   * }\n   */\n  preMigrateDocument: [],\n\n  /**\n   * runs after the migration of a document has been done\n   */\n  postMigrateDocument: [],\n\n  /**\n   * runs at the beginning of the destroy-process of a database\n   */\n  preDestroyRxDatabase: []\n};\nexport function runPluginHooks(hookKey, obj) {\n  HOOKS[hookKey].forEach(function (fun) {\n    return fun(obj);\n  });\n}\nexport function runAsyncPluginHooks(hookKey, obj) {\n  return Promise.all(HOOKS[hookKey].map(function (fun) {\n    return fun(obj);\n  }));\n}\n/**\n * used in tests to remove hooks\n */\n\nexport function _clearHook(type, fun) {\n  HOOKS[type] = HOOKS[type].filter(function (h) {\n    return h !== fun;\n  });\n}\n//# sourceMappingURL=hooks.js.map"]},"metadata":{},"sourceType":"module"}