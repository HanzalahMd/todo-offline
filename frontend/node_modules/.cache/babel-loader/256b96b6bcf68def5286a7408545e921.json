{"ast":null,"code":"function mangle(key) {\n  return '$' + key;\n}\n\nfunction unmangle(key) {\n  return key.substring(1);\n}\n\nfunction Map$1() {\n  this._store = {};\n}\n\nMap$1.prototype.get = function (key) {\n  var mangled = mangle(key);\n  return this._store[mangled];\n};\n\nMap$1.prototype.set = function (key, value) {\n  var mangled = mangle(key);\n  this._store[mangled] = value;\n  return true;\n};\n\nMap$1.prototype.has = function (key) {\n  var mangled = mangle(key);\n  return mangled in this._store;\n};\n\nMap$1.prototype.delete = function (key) {\n  var mangled = mangle(key);\n  var res = mangled in this._store;\n  delete this._store[mangled];\n  return res;\n};\n\nMap$1.prototype.forEach = function (cb) {\n  var keys = Object.keys(this._store);\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    var key = keys[i];\n    var value = this._store[key];\n    key = unmangle(key);\n    cb(value, key);\n  }\n};\n\nObject.defineProperty(Map$1.prototype, 'size', {\n  get: function get() {\n    return Object.keys(this._store).length;\n  }\n});\n\nfunction Set$1(array) {\n  this._store = new Map$1(); // init with an array\n\n  if (array && Array.isArray(array)) {\n    for (var i = 0, len = array.length; i < len; i++) {\n      this.add(array[i]);\n    }\n  }\n}\n\nSet$1.prototype.add = function (key) {\n  return this._store.set(key, true);\n};\n\nSet$1.prototype.has = function (key) {\n  return this._store.has(key);\n};\n\nSet$1.prototype.forEach = function (cb) {\n  this._store.forEach(function (value, key) {\n    cb(key);\n  });\n};\n\nObject.defineProperty(Set$1.prototype, 'size', {\n  get: function get() {\n    return this._store.size;\n  }\n});\n/* global Map,Set,Symbol */\n// Based on https://kangax.github.io/compat-table/es6/ we can sniff out\n// incomplete Map/Set implementations which would otherwise cause our tests to fail.\n// Notably they fail in IE11 and iOS 8.4, which this prevents.\n\nfunction supportsMapAndSet() {\n  if (typeof Symbol === 'undefined' || typeof Map === 'undefined' || typeof Set === 'undefined') {\n    return false;\n  }\n\n  var prop = Object.getOwnPropertyDescriptor(Map, Symbol.species);\n  return prop && 'get' in prop && Map[Symbol.species] === Map;\n} // based on https://github.com/montagejs/collections\n\n\nvar ExportedSet;\nvar ExportedMap;\n{\n  if (supportsMapAndSet()) {\n    // prefer built-in Map/Set\n    ExportedSet = Set;\n    ExportedMap = Map;\n  } else {\n    // fall back to our polyfill\n    ExportedSet = Set$1;\n    ExportedMap = Map$1;\n  }\n}\nexport { ExportedSet as Set, ExportedMap as Map };","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/pouchdb-core/node_modules/pouchdb-collections/lib/index.es.js"],"names":["mangle","key","unmangle","substring","Map$1","_store","prototype","get","mangled","set","value","has","delete","res","forEach","cb","keys","Object","i","len","length","defineProperty","Set$1","array","Array","isArray","add","size","supportsMapAndSet","Symbol","Map","Set","prop","getOwnPropertyDescriptor","species","ExportedSet","ExportedMap"],"mappings":"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","sourcesContent":["function mangle(key) {\n  return '$' + key;\n}\nfunction unmangle(key) {\n  return key.substring(1);\n}\nfunction Map$1() {\n  this._store = {};\n}\nMap$1.prototype.get = function (key) {\n  var mangled = mangle(key);\n  return this._store[mangled];\n};\nMap$1.prototype.set = function (key, value) {\n  var mangled = mangle(key);\n  this._store[mangled] = value;\n  return true;\n};\nMap$1.prototype.has = function (key) {\n  var mangled = mangle(key);\n  return mangled in this._store;\n};\nMap$1.prototype.delete = function (key) {\n  var mangled = mangle(key);\n  var res = mangled in this._store;\n  delete this._store[mangled];\n  return res;\n};\nMap$1.prototype.forEach = function (cb) {\n  var keys = Object.keys(this._store);\n  for (var i = 0, len = keys.length; i < len; i++) {\n    var key = keys[i];\n    var value = this._store[key];\n    key = unmangle(key);\n    cb(value, key);\n  }\n};\nObject.defineProperty(Map$1.prototype, 'size', {\n  get: function () {\n    return Object.keys(this._store).length;\n  }\n});\n\nfunction Set$1(array) {\n  this._store = new Map$1();\n\n  // init with an array\n  if (array && Array.isArray(array)) {\n    for (var i = 0, len = array.length; i < len; i++) {\n      this.add(array[i]);\n    }\n  }\n}\nSet$1.prototype.add = function (key) {\n  return this._store.set(key, true);\n};\nSet$1.prototype.has = function (key) {\n  return this._store.has(key);\n};\nSet$1.prototype.forEach = function (cb) {\n  this._store.forEach(function (value, key) {\n    cb(key);\n  });\n};\nObject.defineProperty(Set$1.prototype, 'size', {\n  get: function () {\n    return this._store.size;\n  }\n});\n\n/* global Map,Set,Symbol */\n// Based on https://kangax.github.io/compat-table/es6/ we can sniff out\n// incomplete Map/Set implementations which would otherwise cause our tests to fail.\n// Notably they fail in IE11 and iOS 8.4, which this prevents.\nfunction supportsMapAndSet() {\n  if (typeof Symbol === 'undefined' || typeof Map === 'undefined' || typeof Set === 'undefined') {\n    return false;\n  }\n  var prop = Object.getOwnPropertyDescriptor(Map, Symbol.species);\n  return prop && 'get' in prop && Map[Symbol.species] === Map;\n}\n\n// based on https://github.com/montagejs/collections\n\nvar ExportedSet;\nvar ExportedMap;\n\n{\n  if (supportsMapAndSet()) { // prefer built-in Map/Set\n    ExportedSet = Set;\n    ExportedMap = Map;\n  } else { // fall back to our polyfill\n    ExportedSet = Set$1;\n    ExportedMap = Map$1;\n  }\n}\n\nexport { ExportedSet as Set, ExportedMap as Map };\n"]},"metadata":{},"sourceType":"module"}