{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with remote graphql endpoint\n */\n\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { first, filter } from 'rxjs/operators';\nimport GraphQLClient from 'graphql-client';\nimport { promiseWait, flatClone } from '../../util';\nimport Core from '../../core';\nimport { hash } from '../../util';\nimport { DEFAULT_MODIFIER, wasRevisionfromPullReplication, createRevisionForPulledDocument, getDocsWithRevisionsFromPouch } from './helper';\nimport { setLastPushSequence, getLastPullDocument, setLastPullDocument, getChangesSinceLastPushSequence } from './crawling-checkpoint';\nimport RxDBWatchForChangesPlugin from '../watch-for-changes';\nimport RxDBLeaderElectionPlugin from '../leader-election';\nimport { changeEventfromPouchChange } from '../../rx-change-event';\nCore.plugin(RxDBLeaderElectionPlugin);\n/**\n * add the watch-for-changes-plugin\n * so pouchdb will emit events when something gets written to it\n */\n\nCore.plugin(RxDBWatchForChangesPlugin);\nexport var RxGraphQLReplicationState =\n/*#__PURE__*/\nfunction () {\n  function RxGraphQLReplicationState(collection, url, headers, pull, push, deletedFlag, lastPulledRevField, live, liveInterval, retryTime, syncRevisions) {\n    this._subjects = {\n      recieved: new Subject(),\n      // all documents that are recieved from the endpoint\n      send: new Subject(),\n      // all documents that are send to the endpoint\n      error: new Subject(),\n      // all errors that are revieced from the endpoint, emits new Error() objects\n      canceled: new BehaviorSubject(false),\n      // true when the replication was canceled\n      active: new BehaviorSubject(false),\n      // true when something is running, false when not\n      initialReplicationComplete: new BehaviorSubject(false) // true the initial replication-cycle is over\n\n    };\n    this._runningPromise = Promise.resolve();\n    this._subs = [];\n    this._runCount = 0;\n    this._runQueueCount = 0;\n    this.initialReplicationComplete$ = undefined;\n    this.recieved$ = undefined;\n    this.send$ = undefined;\n    this.error$ = undefined;\n    this.canceled$ = undefined;\n    this.active$ = undefined;\n    this.collection = collection;\n    this.pull = pull;\n    this.push = push;\n    this.deletedFlag = deletedFlag;\n    this.lastPulledRevField = lastPulledRevField;\n    this.live = live;\n    this.liveInterval = liveInterval;\n    this.retryTime = retryTime;\n    this.syncRevisions = syncRevisions;\n    this.client = GraphQLClient({\n      url: url,\n      headers: headers\n    });\n    this.endpointHash = hash(url);\n\n    this._prepare();\n  }\n\n  var _proto = RxGraphQLReplicationState.prototype;\n  /**\n   * things that are more complex to not belong into the constructor\n   */\n\n  _proto._prepare = function _prepare() {\n    var _this = this; // stop sync when collection gets destroyed\n\n\n    this.collection.onDestroy.then(function () {\n      _this.cancel();\n    }); // create getters for the observables\n\n    Object.keys(this._subjects).forEach(function (key) {\n      Object.defineProperty(_this, key + '$', {\n        get: function get() {\n          return this._subjects[key].asObservable();\n        }\n      });\n    });\n  };\n\n  _proto.isStopped = function isStopped() {\n    if (!this.live && this._subjects.initialReplicationComplete['_value']) return true;\n    if (this._subjects.canceled['_value']) return true;else return false;\n  };\n\n  _proto.awaitInitialReplication = function awaitInitialReplication() {\n    return this.initialReplicationComplete$.pipe(filter(function (v) {\n      return v === true;\n    }), first()).toPromise();\n  } // ensures this._run() does not run in parallel\n  ;\n\n  _proto.run =\n  /*#__PURE__*/\n  function () {\n    var _run2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this2 = this;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.isStopped()) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              if (!(this._runQueueCount > 2)) {\n                _context2.next = 4;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", this._runningPromise);\n\n            case 4:\n              this._runQueueCount++;\n              this._runningPromise = this._runningPromise.then(\n              /*#__PURE__*/\n              _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee() {\n                var willRetry;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _this2._subjects.active.next(true);\n\n                        _context.next = 3;\n                        return _this2._run();\n\n                      case 3:\n                        willRetry = _context.sent;\n\n                        _this2._subjects.active.next(false);\n\n                        if (!willRetry && _this2._subjects.initialReplicationComplete['_value'] === false) _this2._subjects.initialReplicationComplete.next(true);\n                        _this2._runQueueCount--;\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              })));\n              return _context2.abrupt(\"return\", this._runningPromise);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function run() {\n      return _run2.apply(this, arguments);\n    }\n\n    return run;\n  }();\n\n  _proto._run =\n  /*#__PURE__*/\n  function () {\n    var _run3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var _this3 = this;\n\n      var willRetry, ok, _ok;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              this._runCount = this._runCount + 1;\n              willRetry = false;\n\n              if (!this.push) {\n                _context3.next = 7;\n                break;\n              }\n\n              _context3.next = 5;\n              return this.runPush();\n\n            case 5:\n              ok = _context3.sent;\n\n              if (!ok) {\n                willRetry = true;\n                setTimeout(function () {\n                  return _this3.run();\n                }, this.retryTime);\n              }\n\n            case 7:\n              if (!this.pull) {\n                _context3.next = 12;\n                break;\n              }\n\n              _context3.next = 10;\n              return this.runPull();\n\n            case 10:\n              _ok = _context3.sent;\n\n              if (!_ok) {\n                willRetry = true;\n                setTimeout(function () {\n                  return _this3.run();\n                }, this.retryTime);\n              }\n\n            case 12:\n              return _context3.abrupt(\"return\", willRetry);\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function _run() {\n      return _run3.apply(this, arguments);\n    }\n\n    return _run;\n  }()\n  /**\n   * @return true if no errors occured\n   */\n  ;\n\n  _proto.runPull =\n  /*#__PURE__*/\n  function () {\n    var _runPull = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var _this4 = this;\n\n      var latestDocument, latestDocumentData, pullGraphQL, result, data, modified, docIds, docsWithRevisions, newLatestDocument;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this.isStopped()) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", Promise.resolve(false));\n\n            case 2:\n              _context4.next = 4;\n              return getLastPullDocument(this.collection, this.endpointHash);\n\n            case 4:\n              latestDocument = _context4.sent;\n              latestDocumentData = latestDocument ? latestDocument : null;\n              pullGraphQL = this.pull.queryBuilder(latestDocumentData);\n              _context4.prev = 7;\n              _context4.next = 10;\n              return this.client.query(pullGraphQL.query, pullGraphQL.variables);\n\n            case 10:\n              result = _context4.sent;\n\n              if (!result.errors) {\n                _context4.next = 13;\n                break;\n              }\n\n              throw new Error(result.errors);\n\n            case 13:\n              _context4.next = 20;\n              break;\n\n            case 15:\n              _context4.prev = 15;\n              _context4.t0 = _context4[\"catch\"](7);\n\n              this._subjects.error.next(_context4.t0);\n\n              setTimeout(function () {\n                return _this4.run();\n              }, this.retryTime);\n              return _context4.abrupt(\"return\", false);\n\n            case 20:\n              // this assumes that there will be always only one property in the response\n              // is this correct?\n              data = result.data[Object.keys(result.data)[0]];\n              modified = data.map(function (doc) {\n                return _this4.pull.modifier(doc);\n              });\n              docIds = modified.map(function (doc) {\n                return doc[_this4.collection.schema.primaryPath];\n              });\n              _context4.next = 25;\n              return getDocsWithRevisionsFromPouch(this.collection, docIds);\n\n            case 25:\n              docsWithRevisions = _context4.sent;\n              _context4.next = 28;\n              return Promise.all(modified.map(function (doc) {\n                return _this4.handleDocumentFromRemote(doc, docsWithRevisions);\n              }));\n\n            case 28:\n              modified.map(function (doc) {\n                return _this4._subjects.recieved.next(doc);\n              });\n\n              if (!(modified.length === 0)) {\n                _context4.next = 33;\n                break;\n              }\n\n              if (this.live) {// console.log('no more docs, wait for ping');\n              } else {// console.log('RxGraphQLReplicationState._run(): no more docs and not live; complete = true');\n                }\n\n              _context4.next = 38;\n              break;\n\n            case 33:\n              newLatestDocument = modified[modified.length - 1];\n              _context4.next = 36;\n              return setLastPullDocument(this.collection, this.endpointHash, newLatestDocument);\n\n            case 36:\n              _context4.next = 38;\n              return this.runPull();\n\n            case 38:\n              return _context4.abrupt(\"return\", true);\n\n            case 39:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this, [[7, 15]]);\n    }));\n\n    function runPull() {\n      return _runPull.apply(this, arguments);\n    }\n\n    return runPull;\n  }();\n\n  _proto.runPush =\n  /*#__PURE__*/\n  function () {\n    var _runPush = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var _this5 = this;\n\n      var changes, changesWithDocs, lastSuccessfullChange, i, changeWithDoc, pushObj, result;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return getChangesSinceLastPushSequence(this.collection, this.endpointHash, this.lastPulledRevField, this.push.batchSize, this.syncRevisions);\n\n            case 2:\n              changes = _context5.sent;\n              changesWithDocs = changes.results.map(function (change) {\n                var doc = change['doc'];\n                doc[_this5.deletedFlag] = !!change['deleted'];\n                delete doc._deleted;\n                delete doc._attachments;\n                delete doc[_this5.lastPulledRevField];\n\n                if (!_this5.syncRevisions) {\n                  delete doc._rev;\n                }\n\n                doc = _this5.push.modifier(doc);\n                var seq = change.seq;\n                return {\n                  doc: doc,\n                  seq: seq\n                };\n              });\n              lastSuccessfullChange = null;\n              _context5.prev = 5;\n              i = 0;\n\n            case 7:\n              if (!(i < changesWithDocs.length)) {\n                _context5.next = 22;\n                break;\n              }\n\n              changeWithDoc = changesWithDocs[i];\n              pushObj = this.push.queryBuilder(changeWithDoc.doc);\n              _context5.next = 12;\n              return this.client.query(pushObj.query, pushObj.variables);\n\n            case 12:\n              result = _context5.sent;\n\n              if (!result.errors) {\n                _context5.next = 17;\n                break;\n              }\n\n              throw new Error(JSON.stringify(result.errors));\n\n            case 17:\n              this._subjects.send.next(changeWithDoc.doc);\n\n              lastSuccessfullChange = changeWithDoc;\n\n            case 19:\n              i++;\n              _context5.next = 7;\n              break;\n\n            case 22:\n              _context5.next = 32;\n              break;\n\n            case 24:\n              _context5.prev = 24;\n              _context5.t0 = _context5[\"catch\"](5);\n\n              if (!lastSuccessfullChange) {\n                _context5.next = 29;\n                break;\n              }\n\n              _context5.next = 29;\n              return setLastPushSequence(this.collection, this.endpointHash, lastSuccessfullChange.seq);\n\n            case 29:\n              this._subjects.error.next(_context5.t0);\n\n              setTimeout(function () {\n                return _this5.run();\n              }, this.retryTime);\n              return _context5.abrupt(\"return\", false);\n\n            case 32:\n              _context5.next = 34;\n              return setLastPushSequence(this.collection, this.endpointHash, changes.last_seq);\n\n            case 34:\n              if (!(changes.results.length === 0)) {\n                _context5.next = 38;\n                break;\n              }\n\n              if (this.live) {// console.log('no more docs to push, wait for ping');\n              } else {// console.log('RxGraphQLReplicationState._runPull(): no more docs to push and not live; complete = true');\n                }\n\n              _context5.next = 40;\n              break;\n\n            case 38:\n              _context5.next = 40;\n              return this.runPush();\n\n            case 40:\n              return _context5.abrupt(\"return\", true);\n\n            case 41:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this, [[5, 24]]);\n    }));\n\n    function runPush() {\n      return _runPush.apply(this, arguments);\n    }\n\n    return runPush;\n  }();\n\n  _proto.handleDocumentFromRemote =\n  /*#__PURE__*/\n  function () {\n    var _handleDocumentFromRemote = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(doc, docsWithRevisions) {\n      var deletedValue, toPouch, primaryValue, pouchState, newRevision, newRevisionHeight, revisionId, originalDoc, cE;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              deletedValue = doc[this.deletedFlag];\n              toPouch = this.collection._handleToPouch(doc); // console.log('handleDocumentFromRemote(' + toPouch._id + ') start');\n\n              toPouch._deleted = deletedValue;\n              delete toPouch[this.deletedFlag];\n\n              if (!this.syncRevisions) {\n                primaryValue = toPouch._id;\n                pouchState = docsWithRevisions[primaryValue];\n                newRevision = createRevisionForPulledDocument(this.endpointHash, toPouch);\n\n                if (pouchState) {\n                  newRevisionHeight = pouchState.revisions.start + 1;\n                  revisionId = newRevision;\n                  newRevision = newRevisionHeight + '-' + newRevision;\n                  toPouch._revisions = {\n                    start: newRevisionHeight,\n                    ids: pouchState.revisions.ids\n                  };\n\n                  toPouch._revisions.ids.unshift(revisionId);\n                } else {\n                  newRevision = '1-' + newRevision;\n                }\n\n                toPouch._rev = newRevision;\n              } else {\n                toPouch[this.lastPulledRevField] = toPouch._rev;\n              }\n\n              _context6.next = 7;\n              return this.collection.pouch.bulkDocs([toPouch], {\n                new_edits: false\n              });\n\n            case 7:\n              /**\n               * because bulkDocs with new_edits: false\n               * does not stream changes to the pouchdb,\n               * we create the event and emit it,\n               * so other instances get informed about it\n               */\n              originalDoc = flatClone(toPouch);\n\n              if (deletedValue) {\n                originalDoc._deleted = deletedValue;\n              } else {\n                delete originalDoc._deleted;\n              }\n\n              delete originalDoc[this.deletedFlag];\n              delete originalDoc._revisions;\n              cE = changeEventfromPouchChange(originalDoc, this.collection);\n              this.collection.$emit(cE);\n\n            case 13:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function handleDocumentFromRemote(_x, _x2) {\n      return _handleDocumentFromRemote.apply(this, arguments);\n    }\n\n    return handleDocumentFromRemote;\n  }();\n\n  _proto.cancel = function cancel() {\n    if (this.isStopped()) return Promise.resolve(false);\n\n    this._subs.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n\n    this._subjects.canceled.next(true); // TODO\n\n\n    return Promise.resolve(true);\n  };\n\n  return RxGraphQLReplicationState;\n}();\nexport function syncGraphQL(_ref2) {\n  var url = _ref2.url,\n      _ref2$headers = _ref2.headers,\n      headers = _ref2$headers === void 0 ? {} : _ref2$headers,\n      _ref2$waitForLeadersh = _ref2.waitForLeadership,\n      waitForLeadership = _ref2$waitForLeadersh === void 0 ? true : _ref2$waitForLeadersh,\n      pull = _ref2.pull,\n      push = _ref2.push,\n      deletedFlag = _ref2.deletedFlag,\n      _ref2$lastPulledRevFi = _ref2.lastPulledRevField,\n      lastPulledRevField = _ref2$lastPulledRevFi === void 0 ? 'last_pulled_rev' : _ref2$lastPulledRevFi,\n      _ref2$live = _ref2.live,\n      live = _ref2$live === void 0 ? false : _ref2$live,\n      _ref2$liveInterval = _ref2.liveInterval,\n      liveInterval = _ref2$liveInterval === void 0 ? 1000 * 10 : _ref2$liveInterval,\n      _ref2$retryTime = _ref2.retryTime,\n      retryTime = _ref2$retryTime === void 0 ? 1000 * 5 : _ref2$retryTime,\n      _ref2$autoStart = _ref2.autoStart,\n      autoStart = _ref2$autoStart === void 0 ? true : _ref2$autoStart,\n      _ref2$syncRevisions = _ref2.syncRevisions,\n      syncRevisions = _ref2$syncRevisions === void 0 ? false : _ref2$syncRevisions;\n  var collection = this; // fill in defaults for pull & push\n\n  if (pull) {\n    if (!pull.modifier) pull.modifier = DEFAULT_MODIFIER;\n  }\n\n  if (push) {\n    if (!push.modifier) push.modifier = DEFAULT_MODIFIER;\n  } // ensure the collection is listening to plain-pouchdb writes\n\n\n  collection.watchForChanges();\n  var replicationState = new RxGraphQLReplicationState(collection, url, headers, pull, push, deletedFlag, lastPulledRevField, live, liveInterval, retryTime, syncRevisions);\n  if (!autoStart) return replicationState; // run internal so .sync() does not have to be async\n\n  var waitTillRun = waitForLeadership ? this.database.waitForLeadership() : promiseWait(0);\n  waitTillRun.then(function () {\n    // trigger run once\n    replicationState.run(); // start sync-interval\n\n    if (replicationState.live) {\n      if (pull) {\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee7() {\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  if (replicationState.isStopped()) {\n                    _context7.next = 9;\n                    break;\n                  }\n\n                  _context7.next = 3;\n                  return promiseWait(replicationState.liveInterval);\n\n                case 3:\n                  if (!replicationState.isStopped()) {\n                    _context7.next = 5;\n                    break;\n                  }\n\n                  return _context7.abrupt(\"return\");\n\n                case 5:\n                  _context7.next = 7;\n                  return replicationState.run();\n\n                case 7:\n                  _context7.next = 0;\n                  break;\n\n                case 9:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }))();\n      }\n\n      if (push) {\n        /**\n         * we have to use the rxdb changestream\n         * because the pouchdb.changes stream sometimes\n         * does not emit events or stucks\n         */\n        var changeEventsSub = collection.$.subscribe(function (changeEvent) {\n          if (replicationState.isStopped()) return;\n          var rev = changeEvent.data.v._rev;\n\n          if (rev && !wasRevisionfromPullReplication(replicationState.endpointHash, rev)) {\n            replicationState.run();\n          }\n        });\n\n        replicationState._subs.push(changeEventsSub);\n      }\n    }\n  });\n  return replicationState;\n}\nexport var rxdb = true;\nexport var prototypes = {\n  RxCollection: function RxCollection(proto) {\n    proto.syncGraphQL = syncGraphQL;\n  }\n};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/replication-graphql/index.js"],"names":["_regeneratorRuntime","_asyncToGenerator","BehaviorSubject","Subject","first","filter","GraphQLClient","promiseWait","flatClone","Core","hash","DEFAULT_MODIFIER","wasRevisionfromPullReplication","createRevisionForPulledDocument","getDocsWithRevisionsFromPouch","setLastPushSequence","getLastPullDocument","setLastPullDocument","getChangesSinceLastPushSequence","RxDBWatchForChangesPlugin","RxDBLeaderElectionPlugin","changeEventfromPouchChange","plugin","RxGraphQLReplicationState","collection","url","headers","pull","push","deletedFlag","lastPulledRevField","live","liveInterval","retryTime","syncRevisions","_subjects","recieved","send","error","canceled","active","initialReplicationComplete","_runningPromise","Promise","resolve","_subs","_runCount","_runQueueCount","initialReplicationComplete$","undefined","recieved$","send$","error$","canceled$","active$","client","endpointHash","_prepare","_proto","prototype","_this","onDestroy","then","cancel","Object","keys","forEach","key","defineProperty","get","asObservable","isStopped","awaitInitialReplication","pipe","v","toPromise","run","_run2","mark","_callee2","_this2","wrap","_callee2$","_context2","prev","next","abrupt","_callee","willRetry","_callee$","_context","_run","sent","stop","apply","arguments","_run3","_callee3","_this3","ok","_ok","_callee3$","_context3","runPush","setTimeout","runPull","_runPull","_callee4","_this4","latestDocument","latestDocumentData","pullGraphQL","result","data","modified","docIds","docsWithRevisions","newLatestDocument","_callee4$","_context4","queryBuilder","query","variables","errors","Error","t0","map","doc","modifier","schema","primaryPath","all","handleDocumentFromRemote","length","_runPush","_callee5","_this5","changes","changesWithDocs","lastSuccessfullChange","i","changeWithDoc","pushObj","_callee5$","_context5","batchSize","results","change","_deleted","_attachments","_rev","seq","JSON","stringify","last_seq","_handleDocumentFromRemote","_callee6","deletedValue","toPouch","primaryValue","pouchState","newRevision","newRevisionHeight","revisionId","originalDoc","cE","_callee6$","_context6","_handleToPouch","_id","revisions","start","_revisions","ids","unshift","pouch","bulkDocs","new_edits","$emit","_x","_x2","sub","unsubscribe","syncGraphQL","_ref2","_ref2$headers","_ref2$waitForLeadersh","waitForLeadership","_ref2$lastPulledRevFi","_ref2$live","_ref2$liveInterval","_ref2$retryTime","_ref2$autoStart","autoStart","_ref2$syncRevisions","watchForChanges","replicationState","waitTillRun","database","_callee7","_callee7$","_context7","changeEventsSub","$","subscribe","changeEvent","rev","rxdb","prototypes","RxCollection","proto"],"mappings":"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","sourcesContent":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n\n/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with remote graphql endpoint\n */\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { first, filter } from 'rxjs/operators';\nimport GraphQLClient from 'graphql-client';\nimport { promiseWait, flatClone } from '../../util';\nimport Core from '../../core';\nimport { hash } from '../../util';\nimport { DEFAULT_MODIFIER, wasRevisionfromPullReplication, createRevisionForPulledDocument, getDocsWithRevisionsFromPouch } from './helper';\nimport { setLastPushSequence, getLastPullDocument, setLastPullDocument, getChangesSinceLastPushSequence } from './crawling-checkpoint';\nimport RxDBWatchForChangesPlugin from '../watch-for-changes';\nimport RxDBLeaderElectionPlugin from '../leader-election';\nimport { changeEventfromPouchChange } from '../../rx-change-event';\nCore.plugin(RxDBLeaderElectionPlugin);\n/**\n * add the watch-for-changes-plugin\n * so pouchdb will emit events when something gets written to it\n */\n\nCore.plugin(RxDBWatchForChangesPlugin);\nexport var RxGraphQLReplicationState = /*#__PURE__*/function () {\n  function RxGraphQLReplicationState(collection, url, headers, pull, push, deletedFlag, lastPulledRevField, live, liveInterval, retryTime, syncRevisions) {\n    this._subjects = {\n      recieved: new Subject(),\n      // all documents that are recieved from the endpoint\n      send: new Subject(),\n      // all documents that are send to the endpoint\n      error: new Subject(),\n      // all errors that are revieced from the endpoint, emits new Error() objects\n      canceled: new BehaviorSubject(false),\n      // true when the replication was canceled\n      active: new BehaviorSubject(false),\n      // true when something is running, false when not\n      initialReplicationComplete: new BehaviorSubject(false) // true the initial replication-cycle is over\n\n    };\n    this._runningPromise = Promise.resolve();\n    this._subs = [];\n    this._runCount = 0;\n    this._runQueueCount = 0;\n    this.initialReplicationComplete$ = undefined;\n    this.recieved$ = undefined;\n    this.send$ = undefined;\n    this.error$ = undefined;\n    this.canceled$ = undefined;\n    this.active$ = undefined;\n    this.collection = collection;\n    this.pull = pull;\n    this.push = push;\n    this.deletedFlag = deletedFlag;\n    this.lastPulledRevField = lastPulledRevField;\n    this.live = live;\n    this.liveInterval = liveInterval;\n    this.retryTime = retryTime;\n    this.syncRevisions = syncRevisions;\n    this.client = GraphQLClient({\n      url: url,\n      headers: headers\n    });\n    this.endpointHash = hash(url);\n\n    this._prepare();\n  }\n\n  var _proto = RxGraphQLReplicationState.prototype;\n\n  /**\n   * things that are more complex to not belong into the constructor\n   */\n  _proto._prepare = function _prepare() {\n    var _this = this;\n\n    // stop sync when collection gets destroyed\n    this.collection.onDestroy.then(function () {\n      _this.cancel();\n    }); // create getters for the observables\n\n    Object.keys(this._subjects).forEach(function (key) {\n      Object.defineProperty(_this, key + '$', {\n        get: function get() {\n          return this._subjects[key].asObservable();\n        }\n      });\n    });\n  };\n\n  _proto.isStopped = function isStopped() {\n    if (!this.live && this._subjects.initialReplicationComplete['_value']) return true;\n    if (this._subjects.canceled['_value']) return true;else return false;\n  };\n\n  _proto.awaitInitialReplication = function awaitInitialReplication() {\n    return this.initialReplicationComplete$.pipe(filter(function (v) {\n      return v === true;\n    }), first()).toPromise();\n  } // ensures this._run() does not run in parallel\n  ;\n\n  _proto.run =\n  /*#__PURE__*/\n  function () {\n    var _run2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _this2 = this;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.isStopped()) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              if (!(this._runQueueCount > 2)) {\n                _context2.next = 4;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", this._runningPromise);\n\n            case 4:\n              this._runQueueCount++;\n              this._runningPromise = this._runningPromise.then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                var willRetry;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _this2._subjects.active.next(true);\n\n                        _context.next = 3;\n                        return _this2._run();\n\n                      case 3:\n                        willRetry = _context.sent;\n\n                        _this2._subjects.active.next(false);\n\n                        if (!willRetry && _this2._subjects.initialReplicationComplete['_value'] === false) _this2._subjects.initialReplicationComplete.next(true);\n                        _this2._runQueueCount--;\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              })));\n              return _context2.abrupt(\"return\", this._runningPromise);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function run() {\n      return _run2.apply(this, arguments);\n    }\n\n    return run;\n  }();\n\n  _proto._run = /*#__PURE__*/function () {\n    var _run3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _this3 = this;\n\n      var willRetry, ok, _ok;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              this._runCount = this._runCount + 1;\n              willRetry = false;\n\n              if (!this.push) {\n                _context3.next = 7;\n                break;\n              }\n\n              _context3.next = 5;\n              return this.runPush();\n\n            case 5:\n              ok = _context3.sent;\n\n              if (!ok) {\n                willRetry = true;\n                setTimeout(function () {\n                  return _this3.run();\n                }, this.retryTime);\n              }\n\n            case 7:\n              if (!this.pull) {\n                _context3.next = 12;\n                break;\n              }\n\n              _context3.next = 10;\n              return this.runPull();\n\n            case 10:\n              _ok = _context3.sent;\n\n              if (!_ok) {\n                willRetry = true;\n                setTimeout(function () {\n                  return _this3.run();\n                }, this.retryTime);\n              }\n\n            case 12:\n              return _context3.abrupt(\"return\", willRetry);\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function _run() {\n      return _run3.apply(this, arguments);\n    }\n\n    return _run;\n  }()\n  /**\n   * @return true if no errors occured\n   */\n  ;\n\n  _proto.runPull =\n  /*#__PURE__*/\n  function () {\n    var _runPull = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var _this4 = this;\n\n      var latestDocument, latestDocumentData, pullGraphQL, result, data, modified, docIds, docsWithRevisions, newLatestDocument;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this.isStopped()) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", Promise.resolve(false));\n\n            case 2:\n              _context4.next = 4;\n              return getLastPullDocument(this.collection, this.endpointHash);\n\n            case 4:\n              latestDocument = _context4.sent;\n              latestDocumentData = latestDocument ? latestDocument : null;\n              pullGraphQL = this.pull.queryBuilder(latestDocumentData);\n              _context4.prev = 7;\n              _context4.next = 10;\n              return this.client.query(pullGraphQL.query, pullGraphQL.variables);\n\n            case 10:\n              result = _context4.sent;\n\n              if (!result.errors) {\n                _context4.next = 13;\n                break;\n              }\n\n              throw new Error(result.errors);\n\n            case 13:\n              _context4.next = 20;\n              break;\n\n            case 15:\n              _context4.prev = 15;\n              _context4.t0 = _context4[\"catch\"](7);\n\n              this._subjects.error.next(_context4.t0);\n\n              setTimeout(function () {\n                return _this4.run();\n              }, this.retryTime);\n              return _context4.abrupt(\"return\", false);\n\n            case 20:\n              // this assumes that there will be always only one property in the response\n              // is this correct?\n              data = result.data[Object.keys(result.data)[0]];\n              modified = data.map(function (doc) {\n                return _this4.pull.modifier(doc);\n              });\n              docIds = modified.map(function (doc) {\n                return doc[_this4.collection.schema.primaryPath];\n              });\n              _context4.next = 25;\n              return getDocsWithRevisionsFromPouch(this.collection, docIds);\n\n            case 25:\n              docsWithRevisions = _context4.sent;\n              _context4.next = 28;\n              return Promise.all(modified.map(function (doc) {\n                return _this4.handleDocumentFromRemote(doc, docsWithRevisions);\n              }));\n\n            case 28:\n              modified.map(function (doc) {\n                return _this4._subjects.recieved.next(doc);\n              });\n\n              if (!(modified.length === 0)) {\n                _context4.next = 33;\n                break;\n              }\n\n              if (this.live) {// console.log('no more docs, wait for ping');\n              } else {// console.log('RxGraphQLReplicationState._run(): no more docs and not live; complete = true');\n                }\n\n              _context4.next = 38;\n              break;\n\n            case 33:\n              newLatestDocument = modified[modified.length - 1];\n              _context4.next = 36;\n              return setLastPullDocument(this.collection, this.endpointHash, newLatestDocument);\n\n            case 36:\n              _context4.next = 38;\n              return this.runPull();\n\n            case 38:\n              return _context4.abrupt(\"return\", true);\n\n            case 39:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this, [[7, 15]]);\n    }));\n\n    function runPull() {\n      return _runPull.apply(this, arguments);\n    }\n\n    return runPull;\n  }();\n\n  _proto.runPush = /*#__PURE__*/function () {\n    var _runPush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var _this5 = this;\n\n      var changes, changesWithDocs, lastSuccessfullChange, i, changeWithDoc, pushObj, result;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return getChangesSinceLastPushSequence(this.collection, this.endpointHash, this.lastPulledRevField, this.push.batchSize, this.syncRevisions);\n\n            case 2:\n              changes = _context5.sent;\n              changesWithDocs = changes.results.map(function (change) {\n                var doc = change['doc'];\n                doc[_this5.deletedFlag] = !!change['deleted'];\n                delete doc._deleted;\n                delete doc._attachments;\n                delete doc[_this5.lastPulledRevField];\n\n                if (!_this5.syncRevisions) {\n                  delete doc._rev;\n                }\n\n                doc = _this5.push.modifier(doc);\n                var seq = change.seq;\n                return {\n                  doc: doc,\n                  seq: seq\n                };\n              });\n              lastSuccessfullChange = null;\n              _context5.prev = 5;\n              i = 0;\n\n            case 7:\n              if (!(i < changesWithDocs.length)) {\n                _context5.next = 22;\n                break;\n              }\n\n              changeWithDoc = changesWithDocs[i];\n              pushObj = this.push.queryBuilder(changeWithDoc.doc);\n              _context5.next = 12;\n              return this.client.query(pushObj.query, pushObj.variables);\n\n            case 12:\n              result = _context5.sent;\n\n              if (!result.errors) {\n                _context5.next = 17;\n                break;\n              }\n\n              throw new Error(JSON.stringify(result.errors));\n\n            case 17:\n              this._subjects.send.next(changeWithDoc.doc);\n\n              lastSuccessfullChange = changeWithDoc;\n\n            case 19:\n              i++;\n              _context5.next = 7;\n              break;\n\n            case 22:\n              _context5.next = 32;\n              break;\n\n            case 24:\n              _context5.prev = 24;\n              _context5.t0 = _context5[\"catch\"](5);\n\n              if (!lastSuccessfullChange) {\n                _context5.next = 29;\n                break;\n              }\n\n              _context5.next = 29;\n              return setLastPushSequence(this.collection, this.endpointHash, lastSuccessfullChange.seq);\n\n            case 29:\n              this._subjects.error.next(_context5.t0);\n\n              setTimeout(function () {\n                return _this5.run();\n              }, this.retryTime);\n              return _context5.abrupt(\"return\", false);\n\n            case 32:\n              _context5.next = 34;\n              return setLastPushSequence(this.collection, this.endpointHash, changes.last_seq);\n\n            case 34:\n              if (!(changes.results.length === 0)) {\n                _context5.next = 38;\n                break;\n              }\n\n              if (this.live) {// console.log('no more docs to push, wait for ping');\n              } else {// console.log('RxGraphQLReplicationState._runPull(): no more docs to push and not live; complete = true');\n                }\n\n              _context5.next = 40;\n              break;\n\n            case 38:\n              _context5.next = 40;\n              return this.runPush();\n\n            case 40:\n              return _context5.abrupt(\"return\", true);\n\n            case 41:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this, [[5, 24]]);\n    }));\n\n    function runPush() {\n      return _runPush.apply(this, arguments);\n    }\n\n    return runPush;\n  }();\n\n  _proto.handleDocumentFromRemote = /*#__PURE__*/function () {\n    var _handleDocumentFromRemote = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(doc, docsWithRevisions) {\n      var deletedValue, toPouch, primaryValue, pouchState, newRevision, newRevisionHeight, revisionId, originalDoc, cE;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              deletedValue = doc[this.deletedFlag];\n              toPouch = this.collection._handleToPouch(doc); // console.log('handleDocumentFromRemote(' + toPouch._id + ') start');\n\n              toPouch._deleted = deletedValue;\n              delete toPouch[this.deletedFlag];\n\n              if (!this.syncRevisions) {\n                primaryValue = toPouch._id;\n                pouchState = docsWithRevisions[primaryValue];\n                newRevision = createRevisionForPulledDocument(this.endpointHash, toPouch);\n\n                if (pouchState) {\n                  newRevisionHeight = pouchState.revisions.start + 1;\n                  revisionId = newRevision;\n                  newRevision = newRevisionHeight + '-' + newRevision;\n                  toPouch._revisions = {\n                    start: newRevisionHeight,\n                    ids: pouchState.revisions.ids\n                  };\n\n                  toPouch._revisions.ids.unshift(revisionId);\n                } else {\n                  newRevision = '1-' + newRevision;\n                }\n\n                toPouch._rev = newRevision;\n              } else {\n                toPouch[this.lastPulledRevField] = toPouch._rev;\n              }\n\n              _context6.next = 7;\n              return this.collection.pouch.bulkDocs([toPouch], {\n                new_edits: false\n              });\n\n            case 7:\n              /**\n               * because bulkDocs with new_edits: false\n               * does not stream changes to the pouchdb,\n               * we create the event and emit it,\n               * so other instances get informed about it\n               */\n              originalDoc = flatClone(toPouch);\n\n              if (deletedValue) {\n                originalDoc._deleted = deletedValue;\n              } else {\n                delete originalDoc._deleted;\n              }\n\n              delete originalDoc[this.deletedFlag];\n              delete originalDoc._revisions;\n              cE = changeEventfromPouchChange(originalDoc, this.collection);\n              this.collection.$emit(cE);\n\n            case 13:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function handleDocumentFromRemote(_x, _x2) {\n      return _handleDocumentFromRemote.apply(this, arguments);\n    }\n\n    return handleDocumentFromRemote;\n  }();\n\n  _proto.cancel = function cancel() {\n    if (this.isStopped()) return Promise.resolve(false);\n\n    this._subs.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n\n    this._subjects.canceled.next(true); // TODO\n\n\n    return Promise.resolve(true);\n  };\n\n  return RxGraphQLReplicationState;\n}();\nexport function syncGraphQL(_ref2) {\n  var url = _ref2.url,\n      _ref2$headers = _ref2.headers,\n      headers = _ref2$headers === void 0 ? {} : _ref2$headers,\n      _ref2$waitForLeadersh = _ref2.waitForLeadership,\n      waitForLeadership = _ref2$waitForLeadersh === void 0 ? true : _ref2$waitForLeadersh,\n      pull = _ref2.pull,\n      push = _ref2.push,\n      deletedFlag = _ref2.deletedFlag,\n      _ref2$lastPulledRevFi = _ref2.lastPulledRevField,\n      lastPulledRevField = _ref2$lastPulledRevFi === void 0 ? 'last_pulled_rev' : _ref2$lastPulledRevFi,\n      _ref2$live = _ref2.live,\n      live = _ref2$live === void 0 ? false : _ref2$live,\n      _ref2$liveInterval = _ref2.liveInterval,\n      liveInterval = _ref2$liveInterval === void 0 ? 1000 * 10 : _ref2$liveInterval,\n      _ref2$retryTime = _ref2.retryTime,\n      retryTime = _ref2$retryTime === void 0 ? 1000 * 5 : _ref2$retryTime,\n      _ref2$autoStart = _ref2.autoStart,\n      autoStart = _ref2$autoStart === void 0 ? true : _ref2$autoStart,\n      _ref2$syncRevisions = _ref2.syncRevisions,\n      syncRevisions = _ref2$syncRevisions === void 0 ? false : _ref2$syncRevisions;\n  var collection = this; // fill in defaults for pull & push\n\n  if (pull) {\n    if (!pull.modifier) pull.modifier = DEFAULT_MODIFIER;\n  }\n\n  if (push) {\n    if (!push.modifier) push.modifier = DEFAULT_MODIFIER;\n  } // ensure the collection is listening to plain-pouchdb writes\n\n\n  collection.watchForChanges();\n  var replicationState = new RxGraphQLReplicationState(collection, url, headers, pull, push, deletedFlag, lastPulledRevField, live, liveInterval, retryTime, syncRevisions);\n  if (!autoStart) return replicationState; // run internal so .sync() does not have to be async\n\n  var waitTillRun = waitForLeadership ? this.database.waitForLeadership() : promiseWait(0);\n  waitTillRun.then(function () {\n    // trigger run once\n    replicationState.run(); // start sync-interval\n\n    if (replicationState.live) {\n      if (pull) {\n        _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  if (replicationState.isStopped()) {\n                    _context7.next = 9;\n                    break;\n                  }\n\n                  _context7.next = 3;\n                  return promiseWait(replicationState.liveInterval);\n\n                case 3:\n                  if (!replicationState.isStopped()) {\n                    _context7.next = 5;\n                    break;\n                  }\n\n                  return _context7.abrupt(\"return\");\n\n                case 5:\n                  _context7.next = 7;\n                  return replicationState.run();\n\n                case 7:\n                  _context7.next = 0;\n                  break;\n\n                case 9:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }))();\n      }\n\n      if (push) {\n        /**\n         * we have to use the rxdb changestream\n         * because the pouchdb.changes stream sometimes\n         * does not emit events or stucks\n         */\n        var changeEventsSub = collection.$.subscribe(function (changeEvent) {\n          if (replicationState.isStopped()) return;\n          var rev = changeEvent.data.v._rev;\n\n          if (rev && !wasRevisionfromPullReplication(replicationState.endpointHash, rev)) {\n            replicationState.run();\n          }\n        });\n\n        replicationState._subs.push(changeEventsSub);\n      }\n    }\n  });\n  return replicationState;\n}\nexport var rxdb = true;\nexport var prototypes = {\n  RxCollection: function RxCollection(proto) {\n    proto.syncGraphQL = syncGraphQL;\n  }\n};\nexport default {\n  rxdb: rxdb,\n  prototypes: prototypes\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}