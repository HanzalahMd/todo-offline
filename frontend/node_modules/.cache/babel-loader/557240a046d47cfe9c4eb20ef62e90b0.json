{"ast":null,"code":"/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\nimport { newRxTypeError, newRxError } from '../rx-error';\nimport { hash, LOCAL_PREFIX } from '../util';\nvar minPassLength = 8;\nexport function encrypt(value, password) {\n  var encrypted = AES.encrypt(value, password);\n  return encrypted.toString();\n}\nexport function decrypt(cipherText, password) {\n  var decrypted = AES.decrypt(cipherText, password);\n  return decrypted.toString(cryptoEnc);\n}\n\nvar _encryptValue = function _encryptValue(value) {\n  return encrypt(JSON.stringify(value), this.password);\n};\n\nvar _decryptValue = function _decryptValue(encryptedValue) {\n  var decrypted = decrypt(encryptedValue, this.password);\n  return JSON.parse(decrypted);\n};\n/**\n * validates and inserts the password hash into the internal collection\n * to ensure there is/was no other instance with a different password\n * which would cause strange side effects when both instances save into the same db\n */\n\n\nexport function storePasswordHashIntoDatabase(rxDatabase) {\n  if (!rxDatabase.password) {\n    return Promise.resolve(false);\n  }\n\n  var pwHash = hash(rxDatabase.password);\n  return rxDatabase.internalStore.get(LOCAL_PREFIX + 'pwHash')[\"catch\"](function () {\n    return null;\n  }).then(function (pwHashDoc) {\n    /**\n     * if pwHash was not saved, we save it,\n     * this operation might throw because another instance runs save at the same time,\n     */\n    if (!pwHashDoc) {\n      return rxDatabase.internalStore.put({\n        _id: LOCAL_PREFIX + 'pwHash',\n        value: pwHash\n      })[\"catch\"](function () {\n        return null;\n      }).then(function () {\n        return true;\n      });\n    } else if (pwHash !== pwHashDoc.value) {\n      // different hash was already set by other instance\n      return rxDatabase.destroy().then(function () {\n        throw newRxError('DB1', {\n          passwordHash: hash(rxDatabase.password),\n          existingPasswordHash: pwHashDoc.value\n        });\n      });\n    }\n\n    return true;\n  });\n}\nexport var rxdb = true;\nexport var prototypes = {\n  /**\n   * set crypto-functions for the Crypter.prototype\n   */\n  Crypter: function Crypter(proto) {\n    proto._encryptValue = _encryptValue;\n    proto._decryptValue = _decryptValue;\n  }\n};\nexport var overwritable = {\n  validatePassword: function validatePassword(password) {\n    if (password && typeof password !== 'string') {\n      throw newRxTypeError('EN1', {\n        password: password\n      });\n    }\n\n    if (password && password.length < minPassLength) {\n      throw newRxError('EN2', {\n        minPassLength: minPassLength,\n        password: password\n      });\n    }\n  }\n};\nexport var RxDBEncryptionPlugin = {\n  name: 'encryption',\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable,\n  hooks: {\n    createRxDatabase: function createRxDatabase(db) {\n      return storePasswordHashIntoDatabase(db);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/plugins/encryption.js"],"names":["AES","cryptoEnc","newRxTypeError","newRxError","hash","LOCAL_PREFIX","minPassLength","encrypt","value","password","encrypted","toString","decrypt","cipherText","decrypted","_encryptValue","JSON","stringify","_decryptValue","encryptedValue","parse","storePasswordHashIntoDatabase","rxDatabase","Promise","resolve","pwHash","internalStore","get","then","pwHashDoc","put","_id","destroy","passwordHash","existingPasswordHash","rxdb","prototypes","Crypter","proto","overwritable","validatePassword","length","RxDBEncryptionPlugin","name","hooks","createRxDatabase","db"],"mappings":"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","sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\nimport { newRxTypeError, newRxError } from '../rx-error';\nimport { hash, LOCAL_PREFIX } from '../util';\nvar minPassLength = 8;\nexport function encrypt(value, password) {\n  var encrypted = AES.encrypt(value, password);\n  return encrypted.toString();\n}\nexport function decrypt(cipherText, password) {\n  var decrypted = AES.decrypt(cipherText, password);\n  return decrypted.toString(cryptoEnc);\n}\n\nvar _encryptValue = function _encryptValue(value) {\n  return encrypt(JSON.stringify(value), this.password);\n};\n\nvar _decryptValue = function _decryptValue(encryptedValue) {\n  var decrypted = decrypt(encryptedValue, this.password);\n  return JSON.parse(decrypted);\n};\n\n/**\n * validates and inserts the password hash into the internal collection\n * to ensure there is/was no other instance with a different password\n * which would cause strange side effects when both instances save into the same db\n */\nexport function storePasswordHashIntoDatabase(rxDatabase) {\n  if (!rxDatabase.password) {\n    return Promise.resolve(false);\n  }\n\n  var pwHash = hash(rxDatabase.password);\n  return rxDatabase.internalStore.get(LOCAL_PREFIX + 'pwHash')[\"catch\"](function () {\n    return null;\n  }).then(function (pwHashDoc) {\n    /**\n     * if pwHash was not saved, we save it,\n     * this operation might throw because another instance runs save at the same time,\n     */\n    if (!pwHashDoc) {\n      return rxDatabase.internalStore.put({\n        _id: LOCAL_PREFIX + 'pwHash',\n        value: pwHash\n      })[\"catch\"](function () {\n        return null;\n      }).then(function () {\n        return true;\n      });\n    } else if (pwHash !== pwHashDoc.value) {\n      // different hash was already set by other instance\n      return rxDatabase.destroy().then(function () {\n        throw newRxError('DB1', {\n          passwordHash: hash(rxDatabase.password),\n          existingPasswordHash: pwHashDoc.value\n        });\n      });\n    }\n\n    return true;\n  });\n}\nexport var rxdb = true;\nexport var prototypes = {\n  /**\n   * set crypto-functions for the Crypter.prototype\n   */\n  Crypter: function Crypter(proto) {\n    proto._encryptValue = _encryptValue;\n    proto._decryptValue = _decryptValue;\n  }\n};\nexport var overwritable = {\n  validatePassword: function validatePassword(password) {\n    if (password && typeof password !== 'string') {\n      throw newRxTypeError('EN1', {\n        password: password\n      });\n    }\n\n    if (password && password.length < minPassLength) {\n      throw newRxError('EN2', {\n        minPassLength: minPassLength,\n        password: password\n      });\n    }\n  }\n};\nexport var RxDBEncryptionPlugin = {\n  name: 'encryption',\n  rxdb: rxdb,\n  prototypes: prototypes,\n  overwritable: overwritable,\n  hooks: {\n    createRxDatabase: function createRxDatabase(db) {\n      return storePasswordHashIntoDatabase(db);\n    }\n  }\n};\n//# sourceMappingURL=encryption.js.map"]},"metadata":{},"sourceType":"module"}