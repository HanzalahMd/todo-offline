{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport deepEqual from 'deep-equal';\nimport { merge, BehaviorSubject } from 'rxjs';\nimport { mergeMap, filter, map, first, tap } from 'rxjs/operators';\nimport { massageSelector, filterInMemoryFields } from 'pouchdb-selector-core';\nimport { createMQuery } from './mquery/mquery';\nimport { sortObject, stringifyFilter, clone, pluginMissing } from './util';\nimport { create as createQueryChangeDetector } from './query-change-detector';\nimport { newRxError, newRxTypeError } from './rx-error';\nimport { runPluginHooks } from './hooks';\nimport { createRxDocuments } from './rx-document-prototype-merge';\nvar _queryCount = 0;\n\nvar newQueryID = function newQueryID() {\n  return ++_queryCount;\n};\n\nexport var RxQueryBase =\n/*#__PURE__*/\nfunction () {\n  function RxQueryBase(op, queryObj, collection) {\n    this.id = newQueryID();\n    this._latestChangeEvent = -1;\n    this._resultsData = null;\n    this._resultsDocs$ = new BehaviorSubject(null);\n    this._execOverDatabaseCount = 0;\n    this._ensureEqualQueue = Promise.resolve(false);\n    this.op = op;\n    this.queryObj = queryObj;\n    this.collection = collection;\n    this._queryChangeDetector = createQueryChangeDetector(this);\n    if (!queryObj) queryObj = _getDefaultQuery(this.collection);\n    this.mquery = createMQuery(queryObj);\n  }\n\n  var _proto = RxQueryBase.prototype;\n\n  _proto.toString = function toString() {\n    if (!this.stringRep) {\n      var stringObj = sortObject({\n        op: this.op,\n        options: this.mquery.options,\n        _conditions: this.mquery._conditions,\n        _path: this.mquery._path,\n        _fields: this.mquery._fields\n      }, true);\n      this.stringRep = JSON.stringify(stringObj, stringifyFilter);\n    }\n\n    return this.stringRep;\n  } // returns a clone of this RxQuery\n  ;\n\n  _proto._clone = function _clone() {\n    var cloned = new RxQueryBase(this.op, _getDefaultQuery(this.collection), this.collection);\n    cloned.mquery = this.mquery.clone();\n    return cloned;\n  }\n  /**\n   * set the new result-data as result-docs of the query\n   * @param newResultData json-docs that were recieved from pouchdb\n   */\n  ;\n\n  _proto._setResultData = function _setResultData(newResultData) {\n    this._resultsData = newResultData;\n    var docs = createRxDocuments(this.collection, this._resultsData);\n\n    this._resultsDocs$.next(docs);\n\n    return docs;\n  }\n  /**\n   * executes the query on the database\n   * @return results-array with document-data\n   */\n  ;\n\n  _proto._execOverDatabase = function _execOverDatabase() {\n    this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n    var docsPromise;\n\n    switch (this.op) {\n      case 'find':\n        docsPromise = this.collection._pouchFind(this);\n        break;\n\n      case 'findOne':\n        docsPromise = this.collection._pouchFind(this, 1);\n        break;\n\n      default:\n        throw newRxError('QU1', {\n          op: this.op\n        });\n    }\n\n    return docsPromise;\n  }\n  /**\n   * Execute the query\n   * To have an easier implementations,\n   * just subscribe and use the first result\n   */\n  ;\n\n  _proto.exec = function exec() {\n    var _this = this;\n    /**\n     * run _ensureEqual() here,\n     * this will make sure that errors in the query which throw inside of pouchdb,\n     * will be thrown at this execution context\n     */\n\n\n    return _ensureEqual(this).then(function () {\n      return _this.$.pipe(first()).toPromise();\n    });\n  };\n\n  _proto.toJSON = function toJSON() {\n    if (this._toJSON) return this._toJSON;\n    var primPath = this.collection.schema.primaryPath;\n    var json = {\n      selector: this.mquery._conditions\n    };\n    var options = clone(this.mquery.options); // sort\n\n    if (options.sort) {\n      var sortArray = [];\n      Object.keys(options.sort).map(function (fieldName) {\n        var dirInt = options.sort[fieldName];\n        var dir = 'asc';\n        if (dirInt === -1) dir = 'desc';\n        var pushMe = {}; // TODO run primary-swap somewhere else\n\n        if (fieldName === primPath) fieldName = '_id';\n        pushMe[fieldName] = dir;\n        sortArray.push(pushMe);\n      });\n      json.sort = sortArray;\n    }\n\n    if (options.limit) {\n      if (typeof options.limit !== 'number') {\n        throw newRxTypeError('QU2', {\n          limit: options.limit\n        });\n      }\n\n      json.limit = options.limit;\n    }\n\n    if (options.skip) {\n      if (typeof options.skip !== 'number') {\n        throw newRxTypeError('QU3', {\n          skip: options.skip\n        });\n      }\n\n      json.skip = options.skip;\n    } // strip empty selectors\n\n\n    Object.entries(json.selector).filter(function (_ref) {\n      var v = _ref[1];\n      return typeof v === 'object';\n    }).filter(function (_ref2) {\n      var v = _ref2[1];\n      return v !== null;\n    }).filter(function (_ref3) {\n      var v = _ref3[1];\n      return !Array.isArray(v);\n    }).filter(function (_ref4) {\n      var v = _ref4[1];\n      return Object.keys(v).length === 0;\n    }).forEach(function (_ref5) {\n      var k = _ref5[0];\n      return delete json.selector[k];\n    }); // primary swap\n\n    if (primPath !== '_id' && json.selector[primPath]) {\n      // selector\n      json.selector._id = json.selector[primPath];\n      delete json.selector[primPath];\n    } // if no selector is used, pouchdb has a bug, so we add a default-selector\n\n\n    if (Object.keys(json.selector).length === 0) {\n      json.selector = {\n        _id: {}\n      };\n    }\n\n    this._toJSON = json;\n    return this._toJSON;\n  };\n\n  _proto.keyCompress = function keyCompress() {\n    if (!this.collection.schema.doKeyCompression()) {\n      return this.toJSON();\n    } else {\n      if (!this._keyCompress) {\n        this._keyCompress = this.collection._keyCompressor.compressQuery(this.toJSON());\n      }\n\n      return this._keyCompress;\n    }\n  }\n  /**\n   * returns true if the document matches the query,\n   * does not use the 'skip' and 'limit'\n   */\n  ;\n\n  _proto.doesDocumentDataMatch = function doesDocumentDataMatch(docData) {\n    // if doc is deleted, it cannot match\n    if (docData._deleted) return false;\n    docData = this.collection.schema.swapPrimaryToId(docData); // return matchesSelector(docData, selector);\n\n    /**\n     * the following is equal to the implementation of pouchdb\n     * we do not use matchesSelector() directly so we can cache the\n     * result of massageSelector\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n\n    var selector = this.massageSelector;\n    var row = {\n      doc: docData\n    };\n    var rowsMatched = filterInMemoryFields([row], {\n      selector: selector\n    }, Object.keys(selector));\n    return rowsMatched && rowsMatched.length === 1;\n  }\n  /**\n   * deletes all found documents\n   * @return promise with deleted documents\n   */\n  ;\n\n  _proto.remove = function remove() {\n    var ret;\n    return this.exec().then(function (docs) {\n      ret = docs;\n      if (Array.isArray(docs)) return Promise.all(docs.map(function (doc) {\n        return doc.remove();\n      }));else return docs.remove();\n    }).then(function () {\n      return ret;\n    });\n  }\n  /**\n   * updates all found documents\n   * @overwritten by plugin (optinal)\n   */\n  ;\n\n  _proto.update = function update(_updateObj) {\n    throw pluginMissing('update');\n  }\n  /**\n   * regex cannot run on primary _id\n   * @link https://docs.cloudant.com/cloudant_query.html#creating-selector-expressions\n   */\n  ;\n\n  _proto.regex = function regex(params) {\n    var clonedThis = this._clone();\n\n    if (this.mquery._path === this.collection.schema.primaryPath) {\n      throw newRxError('QU4', {\n        path: this.mquery._path\n      });\n    }\n\n    clonedThis.mquery.regex(params);\n    return _tunnelQueryCache(clonedThis);\n  }\n  /**\n   * make sure it searches index because of pouchdb-find bug\n   * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n   */\n  ;\n\n  _proto.sort = function sort(params) {\n    var clonedThis = this._clone(); // workarround because sort wont work on unused keys\n\n\n    if (typeof params !== 'object') {\n      var checkParam = params.charAt(0) === '-' ? params.substring(1) : params;\n      if (!clonedThis.mquery._conditions[checkParam]) _sortAddToIndex(checkParam, clonedThis);\n    } else {\n      Object.keys(params).filter(function (k) {\n        return !clonedThis.mquery._conditions[k] || !clonedThis.mquery._conditions[k].$gt;\n      }).forEach(function (k) {\n        return _sortAddToIndex(k, clonedThis);\n      });\n    }\n\n    clonedThis.mquery.sort(params);\n    return _tunnelQueryCache(clonedThis);\n  };\n\n  _proto.limit = function limit(amount) {\n    if (this.op === 'findOne') throw newRxError('QU6');else {\n      var clonedThis = this._clone();\n\n      clonedThis.mquery.limit(amount);\n      return _tunnelQueryCache(clonedThis);\n    }\n  };\n\n  _createClass(RxQueryBase, [{\n    key: \"$\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this._$) {\n        /**\n         * We use _resultsDocs$ to emit new results\n         * This also ensure that there is a reemit on subscribe\n         */\n        var results$ = this._resultsDocs$.pipe(mergeMap(function (docs) {\n          return _ensureEqual(_this2).then(function (hasChanged) {\n            if (hasChanged) return false; // wait for next emit\n            else return docs;\n          });\n        }), filter(function (docs) {\n          return !!docs;\n        }), // not if previous returned false\n        map(function (docs) {\n          // findOne()-queries emit document or null\n          if (_this2.op === 'findOne') {\n            var doc = docs.length === 0 ? null : docs[0];\n            return doc;\n          } else return docs; // find()-queries emit RxDocument[]\n\n        }), map(function (docs) {\n          // copy the array so it wont matter if the user modifies it\n          var ret = Array.isArray(docs) ? docs.slice() : docs;\n          return ret;\n        }))['asObservable']();\n        /**\n         * subscribe to the changeEvent-stream so it detects changed if it has subscribers\n         */\n\n\n        var changeEvents$ = this.collection.docChanges$.pipe(tap(function () {\n          return _ensureEqual(_this2);\n        }), filter(function () {\n          return false;\n        }));\n        this._$ = // tslint:disable-next-line\n        merge(results$, changeEvents$);\n      }\n\n      return this._$;\n    }\n  }, {\n    key: \"massageSelector\",\n    get: function get() {\n      if (!this._massageSelector) {\n        var selector = this.mquery._conditions;\n        this._massageSelector = massageSelector(selector);\n      }\n\n      return this._massageSelector;\n    }\n  }]);\n\n  return RxQueryBase;\n}();\n\nfunction _getDefaultQuery(collection) {\n  var _ref6;\n\n  return _ref6 = {}, _ref6[collection.schema.primaryPath] = {}, _ref6;\n}\n/**\n * run this query through the QueryCache\n */\n\n\nfunction _tunnelQueryCache(rxQuery) {\n  return rxQuery.collection._queryCache.getByQuery(rxQuery);\n}\n/**\n * tunnel the proto-functions of mquery to RxQuery\n */\n\n\nfunction protoMerge(rxQueryProto, mQueryProtoKeys) {\n  mQueryProtoKeys.filter(function (attrName) {\n    return !attrName.startsWith('_');\n  }).filter(function (attrName) {\n    return !rxQueryProto[attrName];\n  }).forEach(function (attrName) {\n    rxQueryProto[attrName] = function (p1) {\n      var clonedThis = this._clone();\n\n      clonedThis.mquery[attrName](p1);\n      return _tunnelQueryCache(clonedThis);\n    };\n  });\n}\n\nvar protoMerged = false;\nexport function createRxQuery(op, queryObj, collection) {\n  // checks\n  if (queryObj && typeof queryObj !== 'object') {\n    throw newRxTypeError('QU7', {\n      queryObj: queryObj\n    });\n  }\n\n  if (Array.isArray(queryObj)) {\n    throw newRxTypeError('QU8', {\n      queryObj: queryObj\n    });\n  }\n\n  var ret = new RxQueryBase(op, queryObj, collection); // ensure when created with same params, only one is created\n\n  ret = _tunnelQueryCache(ret);\n\n  if (!protoMerged) {\n    protoMerged = true;\n    protoMerge(Object.getPrototypeOf(ret), Object.getOwnPropertyNames(Object.getPrototypeOf(ret.mquery)));\n  }\n\n  runPluginHooks('createRxQuery', ret);\n  return ret;\n}\n/**\n * throws an error that says that the key is not in the schema\n */\n\nfunction _throwNotInSchema(key) {\n  throw newRxError('QU5', {\n    key: key\n  });\n}\n/**\n * adds the field of 'sort' to the search-index\n * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n */\n\n\nfunction _sortAddToIndex(checkParam, clonedThis) {\n  var schemaObj = clonedThis.collection.schema.getSchemaByObjectPath(checkParam);\n  if (!schemaObj) _throwNotInSchema(checkParam);\n\n  switch (schemaObj.type) {\n    case 'integer':\n      // TODO change back to -Infinity when issue resolved\n      // @link https://github.com/pouchdb/pouchdb/issues/6454\n      clonedThis.mquery.where(checkParam).gt(-9999999999999999999999999999); // -Infinity does not work since pouchdb 6.2.0\n\n      break;\n\n    case 'string':\n      /**\n       * strings need an empty string, see\n       * @link https://github.com/pubkey/rxdb/issues/585\n       */\n      clonedThis.mquery.where(checkParam).gt('');\n      break;\n\n    default:\n      clonedThis.mquery.where(checkParam).gt(null);\n      break;\n  }\n}\n/**\n * check if the current results-state is in sync with the database\n * @return false if not which means it should re-execute\n */\n\n\nfunction _isResultsInSync(rxQuery) {\n  if (rxQuery._latestChangeEvent >= rxQuery.collection._changeEventBuffer.counter) {\n    return true;\n  } else return false;\n}\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\n\n\nfunction _ensureEqual(rxQuery) {\n  rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue.then(function () {\n    return new Promise(function (res) {\n      return setTimeout(res, 0);\n    });\n  }).then(function () {\n    return __ensureEqual(rxQuery);\n  }).then(function (ret) {\n    return new Promise(function (res) {\n      return setTimeout(res, 0);\n    }).then(function () {\n      return ret;\n    });\n  });\n  return rxQuery._ensureEqualQueue;\n}\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\n\n\nfunction __ensureEqual(rxQuery) {\n  if (rxQuery.collection.database.destroyed) return false; // db is closed\n\n  if (_isResultsInSync(rxQuery)) return false; // nothing happend\n\n  var ret = false;\n  var mustReExec = false; // if this becomes true, a whole execution over the database is made\n\n  if (rxQuery._latestChangeEvent === -1) mustReExec = true; // have not executed yet -> must run\n\n  /**\n   * try to use the queryChangeDetector to calculate the new results\n   */\n\n  if (!mustReExec) {\n    var missedChangeEvents = rxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n\n    if (missedChangeEvents === null) {\n      // changeEventBuffer is of bounds -> we must re-execute over the database\n      mustReExec = true;\n    } else {\n      rxQuery._latestChangeEvent = rxQuery.collection._changeEventBuffer.counter;\n\n      var runChangeEvents = rxQuery.collection._changeEventBuffer.reduceByLastOfDoc(missedChangeEvents);\n\n      var changeResult = rxQuery._queryChangeDetector.runChangeDetection(runChangeEvents);\n\n      if (!Array.isArray(changeResult) && changeResult) {\n        // could not calculate the new results, execute must be done\n        mustReExec = true;\n      }\n\n      if (Array.isArray(changeResult) && !deepEqual(changeResult, rxQuery._resultsData)) {\n        // we got the new results, we do not have to re-execute, mustReExec stays false\n        ret = true; // true because results changed\n\n        rxQuery._setResultData(changeResult);\n      }\n    }\n  } // oh no we have to re-execute the whole query over the database\n\n\n  if (mustReExec) {\n    // counter can change while _execOverDatabase() is running so we save it here\n    var latestAfter = rxQuery.collection._changeEventBuffer.counter;\n    return rxQuery._execOverDatabase().then(function (newResultData) {\n      rxQuery._latestChangeEvent = latestAfter;\n\n      if (!deepEqual(newResultData, rxQuery._resultsData)) {\n        ret = true; // true because results changed\n\n        rxQuery._setResultData(newResultData);\n      }\n\n      return ret;\n    });\n  }\n\n  return ret; // true if results have changed\n}\n\nexport function isInstanceOf(obj) {\n  return obj instanceof RxQueryBase;\n}","map":{"version":3,"sources":["/Users/Hanzalah/Desktop/github/todo-offline/rxdb-hasura-demo/node_modules/rxdb/dist/es/rx-query.js"],"names":["_createClass","deepEqual","merge","BehaviorSubject","mergeMap","filter","map","first","tap","massageSelector","filterInMemoryFields","createMQuery","sortObject","stringifyFilter","clone","pluginMissing","create","createQueryChangeDetector","newRxError","newRxTypeError","runPluginHooks","createRxDocuments","_queryCount","newQueryID","RxQueryBase","op","queryObj","collection","id","_latestChangeEvent","_resultsData","_resultsDocs$","_execOverDatabaseCount","_ensureEqualQueue","Promise","resolve","_queryChangeDetector","_getDefaultQuery","mquery","_proto","prototype","toString","stringRep","stringObj","options","_conditions","_path","_fields","JSON","stringify","_clone","cloned","_setResultData","newResultData","docs","next","_execOverDatabase","docsPromise","_pouchFind","exec","_this","_ensureEqual","then","$","pipe","toPromise","toJSON","_toJSON","primPath","schema","primaryPath","json","selector","sort","sortArray","Object","keys","fieldName","dirInt","dir","pushMe","push","limit","skip","entries","_ref","v","_ref2","_ref3","Array","isArray","_ref4","length","forEach","_ref5","k","_id","keyCompress","doKeyCompression","_keyCompress","_keyCompressor","compressQuery","doesDocumentDataMatch","docData","_deleted","swapPrimaryToId","row","doc","rowsMatched","remove","ret","all","update","_updateObj","regex","params","clonedThis","path","_tunnelQueryCache","checkParam","charAt","substring","_sortAddToIndex","$gt","amount","key","get","_this2","_$","results$","hasChanged","slice","changeEvents$","docChanges$","_massageSelector","_ref6","rxQuery","_queryCache","getByQuery","protoMerge","rxQueryProto","mQueryProtoKeys","attrName","startsWith","p1","protoMerged","createRxQuery","getPrototypeOf","getOwnPropertyNames","_throwNotInSchema","schemaObj","getSchemaByObjectPath","type","where","gt","_isResultsInSync","_changeEventBuffer","counter","res","setTimeout","__ensureEqual","database","destroyed","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","changeResult","runChangeDetection","latestAfter","isInstanceOf","obj"],"mappings":"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","sourcesContent":["import _createClass from \"@babel/runtime/helpers/createClass\";\nimport deepEqual from 'deep-equal';\nimport { merge, BehaviorSubject } from 'rxjs';\nimport { mergeMap, filter, map, first, tap } from 'rxjs/operators';\nimport { massageSelector, filterInMemoryFields } from 'pouchdb-selector-core';\nimport { createMQuery } from './mquery/mquery';\nimport { sortObject, stringifyFilter, clone, pluginMissing } from './util';\nimport { create as createQueryChangeDetector } from './query-change-detector';\nimport { newRxError, newRxTypeError } from './rx-error';\nimport { runPluginHooks } from './hooks';\nimport { createRxDocuments } from './rx-document-prototype-merge';\nvar _queryCount = 0;\n\nvar newQueryID = function newQueryID() {\n  return ++_queryCount;\n};\n\nexport var RxQueryBase = /*#__PURE__*/function () {\n  function RxQueryBase(op, queryObj, collection) {\n    this.id = newQueryID();\n    this._latestChangeEvent = -1;\n    this._resultsData = null;\n    this._resultsDocs$ = new BehaviorSubject(null);\n    this._execOverDatabaseCount = 0;\n    this._ensureEqualQueue = Promise.resolve(false);\n    this.op = op;\n    this.queryObj = queryObj;\n    this.collection = collection;\n    this._queryChangeDetector = createQueryChangeDetector(this);\n    if (!queryObj) queryObj = _getDefaultQuery(this.collection);\n    this.mquery = createMQuery(queryObj);\n  }\n\n  var _proto = RxQueryBase.prototype;\n\n  _proto.toString = function toString() {\n    if (!this.stringRep) {\n      var stringObj = sortObject({\n        op: this.op,\n        options: this.mquery.options,\n        _conditions: this.mquery._conditions,\n        _path: this.mquery._path,\n        _fields: this.mquery._fields\n      }, true);\n      this.stringRep = JSON.stringify(stringObj, stringifyFilter);\n    }\n\n    return this.stringRep;\n  } // returns a clone of this RxQuery\n  ;\n\n  _proto._clone = function _clone() {\n    var cloned = new RxQueryBase(this.op, _getDefaultQuery(this.collection), this.collection);\n    cloned.mquery = this.mquery.clone();\n    return cloned;\n  }\n  /**\n   * set the new result-data as result-docs of the query\n   * @param newResultData json-docs that were recieved from pouchdb\n   */\n  ;\n\n  _proto._setResultData = function _setResultData(newResultData) {\n    this._resultsData = newResultData;\n    var docs = createRxDocuments(this.collection, this._resultsData);\n\n    this._resultsDocs$.next(docs);\n\n    return docs;\n  }\n  /**\n   * executes the query on the database\n   * @return results-array with document-data\n   */\n  ;\n\n  _proto._execOverDatabase = function _execOverDatabase() {\n    this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n    var docsPromise;\n\n    switch (this.op) {\n      case 'find':\n        docsPromise = this.collection._pouchFind(this);\n        break;\n\n      case 'findOne':\n        docsPromise = this.collection._pouchFind(this, 1);\n        break;\n\n      default:\n        throw newRxError('QU1', {\n          op: this.op\n        });\n    }\n\n    return docsPromise;\n  }\n  /**\n   * Execute the query\n   * To have an easier implementations,\n   * just subscribe and use the first result\n   */\n  ;\n\n  _proto.exec = function exec() {\n    var _this = this;\n\n    /**\n     * run _ensureEqual() here,\n     * this will make sure that errors in the query which throw inside of pouchdb,\n     * will be thrown at this execution context\n     */\n    return _ensureEqual(this).then(function () {\n      return _this.$.pipe(first()).toPromise();\n    });\n  };\n\n  _proto.toJSON = function toJSON() {\n    if (this._toJSON) return this._toJSON;\n    var primPath = this.collection.schema.primaryPath;\n    var json = {\n      selector: this.mquery._conditions\n    };\n    var options = clone(this.mquery.options); // sort\n\n    if (options.sort) {\n      var sortArray = [];\n      Object.keys(options.sort).map(function (fieldName) {\n        var dirInt = options.sort[fieldName];\n        var dir = 'asc';\n        if (dirInt === -1) dir = 'desc';\n        var pushMe = {}; // TODO run primary-swap somewhere else\n\n        if (fieldName === primPath) fieldName = '_id';\n        pushMe[fieldName] = dir;\n        sortArray.push(pushMe);\n      });\n      json.sort = sortArray;\n    }\n\n    if (options.limit) {\n      if (typeof options.limit !== 'number') {\n        throw newRxTypeError('QU2', {\n          limit: options.limit\n        });\n      }\n\n      json.limit = options.limit;\n    }\n\n    if (options.skip) {\n      if (typeof options.skip !== 'number') {\n        throw newRxTypeError('QU3', {\n          skip: options.skip\n        });\n      }\n\n      json.skip = options.skip;\n    } // strip empty selectors\n\n\n    Object.entries(json.selector).filter(function (_ref) {\n      var v = _ref[1];\n      return typeof v === 'object';\n    }).filter(function (_ref2) {\n      var v = _ref2[1];\n      return v !== null;\n    }).filter(function (_ref3) {\n      var v = _ref3[1];\n      return !Array.isArray(v);\n    }).filter(function (_ref4) {\n      var v = _ref4[1];\n      return Object.keys(v).length === 0;\n    }).forEach(function (_ref5) {\n      var k = _ref5[0];\n      return delete json.selector[k];\n    }); // primary swap\n\n    if (primPath !== '_id' && json.selector[primPath]) {\n      // selector\n      json.selector._id = json.selector[primPath];\n      delete json.selector[primPath];\n    } // if no selector is used, pouchdb has a bug, so we add a default-selector\n\n\n    if (Object.keys(json.selector).length === 0) {\n      json.selector = {\n        _id: {}\n      };\n    }\n\n    this._toJSON = json;\n    return this._toJSON;\n  };\n\n  _proto.keyCompress = function keyCompress() {\n    if (!this.collection.schema.doKeyCompression()) {\n      return this.toJSON();\n    } else {\n      if (!this._keyCompress) {\n        this._keyCompress = this.collection._keyCompressor.compressQuery(this.toJSON());\n      }\n\n      return this._keyCompress;\n    }\n  }\n  /**\n   * returns true if the document matches the query,\n   * does not use the 'skip' and 'limit'\n   */\n  ;\n\n  _proto.doesDocumentDataMatch = function doesDocumentDataMatch(docData) {\n    // if doc is deleted, it cannot match\n    if (docData._deleted) return false;\n    docData = this.collection.schema.swapPrimaryToId(docData); // return matchesSelector(docData, selector);\n\n    /**\n     * the following is equal to the implementation of pouchdb\n     * we do not use matchesSelector() directly so we can cache the\n     * result of massageSelector\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n\n    var selector = this.massageSelector;\n    var row = {\n      doc: docData\n    };\n    var rowsMatched = filterInMemoryFields([row], {\n      selector: selector\n    }, Object.keys(selector));\n    return rowsMatched && rowsMatched.length === 1;\n  }\n  /**\n   * deletes all found documents\n   * @return promise with deleted documents\n   */\n  ;\n\n  _proto.remove = function remove() {\n    var ret;\n    return this.exec().then(function (docs) {\n      ret = docs;\n      if (Array.isArray(docs)) return Promise.all(docs.map(function (doc) {\n        return doc.remove();\n      }));else return docs.remove();\n    }).then(function () {\n      return ret;\n    });\n  }\n  /**\n   * updates all found documents\n   * @overwritten by plugin (optinal)\n   */\n  ;\n\n  _proto.update = function update(_updateObj) {\n    throw pluginMissing('update');\n  }\n  /**\n   * regex cannot run on primary _id\n   * @link https://docs.cloudant.com/cloudant_query.html#creating-selector-expressions\n   */\n  ;\n\n  _proto.regex = function regex(params) {\n    var clonedThis = this._clone();\n\n    if (this.mquery._path === this.collection.schema.primaryPath) {\n      throw newRxError('QU4', {\n        path: this.mquery._path\n      });\n    }\n\n    clonedThis.mquery.regex(params);\n    return _tunnelQueryCache(clonedThis);\n  }\n  /**\n   * make sure it searches index because of pouchdb-find bug\n   * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n   */\n  ;\n\n  _proto.sort = function sort(params) {\n    var clonedThis = this._clone(); // workarround because sort wont work on unused keys\n\n\n    if (typeof params !== 'object') {\n      var checkParam = params.charAt(0) === '-' ? params.substring(1) : params;\n      if (!clonedThis.mquery._conditions[checkParam]) _sortAddToIndex(checkParam, clonedThis);\n    } else {\n      Object.keys(params).filter(function (k) {\n        return !clonedThis.mquery._conditions[k] || !clonedThis.mquery._conditions[k].$gt;\n      }).forEach(function (k) {\n        return _sortAddToIndex(k, clonedThis);\n      });\n    }\n\n    clonedThis.mquery.sort(params);\n    return _tunnelQueryCache(clonedThis);\n  };\n\n  _proto.limit = function limit(amount) {\n    if (this.op === 'findOne') throw newRxError('QU6');else {\n      var clonedThis = this._clone();\n\n      clonedThis.mquery.limit(amount);\n      return _tunnelQueryCache(clonedThis);\n    }\n  };\n\n  _createClass(RxQueryBase, [{\n    key: \"$\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this._$) {\n        /**\n         * We use _resultsDocs$ to emit new results\n         * This also ensure that there is a reemit on subscribe\n         */\n        var results$ = this._resultsDocs$.pipe(mergeMap(function (docs) {\n          return _ensureEqual(_this2).then(function (hasChanged) {\n            if (hasChanged) return false; // wait for next emit\n            else return docs;\n          });\n        }), filter(function (docs) {\n          return !!docs;\n        }), // not if previous returned false\n        map(function (docs) {\n          // findOne()-queries emit document or null\n          if (_this2.op === 'findOne') {\n            var doc = docs.length === 0 ? null : docs[0];\n            return doc;\n          } else return docs; // find()-queries emit RxDocument[]\n\n        }), map(function (docs) {\n          // copy the array so it wont matter if the user modifies it\n          var ret = Array.isArray(docs) ? docs.slice() : docs;\n          return ret;\n        }))['asObservable']();\n        /**\n         * subscribe to the changeEvent-stream so it detects changed if it has subscribers\n         */\n\n\n        var changeEvents$ = this.collection.docChanges$.pipe(tap(function () {\n          return _ensureEqual(_this2);\n        }), filter(function () {\n          return false;\n        }));\n        this._$ = // tslint:disable-next-line\n        merge(results$, changeEvents$);\n      }\n\n      return this._$;\n    }\n  }, {\n    key: \"massageSelector\",\n    get: function get() {\n      if (!this._massageSelector) {\n        var selector = this.mquery._conditions;\n        this._massageSelector = massageSelector(selector);\n      }\n\n      return this._massageSelector;\n    }\n  }]);\n\n  return RxQueryBase;\n}();\n\nfunction _getDefaultQuery(collection) {\n  var _ref6;\n\n  return _ref6 = {}, _ref6[collection.schema.primaryPath] = {}, _ref6;\n}\n/**\n * run this query through the QueryCache\n */\n\n\nfunction _tunnelQueryCache(rxQuery) {\n  return rxQuery.collection._queryCache.getByQuery(rxQuery);\n}\n/**\n * tunnel the proto-functions of mquery to RxQuery\n */\n\n\nfunction protoMerge(rxQueryProto, mQueryProtoKeys) {\n  mQueryProtoKeys.filter(function (attrName) {\n    return !attrName.startsWith('_');\n  }).filter(function (attrName) {\n    return !rxQueryProto[attrName];\n  }).forEach(function (attrName) {\n    rxQueryProto[attrName] = function (p1) {\n      var clonedThis = this._clone();\n\n      clonedThis.mquery[attrName](p1);\n      return _tunnelQueryCache(clonedThis);\n    };\n  });\n}\n\nvar protoMerged = false;\nexport function createRxQuery(op, queryObj, collection) {\n  // checks\n  if (queryObj && typeof queryObj !== 'object') {\n    throw newRxTypeError('QU7', {\n      queryObj: queryObj\n    });\n  }\n\n  if (Array.isArray(queryObj)) {\n    throw newRxTypeError('QU8', {\n      queryObj: queryObj\n    });\n  }\n\n  var ret = new RxQueryBase(op, queryObj, collection); // ensure when created with same params, only one is created\n\n  ret = _tunnelQueryCache(ret);\n\n  if (!protoMerged) {\n    protoMerged = true;\n    protoMerge(Object.getPrototypeOf(ret), Object.getOwnPropertyNames(Object.getPrototypeOf(ret.mquery)));\n  }\n\n  runPluginHooks('createRxQuery', ret);\n  return ret;\n}\n/**\n * throws an error that says that the key is not in the schema\n */\n\nfunction _throwNotInSchema(key) {\n  throw newRxError('QU5', {\n    key: key\n  });\n}\n/**\n * adds the field of 'sort' to the search-index\n * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n */\n\n\nfunction _sortAddToIndex(checkParam, clonedThis) {\n  var schemaObj = clonedThis.collection.schema.getSchemaByObjectPath(checkParam);\n  if (!schemaObj) _throwNotInSchema(checkParam);\n\n  switch (schemaObj.type) {\n    case 'integer':\n      // TODO change back to -Infinity when issue resolved\n      // @link https://github.com/pouchdb/pouchdb/issues/6454\n      clonedThis.mquery.where(checkParam).gt(-9999999999999999999999999999); // -Infinity does not work since pouchdb 6.2.0\n\n      break;\n\n    case 'string':\n      /**\n       * strings need an empty string, see\n       * @link https://github.com/pubkey/rxdb/issues/585\n       */\n      clonedThis.mquery.where(checkParam).gt('');\n      break;\n\n    default:\n      clonedThis.mquery.where(checkParam).gt(null);\n      break;\n  }\n}\n/**\n * check if the current results-state is in sync with the database\n * @return false if not which means it should re-execute\n */\n\n\nfunction _isResultsInSync(rxQuery) {\n  if (rxQuery._latestChangeEvent >= rxQuery.collection._changeEventBuffer.counter) {\n    return true;\n  } else return false;\n}\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\n\n\nfunction _ensureEqual(rxQuery) {\n  rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue.then(function () {\n    return new Promise(function (res) {\n      return setTimeout(res, 0);\n    });\n  }).then(function () {\n    return __ensureEqual(rxQuery);\n  }).then(function (ret) {\n    return new Promise(function (res) {\n      return setTimeout(res, 0);\n    }).then(function () {\n      return ret;\n    });\n  });\n  return rxQuery._ensureEqualQueue;\n}\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\n\n\nfunction __ensureEqual(rxQuery) {\n  if (rxQuery.collection.database.destroyed) return false; // db is closed\n\n  if (_isResultsInSync(rxQuery)) return false; // nothing happend\n\n  var ret = false;\n  var mustReExec = false; // if this becomes true, a whole execution over the database is made\n\n  if (rxQuery._latestChangeEvent === -1) mustReExec = true; // have not executed yet -> must run\n\n  /**\n   * try to use the queryChangeDetector to calculate the new results\n   */\n\n  if (!mustReExec) {\n    var missedChangeEvents = rxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n\n    if (missedChangeEvents === null) {\n      // changeEventBuffer is of bounds -> we must re-execute over the database\n      mustReExec = true;\n    } else {\n      rxQuery._latestChangeEvent = rxQuery.collection._changeEventBuffer.counter;\n\n      var runChangeEvents = rxQuery.collection._changeEventBuffer.reduceByLastOfDoc(missedChangeEvents);\n\n      var changeResult = rxQuery._queryChangeDetector.runChangeDetection(runChangeEvents);\n\n      if (!Array.isArray(changeResult) && changeResult) {\n        // could not calculate the new results, execute must be done\n        mustReExec = true;\n      }\n\n      if (Array.isArray(changeResult) && !deepEqual(changeResult, rxQuery._resultsData)) {\n        // we got the new results, we do not have to re-execute, mustReExec stays false\n        ret = true; // true because results changed\n\n        rxQuery._setResultData(changeResult);\n      }\n    }\n  } // oh no we have to re-execute the whole query over the database\n\n\n  if (mustReExec) {\n    // counter can change while _execOverDatabase() is running so we save it here\n    var latestAfter = rxQuery.collection._changeEventBuffer.counter;\n    return rxQuery._execOverDatabase().then(function (newResultData) {\n      rxQuery._latestChangeEvent = latestAfter;\n\n      if (!deepEqual(newResultData, rxQuery._resultsData)) {\n        ret = true; // true because results changed\n\n        rxQuery._setResultData(newResultData);\n      }\n\n      return ret;\n    });\n  }\n\n  return ret; // true if results have changed\n}\n\nexport function isInstanceOf(obj) {\n  return obj instanceof RxQueryBase;\n}\n//# sourceMappingURL=rx-query.js.map"]},"metadata":{},"sourceType":"module"}